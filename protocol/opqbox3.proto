syntax = "proto3";

package opq.opqbox3;

import "rustproto.proto";

option (rustproto.expose_oneof_all) = true;

message Metric{
    float min = 1;
    float max = 2;
    float average = 3;
}

//Measurements containing features from the box.
message Measurement {
    //Device ID.
    uint32 box_id = 1;
    //Timestamp in ms of when the raw data was READ OUT.
    uint64 timestamp_ms = 2;
    //A map of metrics.
    map<string, Metric> metrics = 3;
}



//Get the info from the box
message GetInfoCommand {
}

//Get raw data from the box command.
message GetDataCommand {
    //Begining timestamp of the transfer.
    uint64 start_ms = 1;
    //Ending timestamp of the transfer.
    uint64 end_ms = 2;
    //Should the box wait if the ending timestamp is in the future, or send what it has now.
    bool wait = 3;
}

//Set how often the measurements are generated by the box.
message SetMeasturementRateCommand {
    //How many grid cycles to process per measurements.
    uint32 measurement_window_cycles = 1;
}

//Send a command to a specific plugin.
message SendCommandToPlugin{
    string plugin_name = 1;
    string message = 2;
}

//Command buffer.
message Command {
    //Sequence number of the command and response must match.
    uint32 seq = 1;
    //Device id
    int32 box_id = 2;
    //Timestamp in milliseconds.
    uint64 timestamp_ms = 3;
    //Identity of the sender
    string identity = 4;
    //Only a single command type is possible per command buffer.
    oneof command {
        GetInfoCommand info_command = 5;
        GetDataCommand data_command = 6;
        SetMeasturementRateCommand sampling_rate_command = 7;
        SendCommandToPlugin send_command_to_plugin = 8;
    }
}

//Get infor response.
message GetInfoResponse {
    //Mac address of the box
    string mac_addr = 1;
    //Wifi network it is connected to.
    string wifi_network = 2;
    //Ip address of the wlan0 interface.
    string ip = 3;
    //Uptime in milliseconds.
    uint64 uptime = 4;
    //Calibration constant for the box.
    uint64 calibration_constant = 5;
    //Box public key.
    string pub_key = 6;
    //How often the box is producing measurements.
    uint32 measurement_rate = 7;
}



//Response to the set measurement rate command.
message SetMeasurementRateResponse {
    //how many cycles we processed per measurement last time.
    uint32 old_rate_cycles = 1;
}

//Header for the get data command. 
message GetDataResponseHeader {
    uint64 start_ts = 1;
    uint64 end_ts = 2;
}

//Response to the set measurement rate command.
message SendCommandToPluginResponse {
    bool ok = 1;
}

//Response buffer.
message Response {
    //ID of the box generating the response.
    int32 box_id = 1;
    //Sequence number of the command.
    uint32 seq = 2;
    //Response timestamp in ms
    uint64 timestamp_ms = 3;
    //Only one command is possible for the response.
    oneof response {
        GetInfoResponse info_response = 4;
        SetMeasurementRateResponse message_rate_reponse = 5;
        GetDataResponseHeader get_data_response = 6;
        SendCommandToPluginResponse command_to_plugin_response = 7;
    }
}

message Cycle {
    repeated int32 datapoints = 1;
    uint64 timestamp_ms = 2;
}
