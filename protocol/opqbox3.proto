syntax = "proto3";

package opq.proto3;

//Measurements containing features from the box.
message Measurement {
  //Device ID.
  uint32 box_id = 0;
  //Timestamp in ms of when the raw data was READ OUT.
  uint64 timestamp_ms = 1;
  //A map of metrics.
  map<string, float> metrics = 2;
}

//Get the info from the box
message GetInfoCommand{}

//Get raw data from the box command.
message GetDataCommand{
  //Begining timestamp of the transfer.
  uint64 start_ms = 0;
  //Ending timestamp of the transfer.
  uint64 end_ms = 1;
  //Should the box wait if the ending timestamp is in the future, or send what it has now.
  bool wait = 2;
}

//Set how often the measurements are generated by the box.
message SetMeasturementRateCommand{
  //Measurement rate in Hz. 1Hz is the longest possible interval.
  uint32 measurement_rate_hz = 0;  
  //How long shoud the new rate percist in ms. 0 will adapt new rate indefinitely.
  uint32 duration_ms = 1;
}

//Command buffer.
message Command {
  //Sequence number of the command and response must match.
  uint32 seq = 0;
  //Timestamp in milliseconds.
  uint64 timestamp_ms = 1;
  //Only a single command type is possible per command buffer.
  oneof command {
    GetInfoCommand info_command = 2;
    GetDataCommand data_command = 3;
    SetMeasturementRateCommand sampling_rate_command = 4;
  }
}

//Get infor response.
message GetInfoResponse{
  //Mac address of the box
  string mac_addr = 0;
  //Wifi network it is connected to.
  string wifi_network = 1;
  //Ip address of the wlan0 interface.
  string ip = 2;
  //Uptime in milliseconds.
  uint64 uptime = 3;
  //Calibration constant for the box.
  uint64 calibration_constant = 4;
  //Box public key.
  string pub_key = 5;
  //How often the box is producing measurements.
  uint32 measurement_rate = 6;
}

//Response to the set measurement rate command.
message SetMeasurementRateResponse{
  //The old rate in Hz.
  uint32 old_rate = 0;
}

//Header for the get data command. 
message GetDateResponseHeader{
  uint64 start_ts =0;
  uint64 end_ts = 1;
}

//Response buffer.
message Response {
  //ID of the box generating the response.
  int32 box_id = 0;
  //Sequence number of the command.
  uint32 seq = 1;
  //Response timestamp in ms
  uint64 timestamp_ms = 2;
  //Only one command is possible for the response.
  oneof response { 
    GetInfoResponse info_response = 3;
    SetMeasurementRateResponse message_rate_reponse = 4;
    GetDateResponseHeader get_data_response = 5;
  }
}
