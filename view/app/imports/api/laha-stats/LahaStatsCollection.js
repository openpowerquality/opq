import SimpleSchema from 'simpl-schema';
import BaseCollection from '../base/BaseCollection.js';

const PluginStatsSchemaInner = new SimpleSchema({
    messages_received: Number,
    messages_published: Number,
    bytes_received: Number,
    bytes_published: Number,
});

const BoxTriggeringThresholdSchema = new SimpleSchema({
    box_id: String,
    ref_f: Number,
    ref_v: Number,
    threshold_percent_f_low: Number,
    threshold_percent_f_high: Number,
    threshold_percent_v_low: Number,
    threshold_percent_v_high: Number,
    threshold_percent_thd_high: Number,
});

const PluginStatsSchema = new SimpleSchema({
    MakaiEventPlugin: PluginStatsSchemaInner,
    ThdPlugin: PluginStatsSchemaInner,
    StatusPlugin: PluginStatsSchemaInner,
    IticPlugin: PluginStatsSchemaInner,
    FrequencyVariationPlugin: PluginStatsSchemaInner,
    TransientPlugin: PluginStatsSchemaInner,
    Ieee1159VoltagePlugin: PluginStatsSchemaInner,
    SemiF47Plugin: PluginStatsSchemaInner,
    SystemStatsPlugin: PluginStatsSchemaInner,
    OutagePlugin: PluginStatsSchemaInner,
    LahaGcPlugin: PluginStatsSchemaInner,
});

const DescriptiveStatisticSchema = new SimpleSchema({
    min: Number,
    max: Number,
    mean: Number,
    var: Number,
    cnt: Number,
    start_timestamp_s: Number,
    end_timestamp_s: Number,
});

const SystemStatsSchema = new SimpleSchema({
    cpu_load_percent: DescriptiveStatisticSchema,
    memory_use_bytes: DescriptiveStatisticSchema,
    disk_use_bytes: DescriptiveStatisticSchema,
});

const LahaLevelStatsSchema = new SimpleSchema({
    ttl: Number,
    count: Number,
    size_bytes: Number,
});

const InstantaneousMeasurementStatsSchema = new SimpleSchema({
    box_samples: LahaLevelStatsSchema,
});

const AggregateMeasurementStatsSchema = new SimpleSchema({
    measurements: LahaLevelStatsSchema,
    trends: LahaLevelStatsSchema,
});

const DetectionsStatsSchema = new SimpleSchema({
    events: LahaLevelStatsSchema,
});

const IncidentsStatsSchema = new SimpleSchema({
   incidents: LahaLevelStatsSchema,
});

const PhenomenaStatsSchema = new SimpleSchema({
   phenomena: LahaLevelStatsSchema,
});

const GcStatsSchema = new SimpleSchema({
    samples: Number,
    measurements: Number,
    trends: Number,
    events: Number,
    incidents: Number,
    phenomena: Number,
});

const LahaStatsSchema = new SimpleSchema({
    active_devices: Number,
    instantaneous_measurements_stats: InstantaneousMeasurementStatsSchema,
    aggregate_measurements_stats: AggregateMeasurementStatsSchema,
    detections_stats: DetectionsStatsSchema,
    incidents_stats: IncidentsStatsSchema,
    phenomena_stats: PhenomenaStatsSchema,
    gc_stats: GcStatsSchema,
    box_triggering_thresholds: [BoxTriggeringThresholdSchema],
});

const GroundTruthSchema = new SimpleSchema({
    count: Number,
    size_bytes: Number,
});

const OtherStatsSchema = new SimpleSchema({
   ground_truth: GroundTruthSchema,
});


/**
 * The laha-stats collection contains metrics generated by OPQ Mauka about plugins, system metrics, and Laha metrics.
 * @see {@link https://openpowerquality.org/docs/cloud-datamodel.html}
 */
class LahaStatsCollection extends BaseCollection {
    constructor() {
        super('laha_stats', new SimpleSchema({
            timestamp_s: Number,
            plugin_stats: PluginStatsSchema,
            system_stats: SystemStatsSchema,
            laha_stats: LahaStatsSchema,
            other_stats: OtherStatsSchema,
        }));
    }
}

/**
 * Provides the singleton instance of this class.
 * @type {LahaStatsCollection}
 */
export const LahaStats = new LahaStatsCollection();
