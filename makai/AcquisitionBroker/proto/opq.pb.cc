// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opq.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "opq.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace opq {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Cycle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cycle_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TriggerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TriggerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestDataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestDataMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestDataMessage_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestEventMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestEventMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestEventMessage_TriggerType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_opq_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_opq_2eproto() {
  protobuf_AddDesc_opq_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "opq.proto");
  GOOGLE_CHECK(file != NULL);
  Cycle_descriptor_ = file->message_type(0);
  static const int Cycle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cycle, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cycle, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cycle, last_gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cycle, current_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cycle, flags_),
  };
  Cycle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Cycle_descriptor_,
      Cycle::default_instance_,
      Cycle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cycle, _has_bits_[0]),
      -1,
      -1,
      sizeof(Cycle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cycle, _internal_metadata_),
      -1);
  DataMessage_descriptor_ = file->message_type(1);
  static const int DataMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, cycles_),
  };
  DataMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataMessage_descriptor_,
      DataMessage::default_instance_,
      DataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(DataMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, _internal_metadata_),
      -1);
  TriggerMessage_descriptor_ = file->message_type(2);
  static const int TriggerMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerMessage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerMessage, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerMessage, rms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerMessage, thd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerMessage, last_gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerMessage, current_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerMessage, flags_),
  };
  TriggerMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TriggerMessage_descriptor_,
      TriggerMessage::default_instance_,
      TriggerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(TriggerMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerMessage, _internal_metadata_),
      -1);
  RequestDataMessage_descriptor_ = file->message_type(3);
  static const int RequestDataMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDataMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDataMessage, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDataMessage, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDataMessage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDataMessage, back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDataMessage, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDataMessage, num_cycles_),
  };
  RequestDataMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestDataMessage_descriptor_,
      RequestDataMessage::default_instance_,
      RequestDataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDataMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestDataMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDataMessage, _internal_metadata_),
      -1);
  RequestDataMessage_RequestType_descriptor_ = RequestDataMessage_descriptor_->enum_type(0);
  RequestEventMessage_descriptor_ = file->message_type(4);
  static const int RequestEventMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEventMessage, start_timestamp_ms_utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEventMessage, end_timestamp_ms_utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEventMessage, trigger_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEventMessage, percent_magnitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEventMessage, box_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEventMessage, requestee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEventMessage, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEventMessage, request_data_),
  };
  RequestEventMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestEventMessage_descriptor_,
      RequestEventMessage::default_instance_,
      RequestEventMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEventMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestEventMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEventMessage, _internal_metadata_),
      -1);
  RequestEventMessage_TriggerType_descriptor_ = RequestEventMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_opq_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Cycle_descriptor_, &Cycle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataMessage_descriptor_, &DataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TriggerMessage_descriptor_, &TriggerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestDataMessage_descriptor_, &RequestDataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestEventMessage_descriptor_, &RequestEventMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_opq_2eproto() {
  delete Cycle::default_instance_;
  delete Cycle_reflection_;
  delete DataMessage::default_instance_;
  delete DataMessage_reflection_;
  delete TriggerMessage::default_instance_;
  delete TriggerMessage_reflection_;
  delete RequestDataMessage::default_instance_;
  delete RequestDataMessage_reflection_;
  delete RequestEventMessage::default_instance_;
  delete RequestEventMessage_reflection_;
}

void protobuf_AddDesc_opq_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_opq_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\topq.proto\022\topq.proto\"[\n\005Cycle\022\014\n\004time\030"
    "\001 \002(\004\022\014\n\004data\030\002 \003(\005\022\020\n\010last_gps\030\003 \001(\005\022\025\n"
    "\rcurrent_count\030\004 \001(\005\022\r\n\005flags\030\005 \001(\005\";\n\013D"
    "ataMessage\022\n\n\002id\030\001 \002(\005\022 \n\006cycles\030\003 \003(\0132\020"
    ".opq.proto.Cycle\"\217\001\n\016TriggerMessage\022\n\n\002i"
    "d\030\001 \002(\005\022\014\n\004time\030\002 \002(\004\022\021\n\tfrequency\030\003 \002(\002"
    "\022\013\n\003rms\030\004 \002(\002\022\013\n\003thd\030\005 \001(\002\022\020\n\010last_gps\030\006"
    " \001(\005\022\025\n\rcurrent_count\030\007 \001(\005\022\r\n\005flags\030\010 \001"
    "(\005\"\370\001\n\022RequestDataMessage\0227\n\004type\030\001 \002(\0162"
    ").opq.proto.RequestDataMessage.RequestTy"
    "pe\022\027\n\017sequence_number\030\002 \002(\r\022\r\n\005boxId\030\003 \001"
    "(\r\022\014\n\004time\030\004 \001(\004\022\014\n\004back\030\005 \001(\004\022\017\n\007forwar"
    "d\030\006 \001(\004\022\022\n\nnum_cycles\030\007 \001(\r\"@\n\013RequestTy"
    "pe\022\010\n\004PING\020\001\022\010\n\004PONG\020\002\022\010\n\004READ\020\003\022\010\n\004RESP"
    "\020\004\022\t\n\005ERROR\020\005\"\345\002\n\023RequestEventMessage\022\036\n"
    "\026start_timestamp_ms_utc\030\001 \002(\004\022\034\n\024end_tim"
    "estamp_ms_utc\030\002 \002(\004\022@\n\014trigger_type\030\003 \002("
    "\0162*.opq.proto.RequestEventMessage.Trigge"
    "rType\022\031\n\021percent_magnitude\030\004 \002(\001\022\017\n\007box_"
    "ids\030\005 \003(\005\022\021\n\trequestee\030\006 \002(\t\022\023\n\013descript"
    "ion\030\007 \002(\t\022\024\n\014request_data\030\010 \002(\010\"d\n\013Trigg"
    "erType\022\021\n\rFREQUENCY_SAG\020\001\022\023\n\017FREQUENCY_S"
    "WELL\020\002\022\017\n\013VOLTAGE_SAG\020\003\022\021\n\rVOLTAGE_SWELL"
    "\020\004\022\t\n\005OTHER\020\005", 933);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "opq.proto", &protobuf_RegisterTypes);
  Cycle::default_instance_ = new Cycle();
  DataMessage::default_instance_ = new DataMessage();
  TriggerMessage::default_instance_ = new TriggerMessage();
  RequestDataMessage::default_instance_ = new RequestDataMessage();
  RequestEventMessage::default_instance_ = new RequestEventMessage();
  Cycle::default_instance_->InitAsDefaultInstance();
  DataMessage::default_instance_->InitAsDefaultInstance();
  TriggerMessage::default_instance_->InitAsDefaultInstance();
  RequestDataMessage::default_instance_->InitAsDefaultInstance();
  RequestEventMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_opq_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_opq_2eproto {
  StaticDescriptorInitializer_opq_2eproto() {
    protobuf_AddDesc_opq_2eproto();
  }
} static_descriptor_initializer_opq_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cycle::kTimeFieldNumber;
const int Cycle::kDataFieldNumber;
const int Cycle::kLastGpsFieldNumber;
const int Cycle::kCurrentCountFieldNumber;
const int Cycle::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cycle::Cycle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto.Cycle)
}

void Cycle::InitAsDefaultInstance() {
}

Cycle::Cycle(const Cycle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto.Cycle)
}

void Cycle::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  last_gps_ = 0;
  current_count_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cycle::~Cycle() {
  // @@protoc_insertion_point(destructor:opq.proto.Cycle)
  SharedDtor();
}

void Cycle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cycle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cycle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cycle_descriptor_;
}

const Cycle& Cycle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opq_2eproto();
  return *default_instance_;
}

Cycle* Cycle::default_instance_ = NULL;

Cycle* Cycle::New(::google::protobuf::Arena* arena) const {
  Cycle* n = new Cycle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cycle::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto.Cycle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Cycle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Cycle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 29u) {
    ZR_(last_gps_, flags_);
    time_ = GOOGLE_ULONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Cycle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto.Cycle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }

      // repeated int32 data = 2;
      case 2: {
        if (tag == 16) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_data())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data;
        if (input->ExpectTag(24)) goto parse_last_gps;
        break;
      }

      // optional int32 last_gps = 3;
      case 3: {
        if (tag == 24) {
         parse_last_gps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_gps_)));
          set_has_last_gps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_current_count;
        break;
      }

      // optional int32 current_count = 4;
      case 4: {
        if (tag == 32) {
         parse_current_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_count_)));
          set_has_current_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flags;
        break;
      }

      // optional int32 flags = 5;
      case 5: {
        if (tag == 40) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto.Cycle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto.Cycle)
  return false;
#undef DO_
}

void Cycle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto.Cycle)
  // required uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // repeated int32 data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->data(i), output);
  }

  // optional int32 last_gps = 3;
  if (has_last_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_gps(), output);
  }

  // optional int32 current_count = 4;
  if (has_current_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_count(), output);
  }

  // optional int32 flags = 5;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opq.proto.Cycle)
}

::google::protobuf::uint8* Cycle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto.Cycle)
  // required uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // repeated int32 data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->data(i), target);
  }

  // optional int32 last_gps = 3;
  if (has_last_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->last_gps(), target);
  }

  // optional int32 current_count = 4;
  if (has_current_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current_count(), target);
  }

  // optional int32 flags = 5;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opq.proto.Cycle)
  return target;
}

int Cycle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto.Cycle)
  int total_size = 0;

  // required uint64 time = 1;
  if (has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }
  if (_has_bits_[2 / 32] & 28u) {
    // optional int32 last_gps = 3;
    if (has_last_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_gps());
    }

    // optional int32 current_count = 4;
    if (has_current_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_count());
    }

    // optional int32 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  // repeated int32 data = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cycle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto.Cycle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Cycle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Cycle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto.Cycle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto.Cycle)
    MergeFrom(*source);
  }
}

void Cycle::MergeFrom(const Cycle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto.Cycle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_last_gps()) {
      set_last_gps(from.last_gps());
    }
    if (from.has_current_count()) {
      set_current_count(from.current_count());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Cycle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto.Cycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cycle::CopyFrom(const Cycle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto.Cycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cycle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Cycle::Swap(Cycle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cycle::InternalSwap(Cycle* other) {
  std::swap(time_, other->time_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(last_gps_, other->last_gps_);
  std::swap(current_count_, other->current_count_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cycle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cycle_descriptor_;
  metadata.reflection = Cycle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cycle

// required uint64 time = 1;
bool Cycle::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Cycle::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Cycle::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Cycle::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
 ::google::protobuf::uint64 Cycle::time() const {
  // @@protoc_insertion_point(field_get:opq.proto.Cycle.time)
  return time_;
}
 void Cycle::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.Cycle.time)
}

// repeated int32 data = 2;
int Cycle::data_size() const {
  return data_.size();
}
void Cycle::clear_data() {
  data_.Clear();
}
 ::google::protobuf::int32 Cycle::data(int index) const {
  // @@protoc_insertion_point(field_get:opq.proto.Cycle.data)
  return data_.Get(index);
}
 void Cycle::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:opq.proto.Cycle.data)
}
 void Cycle::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:opq.proto.Cycle.data)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Cycle::data() const {
  // @@protoc_insertion_point(field_list:opq.proto.Cycle.data)
  return data_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Cycle::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:opq.proto.Cycle.data)
  return &data_;
}

// optional int32 last_gps = 3;
bool Cycle::has_last_gps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Cycle::set_has_last_gps() {
  _has_bits_[0] |= 0x00000004u;
}
void Cycle::clear_has_last_gps() {
  _has_bits_[0] &= ~0x00000004u;
}
void Cycle::clear_last_gps() {
  last_gps_ = 0;
  clear_has_last_gps();
}
 ::google::protobuf::int32 Cycle::last_gps() const {
  // @@protoc_insertion_point(field_get:opq.proto.Cycle.last_gps)
  return last_gps_;
}
 void Cycle::set_last_gps(::google::protobuf::int32 value) {
  set_has_last_gps();
  last_gps_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.Cycle.last_gps)
}

// optional int32 current_count = 4;
bool Cycle::has_current_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Cycle::set_has_current_count() {
  _has_bits_[0] |= 0x00000008u;
}
void Cycle::clear_has_current_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void Cycle::clear_current_count() {
  current_count_ = 0;
  clear_has_current_count();
}
 ::google::protobuf::int32 Cycle::current_count() const {
  // @@protoc_insertion_point(field_get:opq.proto.Cycle.current_count)
  return current_count_;
}
 void Cycle::set_current_count(::google::protobuf::int32 value) {
  set_has_current_count();
  current_count_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.Cycle.current_count)
}

// optional int32 flags = 5;
bool Cycle::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Cycle::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
void Cycle::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
void Cycle::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
 ::google::protobuf::int32 Cycle::flags() const {
  // @@protoc_insertion_point(field_get:opq.proto.Cycle.flags)
  return flags_;
}
 void Cycle::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.Cycle.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataMessage::kIdFieldNumber;
const int DataMessage::kCyclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataMessage::DataMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto.DataMessage)
}

void DataMessage::InitAsDefaultInstance() {
}

DataMessage::DataMessage(const DataMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto.DataMessage)
}

void DataMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataMessage::~DataMessage() {
  // @@protoc_insertion_point(destructor:opq.proto.DataMessage)
  SharedDtor();
}

void DataMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataMessage_descriptor_;
}

const DataMessage& DataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opq_2eproto();
  return *default_instance_;
}

DataMessage* DataMessage::default_instance_ = NULL;

DataMessage* DataMessage::New(::google::protobuf::Arena* arena) const {
  DataMessage* n = new DataMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto.DataMessage)
  id_ = 0;
  cycles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto.DataMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cycles;
        break;
      }

      // repeated .opq.proto.Cycle cycles = 3;
      case 3: {
        if (tag == 26) {
         parse_cycles:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cycles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cycles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_cycles;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto.DataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto.DataMessage)
  return false;
#undef DO_
}

void DataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto.DataMessage)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .opq.proto.Cycle cycles = 3;
  for (unsigned int i = 0, n = this->cycles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cycles(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opq.proto.DataMessage)
}

::google::protobuf::uint8* DataMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto.DataMessage)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .opq.proto.Cycle cycles = 3;
  for (unsigned int i = 0, n = this->cycles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->cycles(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opq.proto.DataMessage)
  return target;
}

int DataMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto.DataMessage)
  int total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  // repeated .opq.proto.Cycle cycles = 3;
  total_size += 1 * this->cycles_size();
  for (int i = 0; i < this->cycles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cycles(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto.DataMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto.DataMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto.DataMessage)
    MergeFrom(*source);
  }
}

void DataMessage::MergeFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto.DataMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cycles_.MergeFrom(from.cycles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DataMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto.DataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMessage::CopyFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto.DataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cycles())) return false;
  return true;
}

void DataMessage::Swap(DataMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataMessage::InternalSwap(DataMessage* other) {
  std::swap(id_, other->id_);
  cycles_.UnsafeArenaSwap(&other->cycles_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataMessage_descriptor_;
  metadata.reflection = DataMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataMessage

// required int32 id = 1;
bool DataMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DataMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataMessage::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 DataMessage::id() const {
  // @@protoc_insertion_point(field_get:opq.proto.DataMessage.id)
  return id_;
}
 void DataMessage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.DataMessage.id)
}

// repeated .opq.proto.Cycle cycles = 3;
int DataMessage::cycles_size() const {
  return cycles_.size();
}
void DataMessage::clear_cycles() {
  cycles_.Clear();
}
const ::opq::proto::Cycle& DataMessage::cycles(int index) const {
  // @@protoc_insertion_point(field_get:opq.proto.DataMessage.cycles)
  return cycles_.Get(index);
}
::opq::proto::Cycle* DataMessage::mutable_cycles(int index) {
  // @@protoc_insertion_point(field_mutable:opq.proto.DataMessage.cycles)
  return cycles_.Mutable(index);
}
::opq::proto::Cycle* DataMessage::add_cycles() {
  // @@protoc_insertion_point(field_add:opq.proto.DataMessage.cycles)
  return cycles_.Add();
}
::google::protobuf::RepeatedPtrField< ::opq::proto::Cycle >*
DataMessage::mutable_cycles() {
  // @@protoc_insertion_point(field_mutable_list:opq.proto.DataMessage.cycles)
  return &cycles_;
}
const ::google::protobuf::RepeatedPtrField< ::opq::proto::Cycle >&
DataMessage::cycles() const {
  // @@protoc_insertion_point(field_list:opq.proto.DataMessage.cycles)
  return cycles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TriggerMessage::kIdFieldNumber;
const int TriggerMessage::kTimeFieldNumber;
const int TriggerMessage::kFrequencyFieldNumber;
const int TriggerMessage::kRmsFieldNumber;
const int TriggerMessage::kThdFieldNumber;
const int TriggerMessage::kLastGpsFieldNumber;
const int TriggerMessage::kCurrentCountFieldNumber;
const int TriggerMessage::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TriggerMessage::TriggerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto.TriggerMessage)
}

void TriggerMessage::InitAsDefaultInstance() {
}

TriggerMessage::TriggerMessage(const TriggerMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto.TriggerMessage)
}

void TriggerMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  frequency_ = 0;
  rms_ = 0;
  thd_ = 0;
  last_gps_ = 0;
  current_count_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriggerMessage::~TriggerMessage() {
  // @@protoc_insertion_point(destructor:opq.proto.TriggerMessage)
  SharedDtor();
}

void TriggerMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TriggerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriggerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerMessage_descriptor_;
}

const TriggerMessage& TriggerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opq_2eproto();
  return *default_instance_;
}

TriggerMessage* TriggerMessage::default_instance_ = NULL;

TriggerMessage* TriggerMessage::New(::google::protobuf::Arena* arena) const {
  TriggerMessage* n = new TriggerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TriggerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto.TriggerMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TriggerMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TriggerMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(time_, flags_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TriggerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto.TriggerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_frequency;
        break;
      }

      // required float frequency = 3;
      case 3: {
        if (tag == 29) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_rms;
        break;
      }

      // required float rms = 4;
      case 4: {
        if (tag == 37) {
         parse_rms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rms_)));
          set_has_rms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_thd;
        break;
      }

      // optional float thd = 5;
      case 5: {
        if (tag == 45) {
         parse_thd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thd_)));
          set_has_thd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_last_gps;
        break;
      }

      // optional int32 last_gps = 6;
      case 6: {
        if (tag == 48) {
         parse_last_gps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_gps_)));
          set_has_last_gps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_current_count;
        break;
      }

      // optional int32 current_count = 7;
      case 7: {
        if (tag == 56) {
         parse_current_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_count_)));
          set_has_current_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_flags;
        break;
      }

      // optional int32 flags = 8;
      case 8: {
        if (tag == 64) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto.TriggerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto.TriggerMessage)
  return false;
#undef DO_
}

void TriggerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto.TriggerMessage)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // required float frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->frequency(), output);
  }

  // required float rms = 4;
  if (has_rms()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rms(), output);
  }

  // optional float thd = 5;
  if (has_thd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->thd(), output);
  }

  // optional int32 last_gps = 6;
  if (has_last_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->last_gps(), output);
  }

  // optional int32 current_count = 7;
  if (has_current_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_count(), output);
  }

  // optional int32 flags = 8;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opq.proto.TriggerMessage)
}

::google::protobuf::uint8* TriggerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto.TriggerMessage)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // required float frequency = 3;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->frequency(), target);
  }

  // required float rms = 4;
  if (has_rms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rms(), target);
  }

  // optional float thd = 5;
  if (has_thd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->thd(), target);
  }

  // optional int32 last_gps = 6;
  if (has_last_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->last_gps(), target);
  }

  // optional int32 current_count = 7;
  if (has_current_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->current_count(), target);
  }

  // optional int32 flags = 8;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opq.proto.TriggerMessage)
  return target;
}

int TriggerMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:opq.proto.TriggerMessage)
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_time()) {
    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  if (has_frequency()) {
    // required float frequency = 3;
    total_size += 1 + 4;
  }

  if (has_rms()) {
    // required float rms = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int TriggerMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto.TriggerMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

    // required float frequency = 3;
    total_size += 1 + 4;

    // required float rms = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 240u) {
    // optional float thd = 5;
    if (has_thd()) {
      total_size += 1 + 4;
    }

    // optional int32 last_gps = 6;
    if (has_last_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_gps());
    }

    // optional int32 current_count = 7;
    if (has_current_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_count());
    }

    // optional int32 flags = 8;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriggerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto.TriggerMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TriggerMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TriggerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto.TriggerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto.TriggerMessage)
    MergeFrom(*source);
  }
}

void TriggerMessage::MergeFrom(const TriggerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto.TriggerMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_rms()) {
      set_rms(from.rms());
    }
    if (from.has_thd()) {
      set_thd(from.thd());
    }
    if (from.has_last_gps()) {
      set_last_gps(from.last_gps());
    }
    if (from.has_current_count()) {
      set_current_count(from.current_count());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TriggerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto.TriggerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerMessage::CopyFrom(const TriggerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto.TriggerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TriggerMessage::Swap(TriggerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TriggerMessage::InternalSwap(TriggerMessage* other) {
  std::swap(id_, other->id_);
  std::swap(time_, other->time_);
  std::swap(frequency_, other->frequency_);
  std::swap(rms_, other->rms_);
  std::swap(thd_, other->thd_);
  std::swap(last_gps_, other->last_gps_);
  std::swap(current_count_, other->current_count_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TriggerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TriggerMessage_descriptor_;
  metadata.reflection = TriggerMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TriggerMessage

// required int32 id = 1;
bool TriggerMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TriggerMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TriggerMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TriggerMessage::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 TriggerMessage::id() const {
  // @@protoc_insertion_point(field_get:opq.proto.TriggerMessage.id)
  return id_;
}
 void TriggerMessage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.TriggerMessage.id)
}

// required uint64 time = 2;
bool TriggerMessage::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TriggerMessage::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void TriggerMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void TriggerMessage::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
 ::google::protobuf::uint64 TriggerMessage::time() const {
  // @@protoc_insertion_point(field_get:opq.proto.TriggerMessage.time)
  return time_;
}
 void TriggerMessage::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.TriggerMessage.time)
}

// required float frequency = 3;
bool TriggerMessage::has_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TriggerMessage::set_has_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
void TriggerMessage::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
void TriggerMessage::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
 float TriggerMessage::frequency() const {
  // @@protoc_insertion_point(field_get:opq.proto.TriggerMessage.frequency)
  return frequency_;
}
 void TriggerMessage::set_frequency(float value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.TriggerMessage.frequency)
}

// required float rms = 4;
bool TriggerMessage::has_rms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TriggerMessage::set_has_rms() {
  _has_bits_[0] |= 0x00000008u;
}
void TriggerMessage::clear_has_rms() {
  _has_bits_[0] &= ~0x00000008u;
}
void TriggerMessage::clear_rms() {
  rms_ = 0;
  clear_has_rms();
}
 float TriggerMessage::rms() const {
  // @@protoc_insertion_point(field_get:opq.proto.TriggerMessage.rms)
  return rms_;
}
 void TriggerMessage::set_rms(float value) {
  set_has_rms();
  rms_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.TriggerMessage.rms)
}

// optional float thd = 5;
bool TriggerMessage::has_thd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TriggerMessage::set_has_thd() {
  _has_bits_[0] |= 0x00000010u;
}
void TriggerMessage::clear_has_thd() {
  _has_bits_[0] &= ~0x00000010u;
}
void TriggerMessage::clear_thd() {
  thd_ = 0;
  clear_has_thd();
}
 float TriggerMessage::thd() const {
  // @@protoc_insertion_point(field_get:opq.proto.TriggerMessage.thd)
  return thd_;
}
 void TriggerMessage::set_thd(float value) {
  set_has_thd();
  thd_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.TriggerMessage.thd)
}

// optional int32 last_gps = 6;
bool TriggerMessage::has_last_gps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TriggerMessage::set_has_last_gps() {
  _has_bits_[0] |= 0x00000020u;
}
void TriggerMessage::clear_has_last_gps() {
  _has_bits_[0] &= ~0x00000020u;
}
void TriggerMessage::clear_last_gps() {
  last_gps_ = 0;
  clear_has_last_gps();
}
 ::google::protobuf::int32 TriggerMessage::last_gps() const {
  // @@protoc_insertion_point(field_get:opq.proto.TriggerMessage.last_gps)
  return last_gps_;
}
 void TriggerMessage::set_last_gps(::google::protobuf::int32 value) {
  set_has_last_gps();
  last_gps_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.TriggerMessage.last_gps)
}

// optional int32 current_count = 7;
bool TriggerMessage::has_current_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TriggerMessage::set_has_current_count() {
  _has_bits_[0] |= 0x00000040u;
}
void TriggerMessage::clear_has_current_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void TriggerMessage::clear_current_count() {
  current_count_ = 0;
  clear_has_current_count();
}
 ::google::protobuf::int32 TriggerMessage::current_count() const {
  // @@protoc_insertion_point(field_get:opq.proto.TriggerMessage.current_count)
  return current_count_;
}
 void TriggerMessage::set_current_count(::google::protobuf::int32 value) {
  set_has_current_count();
  current_count_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.TriggerMessage.current_count)
}

// optional int32 flags = 8;
bool TriggerMessage::has_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TriggerMessage::set_has_flags() {
  _has_bits_[0] |= 0x00000080u;
}
void TriggerMessage::clear_has_flags() {
  _has_bits_[0] &= ~0x00000080u;
}
void TriggerMessage::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
 ::google::protobuf::int32 TriggerMessage::flags() const {
  // @@protoc_insertion_point(field_get:opq.proto.TriggerMessage.flags)
  return flags_;
}
 void TriggerMessage::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.TriggerMessage.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestDataMessage_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestDataMessage_RequestType_descriptor_;
}
bool RequestDataMessage_RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RequestDataMessage_RequestType RequestDataMessage::PING;
const RequestDataMessage_RequestType RequestDataMessage::PONG;
const RequestDataMessage_RequestType RequestDataMessage::READ;
const RequestDataMessage_RequestType RequestDataMessage::RESP;
const RequestDataMessage_RequestType RequestDataMessage::ERROR;
const RequestDataMessage_RequestType RequestDataMessage::RequestType_MIN;
const RequestDataMessage_RequestType RequestDataMessage::RequestType_MAX;
const int RequestDataMessage::RequestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestDataMessage::kTypeFieldNumber;
const int RequestDataMessage::kSequenceNumberFieldNumber;
const int RequestDataMessage::kBoxIdFieldNumber;
const int RequestDataMessage::kTimeFieldNumber;
const int RequestDataMessage::kBackFieldNumber;
const int RequestDataMessage::kForwardFieldNumber;
const int RequestDataMessage::kNumCyclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestDataMessage::RequestDataMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto.RequestDataMessage)
}

void RequestDataMessage::InitAsDefaultInstance() {
}

RequestDataMessage::RequestDataMessage(const RequestDataMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto.RequestDataMessage)
}

void RequestDataMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  sequence_number_ = 0u;
  boxid_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  back_ = GOOGLE_ULONGLONG(0);
  forward_ = GOOGLE_ULONGLONG(0);
  num_cycles_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestDataMessage::~RequestDataMessage() {
  // @@protoc_insertion_point(destructor:opq.proto.RequestDataMessage)
  SharedDtor();
}

void RequestDataMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestDataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestDataMessage_descriptor_;
}

const RequestDataMessage& RequestDataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opq_2eproto();
  return *default_instance_;
}

RequestDataMessage* RequestDataMessage::default_instance_ = NULL;

RequestDataMessage* RequestDataMessage::New(::google::protobuf::Arena* arena) const {
  RequestDataMessage* n = new RequestDataMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto.RequestDataMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestDataMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestDataMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(sequence_number_, forward_);
    type_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto.RequestDataMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .opq.proto.RequestDataMessage.RequestType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opq::proto::RequestDataMessage_RequestType_IsValid(value)) {
            set_type(static_cast< ::opq::proto::RequestDataMessage_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence_number;
        break;
      }

      // required uint32 sequence_number = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_boxId;
        break;
      }

      // optional uint32 boxId = 3;
      case 3: {
        if (tag == 24) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_back;
        break;
      }

      // optional uint64 back = 5;
      case 5: {
        if (tag == 40) {
         parse_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &back_)));
          set_has_back();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_forward;
        break;
      }

      // optional uint64 forward = 6;
      case 6: {
        if (tag == 48) {
         parse_forward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &forward_)));
          set_has_forward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_cycles;
        break;
      }

      // optional uint32 num_cycles = 7;
      case 7: {
        if (tag == 56) {
         parse_num_cycles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_cycles_)));
          set_has_num_cycles();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto.RequestDataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto.RequestDataMessage)
  return false;
#undef DO_
}

void RequestDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto.RequestDataMessage)
  // required .opq.proto.RequestDataMessage.RequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 sequence_number = 2;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence_number(), output);
  }

  // optional uint32 boxId = 3;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->boxid(), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  // optional uint64 back = 5;
  if (has_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->back(), output);
  }

  // optional uint64 forward = 6;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->forward(), output);
  }

  // optional uint32 num_cycles = 7;
  if (has_num_cycles()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_cycles(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opq.proto.RequestDataMessage)
}

::google::protobuf::uint8* RequestDataMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto.RequestDataMessage)
  // required .opq.proto.RequestDataMessage.RequestType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 sequence_number = 2;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence_number(), target);
  }

  // optional uint32 boxId = 3;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->boxid(), target);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  // optional uint64 back = 5;
  if (has_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->back(), target);
  }

  // optional uint64 forward = 6;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->forward(), target);
  }

  // optional uint32 num_cycles = 7;
  if (has_num_cycles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_cycles(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opq.proto.RequestDataMessage)
  return target;
}

int RequestDataMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:opq.proto.RequestDataMessage)
  int total_size = 0;

  if (has_type()) {
    // required .opq.proto.RequestDataMessage.RequestType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_sequence_number()) {
    // required uint32 sequence_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequence_number());
  }

  return total_size;
}
int RequestDataMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto.RequestDataMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .opq.proto.RequestDataMessage.RequestType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 sequence_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequence_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 124u) {
    // optional uint32 boxId = 3;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 back = 5;
    if (has_back()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->back());
    }

    // optional uint64 forward = 6;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->forward());
    }

    // optional uint32 num_cycles = 7;
    if (has_num_cycles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_cycles());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDataMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto.RequestDataMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestDataMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestDataMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto.RequestDataMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto.RequestDataMessage)
    MergeFrom(*source);
  }
}

void RequestDataMessage::MergeFrom(const RequestDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto.RequestDataMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_back()) {
      set_back(from.back());
    }
    if (from.has_forward()) {
      set_forward(from.forward());
    }
    if (from.has_num_cycles()) {
      set_num_cycles(from.num_cycles());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestDataMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto.RequestDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDataMessage::CopyFrom(const RequestDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto.RequestDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDataMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestDataMessage::Swap(RequestDataMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestDataMessage::InternalSwap(RequestDataMessage* other) {
  std::swap(type_, other->type_);
  std::swap(sequence_number_, other->sequence_number_);
  std::swap(boxid_, other->boxid_);
  std::swap(time_, other->time_);
  std::swap(back_, other->back_);
  std::swap(forward_, other->forward_);
  std::swap(num_cycles_, other->num_cycles_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestDataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestDataMessage_descriptor_;
  metadata.reflection = RequestDataMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestDataMessage

// required .opq.proto.RequestDataMessage.RequestType type = 1;
bool RequestDataMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestDataMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestDataMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestDataMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::opq::proto::RequestDataMessage_RequestType RequestDataMessage::type() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestDataMessage.type)
  return static_cast< ::opq::proto::RequestDataMessage_RequestType >(type_);
}
 void RequestDataMessage::set_type(::opq::proto::RequestDataMessage_RequestType value) {
  assert(::opq::proto::RequestDataMessage_RequestType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.RequestDataMessage.type)
}

// required uint32 sequence_number = 2;
bool RequestDataMessage::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestDataMessage::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestDataMessage::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestDataMessage::clear_sequence_number() {
  sequence_number_ = 0u;
  clear_has_sequence_number();
}
 ::google::protobuf::uint32 RequestDataMessage::sequence_number() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestDataMessage.sequence_number)
  return sequence_number_;
}
 void RequestDataMessage::set_sequence_number(::google::protobuf::uint32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.RequestDataMessage.sequence_number)
}

// optional uint32 boxId = 3;
bool RequestDataMessage::has_boxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestDataMessage::set_has_boxid() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestDataMessage::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestDataMessage::clear_boxid() {
  boxid_ = 0u;
  clear_has_boxid();
}
 ::google::protobuf::uint32 RequestDataMessage::boxid() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestDataMessage.boxId)
  return boxid_;
}
 void RequestDataMessage::set_boxid(::google::protobuf::uint32 value) {
  set_has_boxid();
  boxid_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.RequestDataMessage.boxId)
}

// optional uint64 time = 4;
bool RequestDataMessage::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RequestDataMessage::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
void RequestDataMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void RequestDataMessage::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
 ::google::protobuf::uint64 RequestDataMessage::time() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestDataMessage.time)
  return time_;
}
 void RequestDataMessage::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.RequestDataMessage.time)
}

// optional uint64 back = 5;
bool RequestDataMessage::has_back() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RequestDataMessage::set_has_back() {
  _has_bits_[0] |= 0x00000010u;
}
void RequestDataMessage::clear_has_back() {
  _has_bits_[0] &= ~0x00000010u;
}
void RequestDataMessage::clear_back() {
  back_ = GOOGLE_ULONGLONG(0);
  clear_has_back();
}
 ::google::protobuf::uint64 RequestDataMessage::back() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestDataMessage.back)
  return back_;
}
 void RequestDataMessage::set_back(::google::protobuf::uint64 value) {
  set_has_back();
  back_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.RequestDataMessage.back)
}

// optional uint64 forward = 6;
bool RequestDataMessage::has_forward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RequestDataMessage::set_has_forward() {
  _has_bits_[0] |= 0x00000020u;
}
void RequestDataMessage::clear_has_forward() {
  _has_bits_[0] &= ~0x00000020u;
}
void RequestDataMessage::clear_forward() {
  forward_ = GOOGLE_ULONGLONG(0);
  clear_has_forward();
}
 ::google::protobuf::uint64 RequestDataMessage::forward() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestDataMessage.forward)
  return forward_;
}
 void RequestDataMessage::set_forward(::google::protobuf::uint64 value) {
  set_has_forward();
  forward_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.RequestDataMessage.forward)
}

// optional uint32 num_cycles = 7;
bool RequestDataMessage::has_num_cycles() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RequestDataMessage::set_has_num_cycles() {
  _has_bits_[0] |= 0x00000040u;
}
void RequestDataMessage::clear_has_num_cycles() {
  _has_bits_[0] &= ~0x00000040u;
}
void RequestDataMessage::clear_num_cycles() {
  num_cycles_ = 0u;
  clear_has_num_cycles();
}
 ::google::protobuf::uint32 RequestDataMessage::num_cycles() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestDataMessage.num_cycles)
  return num_cycles_;
}
 void RequestDataMessage::set_num_cycles(::google::protobuf::uint32 value) {
  set_has_num_cycles();
  num_cycles_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.RequestDataMessage.num_cycles)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestEventMessage_TriggerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestEventMessage_TriggerType_descriptor_;
}
bool RequestEventMessage_TriggerType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RequestEventMessage_TriggerType RequestEventMessage::FREQUENCY_SAG;
const RequestEventMessage_TriggerType RequestEventMessage::FREQUENCY_SWELL;
const RequestEventMessage_TriggerType RequestEventMessage::VOLTAGE_SAG;
const RequestEventMessage_TriggerType RequestEventMessage::VOLTAGE_SWELL;
const RequestEventMessage_TriggerType RequestEventMessage::OTHER;
const RequestEventMessage_TriggerType RequestEventMessage::TriggerType_MIN;
const RequestEventMessage_TriggerType RequestEventMessage::TriggerType_MAX;
const int RequestEventMessage::TriggerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestEventMessage::kStartTimestampMsUtcFieldNumber;
const int RequestEventMessage::kEndTimestampMsUtcFieldNumber;
const int RequestEventMessage::kTriggerTypeFieldNumber;
const int RequestEventMessage::kPercentMagnitudeFieldNumber;
const int RequestEventMessage::kBoxIdsFieldNumber;
const int RequestEventMessage::kRequesteeFieldNumber;
const int RequestEventMessage::kDescriptionFieldNumber;
const int RequestEventMessage::kRequestDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestEventMessage::RequestEventMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto.RequestEventMessage)
}

void RequestEventMessage::InitAsDefaultInstance() {
}

RequestEventMessage::RequestEventMessage(const RequestEventMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto.RequestEventMessage)
}

void RequestEventMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_timestamp_ms_utc_ = GOOGLE_ULONGLONG(0);
  end_timestamp_ms_utc_ = GOOGLE_ULONGLONG(0);
  trigger_type_ = 1;
  percent_magnitude_ = 0;
  requestee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_data_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestEventMessage::~RequestEventMessage() {
  // @@protoc_insertion_point(destructor:opq.proto.RequestEventMessage)
  SharedDtor();
}

void RequestEventMessage::SharedDtor() {
  requestee_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestEventMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestEventMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestEventMessage_descriptor_;
}

const RequestEventMessage& RequestEventMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opq_2eproto();
  return *default_instance_;
}

RequestEventMessage* RequestEventMessage::default_instance_ = NULL;

RequestEventMessage* RequestEventMessage::New(::google::protobuf::Arena* arena) const {
  RequestEventMessage* n = new RequestEventMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestEventMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto.RequestEventMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestEventMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestEventMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 239u) {
    ZR_(start_timestamp_ms_utc_, percent_magnitude_);
    trigger_type_ = 1;
    if (has_requestee()) {
      requestee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    request_data_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  box_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestEventMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto.RequestEventMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 start_timestamp_ms_utc = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_timestamp_ms_utc_)));
          set_has_start_timestamp_ms_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_timestamp_ms_utc;
        break;
      }

      // required uint64 end_timestamp_ms_utc = 2;
      case 2: {
        if (tag == 16) {
         parse_end_timestamp_ms_utc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_timestamp_ms_utc_)));
          set_has_end_timestamp_ms_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trigger_type;
        break;
      }

      // required .opq.proto.RequestEventMessage.TriggerType trigger_type = 3;
      case 3: {
        if (tag == 24) {
         parse_trigger_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::opq::proto::RequestEventMessage_TriggerType_IsValid(value)) {
            set_trigger_type(static_cast< ::opq::proto::RequestEventMessage_TriggerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_percent_magnitude;
        break;
      }

      // required double percent_magnitude = 4;
      case 4: {
        if (tag == 33) {
         parse_percent_magnitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percent_magnitude_)));
          set_has_percent_magnitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_box_ids;
        break;
      }

      // repeated int32 box_ids = 5;
      case 5: {
        if (tag == 40) {
         parse_box_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_box_ids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_box_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_box_ids;
        if (input->ExpectTag(50)) goto parse_requestee;
        break;
      }

      // required string requestee = 6;
      case 6: {
        if (tag == 50) {
         parse_requestee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestee()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requestee().data(), this->requestee().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "opq.proto.RequestEventMessage.requestee");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_description;
        break;
      }

      // required string description = 7;
      case 7: {
        if (tag == 58) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "opq.proto.RequestEventMessage.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_request_data;
        break;
      }

      // required bool request_data = 8;
      case 8: {
        if (tag == 64) {
         parse_request_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_data_)));
          set_has_request_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto.RequestEventMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto.RequestEventMessage)
  return false;
#undef DO_
}

void RequestEventMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto.RequestEventMessage)
  // required uint64 start_timestamp_ms_utc = 1;
  if (has_start_timestamp_ms_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_timestamp_ms_utc(), output);
  }

  // required uint64 end_timestamp_ms_utc = 2;
  if (has_end_timestamp_ms_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_timestamp_ms_utc(), output);
  }

  // required .opq.proto.RequestEventMessage.TriggerType trigger_type = 3;
  if (has_trigger_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->trigger_type(), output);
  }

  // required double percent_magnitude = 4;
  if (has_percent_magnitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->percent_magnitude(), output);
  }

  // repeated int32 box_ids = 5;
  for (int i = 0; i < this->box_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->box_ids(i), output);
  }

  // required string requestee = 6;
  if (has_requestee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestee().data(), this->requestee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "opq.proto.RequestEventMessage.requestee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->requestee(), output);
  }

  // required string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "opq.proto.RequestEventMessage.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  // required bool request_data = 8;
  if (has_request_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->request_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:opq.proto.RequestEventMessage)
}

::google::protobuf::uint8* RequestEventMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto.RequestEventMessage)
  // required uint64 start_timestamp_ms_utc = 1;
  if (has_start_timestamp_ms_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_timestamp_ms_utc(), target);
  }

  // required uint64 end_timestamp_ms_utc = 2;
  if (has_end_timestamp_ms_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_timestamp_ms_utc(), target);
  }

  // required .opq.proto.RequestEventMessage.TriggerType trigger_type = 3;
  if (has_trigger_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->trigger_type(), target);
  }

  // required double percent_magnitude = 4;
  if (has_percent_magnitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->percent_magnitude(), target);
  }

  // repeated int32 box_ids = 5;
  for (int i = 0; i < this->box_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->box_ids(i), target);
  }

  // required string requestee = 6;
  if (has_requestee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestee().data(), this->requestee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "opq.proto.RequestEventMessage.requestee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->requestee(), target);
  }

  // required string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "opq.proto.RequestEventMessage.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  // required bool request_data = 8;
  if (has_request_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->request_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opq.proto.RequestEventMessage)
  return target;
}

int RequestEventMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:opq.proto.RequestEventMessage)
  int total_size = 0;

  if (has_start_timestamp_ms_utc()) {
    // required uint64 start_timestamp_ms_utc = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_timestamp_ms_utc());
  }

  if (has_end_timestamp_ms_utc()) {
    // required uint64 end_timestamp_ms_utc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_timestamp_ms_utc());
  }

  if (has_trigger_type()) {
    // required .opq.proto.RequestEventMessage.TriggerType trigger_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_type());
  }

  if (has_percent_magnitude()) {
    // required double percent_magnitude = 4;
    total_size += 1 + 8;
  }

  if (has_requestee()) {
    // required string requestee = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requestee());
  }

  if (has_description()) {
    // required string description = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  if (has_request_data()) {
    // required bool request_data = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
int RequestEventMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto.RequestEventMessage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000ef) ^ 0x000000ef) == 0) {  // All required fields are present.
    // required uint64 start_timestamp_ms_utc = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_timestamp_ms_utc());

    // required uint64 end_timestamp_ms_utc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_timestamp_ms_utc());

    // required .opq.proto.RequestEventMessage.TriggerType trigger_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_type());

    // required double percent_magnitude = 4;
    total_size += 1 + 8;

    // required string requestee = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requestee());

    // required string description = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());

    // required bool request_data = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 box_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->box_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->box_ids(i));
    }
    total_size += 1 * this->box_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEventMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto.RequestEventMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestEventMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestEventMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto.RequestEventMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto.RequestEventMessage)
    MergeFrom(*source);
  }
}

void RequestEventMessage::MergeFrom(const RequestEventMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto.RequestEventMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  box_ids_.MergeFrom(from.box_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_timestamp_ms_utc()) {
      set_start_timestamp_ms_utc(from.start_timestamp_ms_utc());
    }
    if (from.has_end_timestamp_ms_utc()) {
      set_end_timestamp_ms_utc(from.end_timestamp_ms_utc());
    }
    if (from.has_trigger_type()) {
      set_trigger_type(from.trigger_type());
    }
    if (from.has_percent_magnitude()) {
      set_percent_magnitude(from.percent_magnitude());
    }
    if (from.has_requestee()) {
      set_has_requestee();
      requestee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestee_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_request_data()) {
      set_request_data(from.request_data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestEventMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto.RequestEventMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestEventMessage::CopyFrom(const RequestEventMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto.RequestEventMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEventMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ef) != 0x000000ef) return false;

  return true;
}

void RequestEventMessage::Swap(RequestEventMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestEventMessage::InternalSwap(RequestEventMessage* other) {
  std::swap(start_timestamp_ms_utc_, other->start_timestamp_ms_utc_);
  std::swap(end_timestamp_ms_utc_, other->end_timestamp_ms_utc_);
  std::swap(trigger_type_, other->trigger_type_);
  std::swap(percent_magnitude_, other->percent_magnitude_);
  box_ids_.UnsafeArenaSwap(&other->box_ids_);
  requestee_.Swap(&other->requestee_);
  description_.Swap(&other->description_);
  std::swap(request_data_, other->request_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestEventMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestEventMessage_descriptor_;
  metadata.reflection = RequestEventMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestEventMessage

// required uint64 start_timestamp_ms_utc = 1;
bool RequestEventMessage::has_start_timestamp_ms_utc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestEventMessage::set_has_start_timestamp_ms_utc() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestEventMessage::clear_has_start_timestamp_ms_utc() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestEventMessage::clear_start_timestamp_ms_utc() {
  start_timestamp_ms_utc_ = GOOGLE_ULONGLONG(0);
  clear_has_start_timestamp_ms_utc();
}
 ::google::protobuf::uint64 RequestEventMessage::start_timestamp_ms_utc() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestEventMessage.start_timestamp_ms_utc)
  return start_timestamp_ms_utc_;
}
 void RequestEventMessage::set_start_timestamp_ms_utc(::google::protobuf::uint64 value) {
  set_has_start_timestamp_ms_utc();
  start_timestamp_ms_utc_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.RequestEventMessage.start_timestamp_ms_utc)
}

// required uint64 end_timestamp_ms_utc = 2;
bool RequestEventMessage::has_end_timestamp_ms_utc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestEventMessage::set_has_end_timestamp_ms_utc() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestEventMessage::clear_has_end_timestamp_ms_utc() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestEventMessage::clear_end_timestamp_ms_utc() {
  end_timestamp_ms_utc_ = GOOGLE_ULONGLONG(0);
  clear_has_end_timestamp_ms_utc();
}
 ::google::protobuf::uint64 RequestEventMessage::end_timestamp_ms_utc() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestEventMessage.end_timestamp_ms_utc)
  return end_timestamp_ms_utc_;
}
 void RequestEventMessage::set_end_timestamp_ms_utc(::google::protobuf::uint64 value) {
  set_has_end_timestamp_ms_utc();
  end_timestamp_ms_utc_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.RequestEventMessage.end_timestamp_ms_utc)
}

// required .opq.proto.RequestEventMessage.TriggerType trigger_type = 3;
bool RequestEventMessage::has_trigger_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestEventMessage::set_has_trigger_type() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestEventMessage::clear_has_trigger_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestEventMessage::clear_trigger_type() {
  trigger_type_ = 1;
  clear_has_trigger_type();
}
 ::opq::proto::RequestEventMessage_TriggerType RequestEventMessage::trigger_type() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestEventMessage.trigger_type)
  return static_cast< ::opq::proto::RequestEventMessage_TriggerType >(trigger_type_);
}
 void RequestEventMessage::set_trigger_type(::opq::proto::RequestEventMessage_TriggerType value) {
  assert(::opq::proto::RequestEventMessage_TriggerType_IsValid(value));
  set_has_trigger_type();
  trigger_type_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.RequestEventMessage.trigger_type)
}

// required double percent_magnitude = 4;
bool RequestEventMessage::has_percent_magnitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RequestEventMessage::set_has_percent_magnitude() {
  _has_bits_[0] |= 0x00000008u;
}
void RequestEventMessage::clear_has_percent_magnitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void RequestEventMessage::clear_percent_magnitude() {
  percent_magnitude_ = 0;
  clear_has_percent_magnitude();
}
 double RequestEventMessage::percent_magnitude() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestEventMessage.percent_magnitude)
  return percent_magnitude_;
}
 void RequestEventMessage::set_percent_magnitude(double value) {
  set_has_percent_magnitude();
  percent_magnitude_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.RequestEventMessage.percent_magnitude)
}

// repeated int32 box_ids = 5;
int RequestEventMessage::box_ids_size() const {
  return box_ids_.size();
}
void RequestEventMessage::clear_box_ids() {
  box_ids_.Clear();
}
 ::google::protobuf::int32 RequestEventMessage::box_ids(int index) const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestEventMessage.box_ids)
  return box_ids_.Get(index);
}
 void RequestEventMessage::set_box_ids(int index, ::google::protobuf::int32 value) {
  box_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:opq.proto.RequestEventMessage.box_ids)
}
 void RequestEventMessage::add_box_ids(::google::protobuf::int32 value) {
  box_ids_.Add(value);
  // @@protoc_insertion_point(field_add:opq.proto.RequestEventMessage.box_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RequestEventMessage::box_ids() const {
  // @@protoc_insertion_point(field_list:opq.proto.RequestEventMessage.box_ids)
  return box_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RequestEventMessage::mutable_box_ids() {
  // @@protoc_insertion_point(field_mutable_list:opq.proto.RequestEventMessage.box_ids)
  return &box_ids_;
}

// required string requestee = 6;
bool RequestEventMessage::has_requestee() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RequestEventMessage::set_has_requestee() {
  _has_bits_[0] |= 0x00000020u;
}
void RequestEventMessage::clear_has_requestee() {
  _has_bits_[0] &= ~0x00000020u;
}
void RequestEventMessage::clear_requestee() {
  requestee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requestee();
}
 const ::std::string& RequestEventMessage::requestee() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestEventMessage.requestee)
  return requestee_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestEventMessage::set_requestee(const ::std::string& value) {
  set_has_requestee();
  requestee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.proto.RequestEventMessage.requestee)
}
 void RequestEventMessage::set_requestee(const char* value) {
  set_has_requestee();
  requestee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.proto.RequestEventMessage.requestee)
}
 void RequestEventMessage::set_requestee(const char* value, size_t size) {
  set_has_requestee();
  requestee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.proto.RequestEventMessage.requestee)
}
 ::std::string* RequestEventMessage::mutable_requestee() {
  set_has_requestee();
  // @@protoc_insertion_point(field_mutable:opq.proto.RequestEventMessage.requestee)
  return requestee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestEventMessage::release_requestee() {
  // @@protoc_insertion_point(field_release:opq.proto.RequestEventMessage.requestee)
  clear_has_requestee();
  return requestee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestEventMessage::set_allocated_requestee(::std::string* requestee) {
  if (requestee != NULL) {
    set_has_requestee();
  } else {
    clear_has_requestee();
  }
  requestee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestee);
  // @@protoc_insertion_point(field_set_allocated:opq.proto.RequestEventMessage.requestee)
}

// required string description = 7;
bool RequestEventMessage::has_description() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RequestEventMessage::set_has_description() {
  _has_bits_[0] |= 0x00000040u;
}
void RequestEventMessage::clear_has_description() {
  _has_bits_[0] &= ~0x00000040u;
}
void RequestEventMessage::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& RequestEventMessage::description() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestEventMessage.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestEventMessage::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.proto.RequestEventMessage.description)
}
 void RequestEventMessage::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.proto.RequestEventMessage.description)
}
 void RequestEventMessage::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.proto.RequestEventMessage.description)
}
 ::std::string* RequestEventMessage::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:opq.proto.RequestEventMessage.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestEventMessage::release_description() {
  // @@protoc_insertion_point(field_release:opq.proto.RequestEventMessage.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestEventMessage::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:opq.proto.RequestEventMessage.description)
}

// required bool request_data = 8;
bool RequestEventMessage::has_request_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RequestEventMessage::set_has_request_data() {
  _has_bits_[0] |= 0x00000080u;
}
void RequestEventMessage::clear_has_request_data() {
  _has_bits_[0] &= ~0x00000080u;
}
void RequestEventMessage::clear_request_data() {
  request_data_ = false;
  clear_has_request_data();
}
 bool RequestEventMessage::request_data() const {
  // @@protoc_insertion_point(field_get:opq.proto.RequestEventMessage.request_data)
  return request_data_;
}
 void RequestEventMessage::set_request_data(bool value) {
  set_has_request_data();
  request_data_ = value;
  // @@protoc_insertion_point(field_set:opq.proto.RequestEventMessage.request_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace opq

// @@protoc_insertion_point(global_scope)
