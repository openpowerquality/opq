// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opqbox3.proto

#ifndef PROTOBUF_opqbox3_2eproto__INCLUDED
#define PROTOBUF_opqbox3_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "rustproto.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_opqbox3_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMetricImpl();
void InitDefaultsMetric();
void InitDefaultsMeasurement_MetricsEntry_DoNotUseImpl();
void InitDefaultsMeasurement_MetricsEntry_DoNotUse();
void InitDefaultsMeasurementImpl();
void InitDefaultsMeasurement();
void InitDefaultsGetInfoCommandImpl();
void InitDefaultsGetInfoCommand();
void InitDefaultsGetDataCommandImpl();
void InitDefaultsGetDataCommand();
void InitDefaultsSetMeasturementRateCommandImpl();
void InitDefaultsSetMeasturementRateCommand();
void InitDefaultsSendCommandToPluginImpl();
void InitDefaultsSendCommandToPlugin();
void InitDefaultsCommandImpl();
void InitDefaultsCommand();
void InitDefaultsGetInfoResponseImpl();
void InitDefaultsGetInfoResponse();
void InitDefaultsSetMeasurementRateResponseImpl();
void InitDefaultsSetMeasurementRateResponse();
void InitDefaultsGetDataResponseHeaderImpl();
void InitDefaultsGetDataResponseHeader();
void InitDefaultsSendCommandToPluginResponseImpl();
void InitDefaultsSendCommandToPluginResponse();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
void InitDefaultsCycleImpl();
void InitDefaultsCycle();
inline void InitDefaults() {
  InitDefaultsMetric();
  InitDefaultsMeasurement_MetricsEntry_DoNotUse();
  InitDefaultsMeasurement();
  InitDefaultsGetInfoCommand();
  InitDefaultsGetDataCommand();
  InitDefaultsSetMeasturementRateCommand();
  InitDefaultsSendCommandToPlugin();
  InitDefaultsCommand();
  InitDefaultsGetInfoResponse();
  InitDefaultsSetMeasurementRateResponse();
  InitDefaultsGetDataResponseHeader();
  InitDefaultsSendCommandToPluginResponse();
  InitDefaultsResponse();
  InitDefaultsCycle();
}
}  // namespace protobuf_opqbox3_2eproto
namespace opq {
namespace opqbox3 {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Cycle;
class CycleDefaultTypeInternal;
extern CycleDefaultTypeInternal _Cycle_default_instance_;
class GetDataCommand;
class GetDataCommandDefaultTypeInternal;
extern GetDataCommandDefaultTypeInternal _GetDataCommand_default_instance_;
class GetDataResponseHeader;
class GetDataResponseHeaderDefaultTypeInternal;
extern GetDataResponseHeaderDefaultTypeInternal _GetDataResponseHeader_default_instance_;
class GetInfoCommand;
class GetInfoCommandDefaultTypeInternal;
extern GetInfoCommandDefaultTypeInternal _GetInfoCommand_default_instance_;
class GetInfoResponse;
class GetInfoResponseDefaultTypeInternal;
extern GetInfoResponseDefaultTypeInternal _GetInfoResponse_default_instance_;
class Measurement;
class MeasurementDefaultTypeInternal;
extern MeasurementDefaultTypeInternal _Measurement_default_instance_;
class Measurement_MetricsEntry_DoNotUse;
class Measurement_MetricsEntry_DoNotUseDefaultTypeInternal;
extern Measurement_MetricsEntry_DoNotUseDefaultTypeInternal _Measurement_MetricsEntry_DoNotUse_default_instance_;
class Metric;
class MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SendCommandToPlugin;
class SendCommandToPluginDefaultTypeInternal;
extern SendCommandToPluginDefaultTypeInternal _SendCommandToPlugin_default_instance_;
class SendCommandToPluginResponse;
class SendCommandToPluginResponseDefaultTypeInternal;
extern SendCommandToPluginResponseDefaultTypeInternal _SendCommandToPluginResponse_default_instance_;
class SetMeasturementRateCommand;
class SetMeasturementRateCommandDefaultTypeInternal;
extern SetMeasturementRateCommandDefaultTypeInternal _SetMeasturementRateCommand_default_instance_;
class SetMeasurementRateResponse;
class SetMeasurementRateResponseDefaultTypeInternal;
extern SetMeasurementRateResponseDefaultTypeInternal _SetMeasurementRateResponse_default_instance_;
}  // namespace opqbox3
}  // namespace opq
namespace opq {
namespace opqbox3 {

// ===================================================================

class Metric : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opq.opqbox3.Metric) */ {
 public:
  Metric();
  virtual ~Metric();

  Metric(const Metric& from);

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(Metric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Metric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Metric* other);
  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const PROTOBUF_FINAL { return New(NULL); }

  Metric* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Metric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float min = 1;
  void clear_min();
  static const int kMinFieldNumber = 1;
  float min() const;
  void set_min(float value);

  // float max = 2;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  float max() const;
  void set_max(float value);

  // float average = 3;
  void clear_average();
  static const int kAverageFieldNumber = 3;
  float average() const;
  void set_average(float value);

  // @@protoc_insertion_point(class_scope:opq.opqbox3.Metric)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float min_;
  float max_;
  float average_;
  mutable int _cached_size_;
  friend struct ::protobuf_opqbox3_2eproto::TableStruct;
  friend void ::protobuf_opqbox3_2eproto::InitDefaultsMetricImpl();
};
// -------------------------------------------------------------------

class Measurement_MetricsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Measurement_MetricsEntry_DoNotUse, 
    ::std::string, ::opq::opqbox3::Metric,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Measurement_MetricsEntry_DoNotUse, 
    ::std::string, ::opq::opqbox3::Metric,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Measurement_MetricsEntry_DoNotUse();
  Measurement_MetricsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Measurement_MetricsEntry_DoNotUse& other);
  static const Measurement_MetricsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Measurement_MetricsEntry_DoNotUse*>(&_Measurement_MetricsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Measurement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opq.opqbox3.Measurement) */ {
 public:
  Measurement();
  virtual ~Measurement();

  Measurement(const Measurement& from);

  inline Measurement& operator=(const Measurement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Measurement(Measurement&& from) noexcept
    : Measurement() {
    *this = ::std::move(from);
  }

  inline Measurement& operator=(Measurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Measurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Measurement* internal_default_instance() {
    return reinterpret_cast<const Measurement*>(
               &_Measurement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Measurement* other);
  friend void swap(Measurement& a, Measurement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Measurement* New() const PROTOBUF_FINAL { return New(NULL); }

  Measurement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Measurement& from);
  void MergeFrom(const Measurement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Measurement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .opq.opqbox3.Metric> metrics = 3;
  int metrics_size() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >&
      metrics() const;
  ::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >*
      mutable_metrics();

  // uint64 timestamp_ms = 2;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 2;
  ::google::protobuf::uint64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::uint64 value);

  // uint32 box_id = 1;
  void clear_box_id();
  static const int kBoxIdFieldNumber = 1;
  ::google::protobuf::uint32 box_id() const;
  void set_box_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opq.opqbox3.Measurement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Measurement_MetricsEntry_DoNotUse,
      ::std::string, ::opq::opqbox3::Metric,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > metrics_;
  ::google::protobuf::uint64 timestamp_ms_;
  ::google::protobuf::uint32 box_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_opqbox3_2eproto::TableStruct;
  friend void ::protobuf_opqbox3_2eproto::InitDefaultsMeasurementImpl();
};
// -------------------------------------------------------------------

class GetInfoCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opq.opqbox3.GetInfoCommand) */ {
 public:
  GetInfoCommand();
  virtual ~GetInfoCommand();

  GetInfoCommand(const GetInfoCommand& from);

  inline GetInfoCommand& operator=(const GetInfoCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetInfoCommand(GetInfoCommand&& from) noexcept
    : GetInfoCommand() {
    *this = ::std::move(from);
  }

  inline GetInfoCommand& operator=(GetInfoCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInfoCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoCommand* internal_default_instance() {
    return reinterpret_cast<const GetInfoCommand*>(
               &_GetInfoCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GetInfoCommand* other);
  friend void swap(GetInfoCommand& a, GetInfoCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetInfoCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  GetInfoCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetInfoCommand& from);
  void MergeFrom(const GetInfoCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetInfoCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opq.opqbox3.GetInfoCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_opqbox3_2eproto::TableStruct;
  friend void ::protobuf_opqbox3_2eproto::InitDefaultsGetInfoCommandImpl();
};
// -------------------------------------------------------------------

class GetDataCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opq.opqbox3.GetDataCommand) */ {
 public:
  GetDataCommand();
  virtual ~GetDataCommand();

  GetDataCommand(const GetDataCommand& from);

  inline GetDataCommand& operator=(const GetDataCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDataCommand(GetDataCommand&& from) noexcept
    : GetDataCommand() {
    *this = ::std::move(from);
  }

  inline GetDataCommand& operator=(GetDataCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDataCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataCommand* internal_default_instance() {
    return reinterpret_cast<const GetDataCommand*>(
               &_GetDataCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GetDataCommand* other);
  friend void swap(GetDataCommand& a, GetDataCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDataCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDataCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDataCommand& from);
  void MergeFrom(const GetDataCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDataCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 start_ms = 1;
  void clear_start_ms();
  static const int kStartMsFieldNumber = 1;
  ::google::protobuf::uint64 start_ms() const;
  void set_start_ms(::google::protobuf::uint64 value);

  // uint64 end_ms = 2;
  void clear_end_ms();
  static const int kEndMsFieldNumber = 2;
  ::google::protobuf::uint64 end_ms() const;
  void set_end_ms(::google::protobuf::uint64 value);

  // bool wait = 3;
  void clear_wait();
  static const int kWaitFieldNumber = 3;
  bool wait() const;
  void set_wait(bool value);

  // @@protoc_insertion_point(class_scope:opq.opqbox3.GetDataCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 start_ms_;
  ::google::protobuf::uint64 end_ms_;
  bool wait_;
  mutable int _cached_size_;
  friend struct ::protobuf_opqbox3_2eproto::TableStruct;
  friend void ::protobuf_opqbox3_2eproto::InitDefaultsGetDataCommandImpl();
};
// -------------------------------------------------------------------

class SetMeasturementRateCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opq.opqbox3.SetMeasturementRateCommand) */ {
 public:
  SetMeasturementRateCommand();
  virtual ~SetMeasturementRateCommand();

  SetMeasturementRateCommand(const SetMeasturementRateCommand& from);

  inline SetMeasturementRateCommand& operator=(const SetMeasturementRateCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetMeasturementRateCommand(SetMeasturementRateCommand&& from) noexcept
    : SetMeasturementRateCommand() {
    *this = ::std::move(from);
  }

  inline SetMeasturementRateCommand& operator=(SetMeasturementRateCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetMeasturementRateCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMeasturementRateCommand* internal_default_instance() {
    return reinterpret_cast<const SetMeasturementRateCommand*>(
               &_SetMeasturementRateCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SetMeasturementRateCommand* other);
  friend void swap(SetMeasturementRateCommand& a, SetMeasturementRateCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMeasturementRateCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  SetMeasturementRateCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetMeasturementRateCommand& from);
  void MergeFrom(const SetMeasturementRateCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetMeasturementRateCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 measurement_window_cycles = 1;
  void clear_measurement_window_cycles();
  static const int kMeasurementWindowCyclesFieldNumber = 1;
  ::google::protobuf::uint32 measurement_window_cycles() const;
  void set_measurement_window_cycles(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opq.opqbox3.SetMeasturementRateCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 measurement_window_cycles_;
  mutable int _cached_size_;
  friend struct ::protobuf_opqbox3_2eproto::TableStruct;
  friend void ::protobuf_opqbox3_2eproto::InitDefaultsSetMeasturementRateCommandImpl();
};
// -------------------------------------------------------------------

class SendCommandToPlugin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opq.opqbox3.SendCommandToPlugin) */ {
 public:
  SendCommandToPlugin();
  virtual ~SendCommandToPlugin();

  SendCommandToPlugin(const SendCommandToPlugin& from);

  inline SendCommandToPlugin& operator=(const SendCommandToPlugin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendCommandToPlugin(SendCommandToPlugin&& from) noexcept
    : SendCommandToPlugin() {
    *this = ::std::move(from);
  }

  inline SendCommandToPlugin& operator=(SendCommandToPlugin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendCommandToPlugin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendCommandToPlugin* internal_default_instance() {
    return reinterpret_cast<const SendCommandToPlugin*>(
               &_SendCommandToPlugin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SendCommandToPlugin* other);
  friend void swap(SendCommandToPlugin& a, SendCommandToPlugin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendCommandToPlugin* New() const PROTOBUF_FINAL { return New(NULL); }

  SendCommandToPlugin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendCommandToPlugin& from);
  void MergeFrom(const SendCommandToPlugin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendCommandToPlugin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plugin_name = 1;
  void clear_plugin_name();
  static const int kPluginNameFieldNumber = 1;
  const ::std::string& plugin_name() const;
  void set_plugin_name(const ::std::string& value);
  #if LANG_CXX11
  void set_plugin_name(::std::string&& value);
  #endif
  void set_plugin_name(const char* value);
  void set_plugin_name(const char* value, size_t size);
  ::std::string* mutable_plugin_name();
  ::std::string* release_plugin_name();
  void set_allocated_plugin_name(::std::string* plugin_name);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:opq.opqbox3.SendCommandToPlugin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plugin_name_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend struct ::protobuf_opqbox3_2eproto::TableStruct;
  friend void ::protobuf_opqbox3_2eproto::InitDefaultsSendCommandToPluginImpl();
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opq.opqbox3.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  enum CommandCase {
    kInfoCommand = 5,
    kDataCommand = 6,
    kSamplingRateCommand = 7,
    kSendCommandToPlugin = 8,
    COMMAND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const PROTOBUF_FINAL { return New(NULL); }

  Command* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string identity = 4;
  void clear_identity();
  static const int kIdentityFieldNumber = 4;
  const ::std::string& identity() const;
  void set_identity(const ::std::string& value);
  #if LANG_CXX11
  void set_identity(::std::string&& value);
  #endif
  void set_identity(const char* value);
  void set_identity(const char* value, size_t size);
  ::std::string* mutable_identity();
  ::std::string* release_identity();
  void set_allocated_identity(::std::string* identity);

  // uint32 seq = 1;
  void clear_seq();
  static const int kSeqFieldNumber = 1;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // int32 box_id = 2;
  void clear_box_id();
  static const int kBoxIdFieldNumber = 2;
  ::google::protobuf::int32 box_id() const;
  void set_box_id(::google::protobuf::int32 value);

  // uint64 timestamp_ms = 3;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 3;
  ::google::protobuf::uint64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::uint64 value);

  // .opq.opqbox3.GetInfoCommand info_command = 5;
  bool has_info_command() const;
  void clear_info_command();
  static const int kInfoCommandFieldNumber = 5;
  const ::opq::opqbox3::GetInfoCommand& info_command() const;
  ::opq::opqbox3::GetInfoCommand* release_info_command();
  ::opq::opqbox3::GetInfoCommand* mutable_info_command();
  void set_allocated_info_command(::opq::opqbox3::GetInfoCommand* info_command);

  // .opq.opqbox3.GetDataCommand data_command = 6;
  bool has_data_command() const;
  void clear_data_command();
  static const int kDataCommandFieldNumber = 6;
  const ::opq::opqbox3::GetDataCommand& data_command() const;
  ::opq::opqbox3::GetDataCommand* release_data_command();
  ::opq::opqbox3::GetDataCommand* mutable_data_command();
  void set_allocated_data_command(::opq::opqbox3::GetDataCommand* data_command);

  // .opq.opqbox3.SetMeasturementRateCommand sampling_rate_command = 7;
  bool has_sampling_rate_command() const;
  void clear_sampling_rate_command();
  static const int kSamplingRateCommandFieldNumber = 7;
  const ::opq::opqbox3::SetMeasturementRateCommand& sampling_rate_command() const;
  ::opq::opqbox3::SetMeasturementRateCommand* release_sampling_rate_command();
  ::opq::opqbox3::SetMeasturementRateCommand* mutable_sampling_rate_command();
  void set_allocated_sampling_rate_command(::opq::opqbox3::SetMeasturementRateCommand* sampling_rate_command);

  // .opq.opqbox3.SendCommandToPlugin send_command_to_plugin = 8;
  bool has_send_command_to_plugin() const;
  void clear_send_command_to_plugin();
  static const int kSendCommandToPluginFieldNumber = 8;
  const ::opq::opqbox3::SendCommandToPlugin& send_command_to_plugin() const;
  ::opq::opqbox3::SendCommandToPlugin* release_send_command_to_plugin();
  ::opq::opqbox3::SendCommandToPlugin* mutable_send_command_to_plugin();
  void set_allocated_send_command_to_plugin(::opq::opqbox3::SendCommandToPlugin* send_command_to_plugin);

  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:opq.opqbox3.Command)
 private:
  void set_has_info_command();
  void set_has_data_command();
  void set_has_sampling_rate_command();
  void set_has_send_command_to_plugin();

  inline bool has_command() const;
  void clear_command();
  inline void clear_has_command();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr identity_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::int32 box_id_;
  ::google::protobuf::uint64 timestamp_ms_;
  union CommandUnion {
    CommandUnion() {}
    ::opq::opqbox3::GetInfoCommand* info_command_;
    ::opq::opqbox3::GetDataCommand* data_command_;
    ::opq::opqbox3::SetMeasturementRateCommand* sampling_rate_command_;
    ::opq::opqbox3::SendCommandToPlugin* send_command_to_plugin_;
  } command_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_opqbox3_2eproto::TableStruct;
  friend void ::protobuf_opqbox3_2eproto::InitDefaultsCommandImpl();
};
// -------------------------------------------------------------------

class GetInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opq.opqbox3.GetInfoResponse) */ {
 public:
  GetInfoResponse();
  virtual ~GetInfoResponse();

  GetInfoResponse(const GetInfoResponse& from);

  inline GetInfoResponse& operator=(const GetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetInfoResponse(GetInfoResponse&& from) noexcept
    : GetInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetInfoResponse& operator=(GetInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetInfoResponse*>(
               &_GetInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GetInfoResponse* other);
  friend void swap(GetInfoResponse& a, GetInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetInfoResponse& from);
  void MergeFrom(const GetInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mac_addr = 1;
  void clear_mac_addr();
  static const int kMacAddrFieldNumber = 1;
  const ::std::string& mac_addr() const;
  void set_mac_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_mac_addr(::std::string&& value);
  #endif
  void set_mac_addr(const char* value);
  void set_mac_addr(const char* value, size_t size);
  ::std::string* mutable_mac_addr();
  ::std::string* release_mac_addr();
  void set_allocated_mac_addr(::std::string* mac_addr);

  // string wifi_network = 2;
  void clear_wifi_network();
  static const int kWifiNetworkFieldNumber = 2;
  const ::std::string& wifi_network() const;
  void set_wifi_network(const ::std::string& value);
  #if LANG_CXX11
  void set_wifi_network(::std::string&& value);
  #endif
  void set_wifi_network(const char* value);
  void set_wifi_network(const char* value, size_t size);
  ::std::string* mutable_wifi_network();
  ::std::string* release_wifi_network();
  void set_allocated_wifi_network(::std::string* wifi_network);

  // string ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string pub_key = 6;
  void clear_pub_key();
  static const int kPubKeyFieldNumber = 6;
  const ::std::string& pub_key() const;
  void set_pub_key(const ::std::string& value);
  #if LANG_CXX11
  void set_pub_key(::std::string&& value);
  #endif
  void set_pub_key(const char* value);
  void set_pub_key(const char* value, size_t size);
  ::std::string* mutable_pub_key();
  ::std::string* release_pub_key();
  void set_allocated_pub_key(::std::string* pub_key);

  // uint64 uptime = 4;
  void clear_uptime();
  static const int kUptimeFieldNumber = 4;
  ::google::protobuf::uint64 uptime() const;
  void set_uptime(::google::protobuf::uint64 value);

  // uint64 calibration_constant = 5;
  void clear_calibration_constant();
  static const int kCalibrationConstantFieldNumber = 5;
  ::google::protobuf::uint64 calibration_constant() const;
  void set_calibration_constant(::google::protobuf::uint64 value);

  // uint32 measurement_rate = 7;
  void clear_measurement_rate();
  static const int kMeasurementRateFieldNumber = 7;
  ::google::protobuf::uint32 measurement_rate() const;
  void set_measurement_rate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opq.opqbox3.GetInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mac_addr_;
  ::google::protobuf::internal::ArenaStringPtr wifi_network_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr pub_key_;
  ::google::protobuf::uint64 uptime_;
  ::google::protobuf::uint64 calibration_constant_;
  ::google::protobuf::uint32 measurement_rate_;
  mutable int _cached_size_;
  friend struct ::protobuf_opqbox3_2eproto::TableStruct;
  friend void ::protobuf_opqbox3_2eproto::InitDefaultsGetInfoResponseImpl();
};
// -------------------------------------------------------------------

class SetMeasurementRateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opq.opqbox3.SetMeasurementRateResponse) */ {
 public:
  SetMeasurementRateResponse();
  virtual ~SetMeasurementRateResponse();

  SetMeasurementRateResponse(const SetMeasurementRateResponse& from);

  inline SetMeasurementRateResponse& operator=(const SetMeasurementRateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetMeasurementRateResponse(SetMeasurementRateResponse&& from) noexcept
    : SetMeasurementRateResponse() {
    *this = ::std::move(from);
  }

  inline SetMeasurementRateResponse& operator=(SetMeasurementRateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetMeasurementRateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMeasurementRateResponse* internal_default_instance() {
    return reinterpret_cast<const SetMeasurementRateResponse*>(
               &_SetMeasurementRateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SetMeasurementRateResponse* other);
  friend void swap(SetMeasurementRateResponse& a, SetMeasurementRateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMeasurementRateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SetMeasurementRateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetMeasurementRateResponse& from);
  void MergeFrom(const SetMeasurementRateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetMeasurementRateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 old_rate_cycles = 1;
  void clear_old_rate_cycles();
  static const int kOldRateCyclesFieldNumber = 1;
  ::google::protobuf::uint32 old_rate_cycles() const;
  void set_old_rate_cycles(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:opq.opqbox3.SetMeasurementRateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 old_rate_cycles_;
  mutable int _cached_size_;
  friend struct ::protobuf_opqbox3_2eproto::TableStruct;
  friend void ::protobuf_opqbox3_2eproto::InitDefaultsSetMeasurementRateResponseImpl();
};
// -------------------------------------------------------------------

class GetDataResponseHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opq.opqbox3.GetDataResponseHeader) */ {
 public:
  GetDataResponseHeader();
  virtual ~GetDataResponseHeader();

  GetDataResponseHeader(const GetDataResponseHeader& from);

  inline GetDataResponseHeader& operator=(const GetDataResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDataResponseHeader(GetDataResponseHeader&& from) noexcept
    : GetDataResponseHeader() {
    *this = ::std::move(from);
  }

  inline GetDataResponseHeader& operator=(GetDataResponseHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDataResponseHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataResponseHeader* internal_default_instance() {
    return reinterpret_cast<const GetDataResponseHeader*>(
               &_GetDataResponseHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GetDataResponseHeader* other);
  friend void swap(GetDataResponseHeader& a, GetDataResponseHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDataResponseHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDataResponseHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDataResponseHeader& from);
  void MergeFrom(const GetDataResponseHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDataResponseHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 start_ts = 1;
  void clear_start_ts();
  static const int kStartTsFieldNumber = 1;
  ::google::protobuf::uint64 start_ts() const;
  void set_start_ts(::google::protobuf::uint64 value);

  // uint64 end_ts = 2;
  void clear_end_ts();
  static const int kEndTsFieldNumber = 2;
  ::google::protobuf::uint64 end_ts() const;
  void set_end_ts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:opq.opqbox3.GetDataResponseHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 start_ts_;
  ::google::protobuf::uint64 end_ts_;
  mutable int _cached_size_;
  friend struct ::protobuf_opqbox3_2eproto::TableStruct;
  friend void ::protobuf_opqbox3_2eproto::InitDefaultsGetDataResponseHeaderImpl();
};
// -------------------------------------------------------------------

class SendCommandToPluginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opq.opqbox3.SendCommandToPluginResponse) */ {
 public:
  SendCommandToPluginResponse();
  virtual ~SendCommandToPluginResponse();

  SendCommandToPluginResponse(const SendCommandToPluginResponse& from);

  inline SendCommandToPluginResponse& operator=(const SendCommandToPluginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendCommandToPluginResponse(SendCommandToPluginResponse&& from) noexcept
    : SendCommandToPluginResponse() {
    *this = ::std::move(from);
  }

  inline SendCommandToPluginResponse& operator=(SendCommandToPluginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendCommandToPluginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendCommandToPluginResponse* internal_default_instance() {
    return reinterpret_cast<const SendCommandToPluginResponse*>(
               &_SendCommandToPluginResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SendCommandToPluginResponse* other);
  friend void swap(SendCommandToPluginResponse& a, SendCommandToPluginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendCommandToPluginResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SendCommandToPluginResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendCommandToPluginResponse& from);
  void MergeFrom(const SendCommandToPluginResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendCommandToPluginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool ok = 1;
  void clear_ok();
  static const int kOkFieldNumber = 1;
  bool ok() const;
  void set_ok(bool value);

  // @@protoc_insertion_point(class_scope:opq.opqbox3.SendCommandToPluginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool ok_;
  mutable int _cached_size_;
  friend struct ::protobuf_opqbox3_2eproto::TableStruct;
  friend void ::protobuf_opqbox3_2eproto::InitDefaultsSendCommandToPluginResponseImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opq.opqbox3.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  enum ResponseCase {
    kInfoResponse = 4,
    kMessageRateReponse = 5,
    kGetDataResponse = 6,
    kCommandToPluginResponse = 7,
    RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 box_id = 1;
  void clear_box_id();
  static const int kBoxIdFieldNumber = 1;
  ::google::protobuf::int32 box_id() const;
  void set_box_id(::google::protobuf::int32 value);

  // uint32 seq = 2;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // uint64 timestamp_ms = 3;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 3;
  ::google::protobuf::uint64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::uint64 value);

  // .opq.opqbox3.GetInfoResponse info_response = 4;
  bool has_info_response() const;
  void clear_info_response();
  static const int kInfoResponseFieldNumber = 4;
  const ::opq::opqbox3::GetInfoResponse& info_response() const;
  ::opq::opqbox3::GetInfoResponse* release_info_response();
  ::opq::opqbox3::GetInfoResponse* mutable_info_response();
  void set_allocated_info_response(::opq::opqbox3::GetInfoResponse* info_response);

  // .opq.opqbox3.SetMeasurementRateResponse message_rate_reponse = 5;
  bool has_message_rate_reponse() const;
  void clear_message_rate_reponse();
  static const int kMessageRateReponseFieldNumber = 5;
  const ::opq::opqbox3::SetMeasurementRateResponse& message_rate_reponse() const;
  ::opq::opqbox3::SetMeasurementRateResponse* release_message_rate_reponse();
  ::opq::opqbox3::SetMeasurementRateResponse* mutable_message_rate_reponse();
  void set_allocated_message_rate_reponse(::opq::opqbox3::SetMeasurementRateResponse* message_rate_reponse);

  // .opq.opqbox3.GetDataResponseHeader get_data_response = 6;
  bool has_get_data_response() const;
  void clear_get_data_response();
  static const int kGetDataResponseFieldNumber = 6;
  const ::opq::opqbox3::GetDataResponseHeader& get_data_response() const;
  ::opq::opqbox3::GetDataResponseHeader* release_get_data_response();
  ::opq::opqbox3::GetDataResponseHeader* mutable_get_data_response();
  void set_allocated_get_data_response(::opq::opqbox3::GetDataResponseHeader* get_data_response);

  // .opq.opqbox3.SendCommandToPluginResponse command_to_plugin_response = 7;
  bool has_command_to_plugin_response() const;
  void clear_command_to_plugin_response();
  static const int kCommandToPluginResponseFieldNumber = 7;
  const ::opq::opqbox3::SendCommandToPluginResponse& command_to_plugin_response() const;
  ::opq::opqbox3::SendCommandToPluginResponse* release_command_to_plugin_response();
  ::opq::opqbox3::SendCommandToPluginResponse* mutable_command_to_plugin_response();
  void set_allocated_command_to_plugin_response(::opq::opqbox3::SendCommandToPluginResponse* command_to_plugin_response);

  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:opq.opqbox3.Response)
 private:
  void set_has_info_response();
  void set_has_message_rate_reponse();
  void set_has_get_data_response();
  void set_has_command_to_plugin_response();

  inline bool has_response() const;
  void clear_response();
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 box_id_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::uint64 timestamp_ms_;
  union ResponseUnion {
    ResponseUnion() {}
    ::opq::opqbox3::GetInfoResponse* info_response_;
    ::opq::opqbox3::SetMeasurementRateResponse* message_rate_reponse_;
    ::opq::opqbox3::GetDataResponseHeader* get_data_response_;
    ::opq::opqbox3::SendCommandToPluginResponse* command_to_plugin_response_;
  } response_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_opqbox3_2eproto::TableStruct;
  friend void ::protobuf_opqbox3_2eproto::InitDefaultsResponseImpl();
};
// -------------------------------------------------------------------

class Cycle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opq.opqbox3.Cycle) */ {
 public:
  Cycle();
  virtual ~Cycle();

  Cycle(const Cycle& from);

  inline Cycle& operator=(const Cycle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cycle(Cycle&& from) noexcept
    : Cycle() {
    *this = ::std::move(from);
  }

  inline Cycle& operator=(Cycle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cycle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cycle* internal_default_instance() {
    return reinterpret_cast<const Cycle*>(
               &_Cycle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Cycle* other);
  friend void swap(Cycle& a, Cycle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cycle* New() const PROTOBUF_FINAL { return New(NULL); }

  Cycle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cycle& from);
  void MergeFrom(const Cycle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cycle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 datapoints = 1;
  int datapoints_size() const;
  void clear_datapoints();
  static const int kDatapointsFieldNumber = 1;
  ::google::protobuf::int32 datapoints(int index) const;
  void set_datapoints(int index, ::google::protobuf::int32 value);
  void add_datapoints(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      datapoints() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_datapoints();

  // uint64 timestamp_ms = 2;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 2;
  ::google::protobuf::uint64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:opq.opqbox3.Cycle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > datapoints_;
  mutable int _datapoints_cached_byte_size_;
  ::google::protobuf::uint64 timestamp_ms_;
  mutable int _cached_size_;
  friend struct ::protobuf_opqbox3_2eproto::TableStruct;
  friend void ::protobuf_opqbox3_2eproto::InitDefaultsCycleImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Metric

// float min = 1;
inline void Metric::clear_min() {
  min_ = 0;
}
inline float Metric::min() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Metric.min)
  return min_;
}
inline void Metric::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Metric.min)
}

// float max = 2;
inline void Metric::clear_max() {
  max_ = 0;
}
inline float Metric::max() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Metric.max)
  return max_;
}
inline void Metric::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Metric.max)
}

// float average = 3;
inline void Metric::clear_average() {
  average_ = 0;
}
inline float Metric::average() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Metric.average)
  return average_;
}
inline void Metric::set_average(float value) {
  
  average_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Metric.average)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Measurement

// uint32 box_id = 1;
inline void Measurement::clear_box_id() {
  box_id_ = 0u;
}
inline ::google::protobuf::uint32 Measurement::box_id() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Measurement.box_id)
  return box_id_;
}
inline void Measurement::set_box_id(::google::protobuf::uint32 value) {
  
  box_id_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Measurement.box_id)
}

// uint64 timestamp_ms = 2;
inline void Measurement::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Measurement::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Measurement.timestamp_ms)
  return timestamp_ms_;
}
inline void Measurement::set_timestamp_ms(::google::protobuf::uint64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Measurement.timestamp_ms)
}

// map<string, .opq.opqbox3.Metric> metrics = 3;
inline int Measurement::metrics_size() const {
  return metrics_.size();
}
inline void Measurement::clear_metrics() {
  metrics_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >&
Measurement::metrics() const {
  // @@protoc_insertion_point(field_map:opq.opqbox3.Measurement.metrics)
  return metrics_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >*
Measurement::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_map:opq.opqbox3.Measurement.metrics)
  return metrics_.MutableMap();
}

// -------------------------------------------------------------------

// GetInfoCommand

// -------------------------------------------------------------------

// GetDataCommand

// uint64 start_ms = 1;
inline void GetDataCommand::clear_start_ms() {
  start_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetDataCommand::start_ms() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetDataCommand.start_ms)
  return start_ms_;
}
inline void GetDataCommand::set_start_ms(::google::protobuf::uint64 value) {
  
  start_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetDataCommand.start_ms)
}

// uint64 end_ms = 2;
inline void GetDataCommand::clear_end_ms() {
  end_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetDataCommand::end_ms() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetDataCommand.end_ms)
  return end_ms_;
}
inline void GetDataCommand::set_end_ms(::google::protobuf::uint64 value) {
  
  end_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetDataCommand.end_ms)
}

// bool wait = 3;
inline void GetDataCommand::clear_wait() {
  wait_ = false;
}
inline bool GetDataCommand::wait() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetDataCommand.wait)
  return wait_;
}
inline void GetDataCommand::set_wait(bool value) {
  
  wait_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetDataCommand.wait)
}

// -------------------------------------------------------------------

// SetMeasturementRateCommand

// uint32 measurement_window_cycles = 1;
inline void SetMeasturementRateCommand::clear_measurement_window_cycles() {
  measurement_window_cycles_ = 0u;
}
inline ::google::protobuf::uint32 SetMeasturementRateCommand::measurement_window_cycles() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.SetMeasturementRateCommand.measurement_window_cycles)
  return measurement_window_cycles_;
}
inline void SetMeasturementRateCommand::set_measurement_window_cycles(::google::protobuf::uint32 value) {
  
  measurement_window_cycles_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.SetMeasturementRateCommand.measurement_window_cycles)
}

// -------------------------------------------------------------------

// SendCommandToPlugin

// string plugin_name = 1;
inline void SendCommandToPlugin::clear_plugin_name() {
  plugin_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendCommandToPlugin::plugin_name() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.SendCommandToPlugin.plugin_name)
  return plugin_name_.GetNoArena();
}
inline void SendCommandToPlugin::set_plugin_name(const ::std::string& value) {
  
  plugin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.SendCommandToPlugin.plugin_name)
}
#if LANG_CXX11
inline void SendCommandToPlugin::set_plugin_name(::std::string&& value) {
  
  plugin_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.SendCommandToPlugin.plugin_name)
}
#endif
inline void SendCommandToPlugin::set_plugin_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plugin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.SendCommandToPlugin.plugin_name)
}
inline void SendCommandToPlugin::set_plugin_name(const char* value, size_t size) {
  
  plugin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.SendCommandToPlugin.plugin_name)
}
inline ::std::string* SendCommandToPlugin::mutable_plugin_name() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.SendCommandToPlugin.plugin_name)
  return plugin_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendCommandToPlugin::release_plugin_name() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.SendCommandToPlugin.plugin_name)
  
  return plugin_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCommandToPlugin::set_allocated_plugin_name(::std::string* plugin_name) {
  if (plugin_name != NULL) {
    
  } else {
    
  }
  plugin_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugin_name);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.SendCommandToPlugin.plugin_name)
}

// string message = 2;
inline void SendCommandToPlugin::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendCommandToPlugin::message() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.SendCommandToPlugin.message)
  return message_.GetNoArena();
}
inline void SendCommandToPlugin::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.SendCommandToPlugin.message)
}
#if LANG_CXX11
inline void SendCommandToPlugin::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.SendCommandToPlugin.message)
}
#endif
inline void SendCommandToPlugin::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.SendCommandToPlugin.message)
}
inline void SendCommandToPlugin::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.SendCommandToPlugin.message)
}
inline ::std::string* SendCommandToPlugin::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.SendCommandToPlugin.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendCommandToPlugin::release_message() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.SendCommandToPlugin.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCommandToPlugin::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.SendCommandToPlugin.message)
}

// -------------------------------------------------------------------

// Command

// uint32 seq = 1;
inline void Command::clear_seq() {
  seq_ = 0u;
}
inline ::google::protobuf::uint32 Command::seq() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.seq)
  return seq_;
}
inline void Command::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Command.seq)
}

// int32 box_id = 2;
inline void Command::clear_box_id() {
  box_id_ = 0;
}
inline ::google::protobuf::int32 Command::box_id() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.box_id)
  return box_id_;
}
inline void Command::set_box_id(::google::protobuf::int32 value) {
  
  box_id_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Command.box_id)
}

// uint64 timestamp_ms = 3;
inline void Command::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Command::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.timestamp_ms)
  return timestamp_ms_;
}
inline void Command::set_timestamp_ms(::google::protobuf::uint64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Command.timestamp_ms)
}

// string identity = 4;
inline void Command::clear_identity() {
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::identity() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.identity)
  return identity_.GetNoArena();
}
inline void Command::set_identity(const ::std::string& value) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.Command.identity)
}
#if LANG_CXX11
inline void Command::set_identity(::std::string&& value) {
  
  identity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.Command.identity)
}
#endif
inline void Command::set_identity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.Command.identity)
}
inline void Command::set_identity(const char* value, size_t size) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.Command.identity)
}
inline ::std::string* Command::mutable_identity() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Command.identity)
  return identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_identity() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Command.identity)
  
  return identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_identity(::std::string* identity) {
  if (identity != NULL) {
    
  } else {
    
  }
  identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.Command.identity)
}

// .opq.opqbox3.GetInfoCommand info_command = 5;
inline bool Command::has_info_command() const {
  return command_case() == kInfoCommand;
}
inline void Command::set_has_info_command() {
  _oneof_case_[0] = kInfoCommand;
}
inline void Command::clear_info_command() {
  if (has_info_command()) {
    delete command_.info_command_;
    clear_has_command();
  }
}
inline ::opq::opqbox3::GetInfoCommand* Command::release_info_command() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Command.info_command)
  if (has_info_command()) {
    clear_has_command();
      ::opq::opqbox3::GetInfoCommand* temp = command_.info_command_;
    command_.info_command_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opq::opqbox3::GetInfoCommand& Command::info_command() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.info_command)
  return has_info_command()
      ? *command_.info_command_
      : *reinterpret_cast< ::opq::opqbox3::GetInfoCommand*>(&::opq::opqbox3::_GetInfoCommand_default_instance_);
}
inline ::opq::opqbox3::GetInfoCommand* Command::mutable_info_command() {
  if (!has_info_command()) {
    clear_command();
    set_has_info_command();
    command_.info_command_ = new ::opq::opqbox3::GetInfoCommand;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Command.info_command)
  return command_.info_command_;
}

// .opq.opqbox3.GetDataCommand data_command = 6;
inline bool Command::has_data_command() const {
  return command_case() == kDataCommand;
}
inline void Command::set_has_data_command() {
  _oneof_case_[0] = kDataCommand;
}
inline void Command::clear_data_command() {
  if (has_data_command()) {
    delete command_.data_command_;
    clear_has_command();
  }
}
inline ::opq::opqbox3::GetDataCommand* Command::release_data_command() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Command.data_command)
  if (has_data_command()) {
    clear_has_command();
      ::opq::opqbox3::GetDataCommand* temp = command_.data_command_;
    command_.data_command_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opq::opqbox3::GetDataCommand& Command::data_command() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.data_command)
  return has_data_command()
      ? *command_.data_command_
      : *reinterpret_cast< ::opq::opqbox3::GetDataCommand*>(&::opq::opqbox3::_GetDataCommand_default_instance_);
}
inline ::opq::opqbox3::GetDataCommand* Command::mutable_data_command() {
  if (!has_data_command()) {
    clear_command();
    set_has_data_command();
    command_.data_command_ = new ::opq::opqbox3::GetDataCommand;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Command.data_command)
  return command_.data_command_;
}

// .opq.opqbox3.SetMeasturementRateCommand sampling_rate_command = 7;
inline bool Command::has_sampling_rate_command() const {
  return command_case() == kSamplingRateCommand;
}
inline void Command::set_has_sampling_rate_command() {
  _oneof_case_[0] = kSamplingRateCommand;
}
inline void Command::clear_sampling_rate_command() {
  if (has_sampling_rate_command()) {
    delete command_.sampling_rate_command_;
    clear_has_command();
  }
}
inline ::opq::opqbox3::SetMeasturementRateCommand* Command::release_sampling_rate_command() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Command.sampling_rate_command)
  if (has_sampling_rate_command()) {
    clear_has_command();
      ::opq::opqbox3::SetMeasturementRateCommand* temp = command_.sampling_rate_command_;
    command_.sampling_rate_command_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opq::opqbox3::SetMeasturementRateCommand& Command::sampling_rate_command() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.sampling_rate_command)
  return has_sampling_rate_command()
      ? *command_.sampling_rate_command_
      : *reinterpret_cast< ::opq::opqbox3::SetMeasturementRateCommand*>(&::opq::opqbox3::_SetMeasturementRateCommand_default_instance_);
}
inline ::opq::opqbox3::SetMeasturementRateCommand* Command::mutable_sampling_rate_command() {
  if (!has_sampling_rate_command()) {
    clear_command();
    set_has_sampling_rate_command();
    command_.sampling_rate_command_ = new ::opq::opqbox3::SetMeasturementRateCommand;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Command.sampling_rate_command)
  return command_.sampling_rate_command_;
}

// .opq.opqbox3.SendCommandToPlugin send_command_to_plugin = 8;
inline bool Command::has_send_command_to_plugin() const {
  return command_case() == kSendCommandToPlugin;
}
inline void Command::set_has_send_command_to_plugin() {
  _oneof_case_[0] = kSendCommandToPlugin;
}
inline void Command::clear_send_command_to_plugin() {
  if (has_send_command_to_plugin()) {
    delete command_.send_command_to_plugin_;
    clear_has_command();
  }
}
inline ::opq::opqbox3::SendCommandToPlugin* Command::release_send_command_to_plugin() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Command.send_command_to_plugin)
  if (has_send_command_to_plugin()) {
    clear_has_command();
      ::opq::opqbox3::SendCommandToPlugin* temp = command_.send_command_to_plugin_;
    command_.send_command_to_plugin_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opq::opqbox3::SendCommandToPlugin& Command::send_command_to_plugin() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.send_command_to_plugin)
  return has_send_command_to_plugin()
      ? *command_.send_command_to_plugin_
      : *reinterpret_cast< ::opq::opqbox3::SendCommandToPlugin*>(&::opq::opqbox3::_SendCommandToPlugin_default_instance_);
}
inline ::opq::opqbox3::SendCommandToPlugin* Command::mutable_send_command_to_plugin() {
  if (!has_send_command_to_plugin()) {
    clear_command();
    set_has_send_command_to_plugin();
    command_.send_command_to_plugin_ = new ::opq::opqbox3::SendCommandToPlugin;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Command.send_command_to_plugin)
  return command_.send_command_to_plugin_;
}

inline bool Command::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void Command::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline Command::CommandCase Command::command_case() const {
  return Command::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetInfoResponse

// string mac_addr = 1;
inline void GetInfoResponse::clear_mac_addr() {
  mac_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInfoResponse::mac_addr() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.mac_addr)
  return mac_addr_.GetNoArena();
}
inline void GetInfoResponse::set_mac_addr(const ::std::string& value) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.mac_addr)
}
#if LANG_CXX11
inline void GetInfoResponse::set_mac_addr(::std::string&& value) {
  
  mac_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.GetInfoResponse.mac_addr)
}
#endif
inline void GetInfoResponse::set_mac_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.GetInfoResponse.mac_addr)
}
inline void GetInfoResponse::set_mac_addr(const char* value, size_t size) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.GetInfoResponse.mac_addr)
}
inline ::std::string* GetInfoResponse::mutable_mac_addr() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.GetInfoResponse.mac_addr)
  return mac_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInfoResponse::release_mac_addr() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.GetInfoResponse.mac_addr)
  
  return mac_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_mac_addr(::std::string* mac_addr) {
  if (mac_addr != NULL) {
    
  } else {
    
  }
  mac_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_addr);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.GetInfoResponse.mac_addr)
}

// string wifi_network = 2;
inline void GetInfoResponse::clear_wifi_network() {
  wifi_network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInfoResponse::wifi_network() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.wifi_network)
  return wifi_network_.GetNoArena();
}
inline void GetInfoResponse::set_wifi_network(const ::std::string& value) {
  
  wifi_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.wifi_network)
}
#if LANG_CXX11
inline void GetInfoResponse::set_wifi_network(::std::string&& value) {
  
  wifi_network_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.GetInfoResponse.wifi_network)
}
#endif
inline void GetInfoResponse::set_wifi_network(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wifi_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.GetInfoResponse.wifi_network)
}
inline void GetInfoResponse::set_wifi_network(const char* value, size_t size) {
  
  wifi_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.GetInfoResponse.wifi_network)
}
inline ::std::string* GetInfoResponse::mutable_wifi_network() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.GetInfoResponse.wifi_network)
  return wifi_network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInfoResponse::release_wifi_network() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.GetInfoResponse.wifi_network)
  
  return wifi_network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_wifi_network(::std::string* wifi_network) {
  if (wifi_network != NULL) {
    
  } else {
    
  }
  wifi_network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifi_network);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.GetInfoResponse.wifi_network)
}

// string ip = 3;
inline void GetInfoResponse::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInfoResponse::ip() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.ip)
  return ip_.GetNoArena();
}
inline void GetInfoResponse::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.ip)
}
#if LANG_CXX11
inline void GetInfoResponse::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.GetInfoResponse.ip)
}
#endif
inline void GetInfoResponse::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.GetInfoResponse.ip)
}
inline void GetInfoResponse::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.GetInfoResponse.ip)
}
inline ::std::string* GetInfoResponse::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.GetInfoResponse.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInfoResponse::release_ip() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.GetInfoResponse.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.GetInfoResponse.ip)
}

// uint64 uptime = 4;
inline void GetInfoResponse::clear_uptime() {
  uptime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetInfoResponse::uptime() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.uptime)
  return uptime_;
}
inline void GetInfoResponse::set_uptime(::google::protobuf::uint64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.uptime)
}

// uint64 calibration_constant = 5;
inline void GetInfoResponse::clear_calibration_constant() {
  calibration_constant_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetInfoResponse::calibration_constant() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.calibration_constant)
  return calibration_constant_;
}
inline void GetInfoResponse::set_calibration_constant(::google::protobuf::uint64 value) {
  
  calibration_constant_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.calibration_constant)
}

// string pub_key = 6;
inline void GetInfoResponse::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInfoResponse::pub_key() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.pub_key)
  return pub_key_.GetNoArena();
}
inline void GetInfoResponse::set_pub_key(const ::std::string& value) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.pub_key)
}
#if LANG_CXX11
inline void GetInfoResponse::set_pub_key(::std::string&& value) {
  
  pub_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.GetInfoResponse.pub_key)
}
#endif
inline void GetInfoResponse::set_pub_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.GetInfoResponse.pub_key)
}
inline void GetInfoResponse::set_pub_key(const char* value, size_t size) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.GetInfoResponse.pub_key)
}
inline ::std::string* GetInfoResponse::mutable_pub_key() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.GetInfoResponse.pub_key)
  return pub_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInfoResponse::release_pub_key() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.GetInfoResponse.pub_key)
  
  return pub_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_pub_key(::std::string* pub_key) {
  if (pub_key != NULL) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.GetInfoResponse.pub_key)
}

// uint32 measurement_rate = 7;
inline void GetInfoResponse::clear_measurement_rate() {
  measurement_rate_ = 0u;
}
inline ::google::protobuf::uint32 GetInfoResponse::measurement_rate() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.measurement_rate)
  return measurement_rate_;
}
inline void GetInfoResponse::set_measurement_rate(::google::protobuf::uint32 value) {
  
  measurement_rate_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.measurement_rate)
}

// -------------------------------------------------------------------

// SetMeasurementRateResponse

// uint32 old_rate_cycles = 1;
inline void SetMeasurementRateResponse::clear_old_rate_cycles() {
  old_rate_cycles_ = 0u;
}
inline ::google::protobuf::uint32 SetMeasurementRateResponse::old_rate_cycles() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.SetMeasurementRateResponse.old_rate_cycles)
  return old_rate_cycles_;
}
inline void SetMeasurementRateResponse::set_old_rate_cycles(::google::protobuf::uint32 value) {
  
  old_rate_cycles_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.SetMeasurementRateResponse.old_rate_cycles)
}

// -------------------------------------------------------------------

// GetDataResponseHeader

// uint64 start_ts = 1;
inline void GetDataResponseHeader::clear_start_ts() {
  start_ts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetDataResponseHeader::start_ts() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetDataResponseHeader.start_ts)
  return start_ts_;
}
inline void GetDataResponseHeader::set_start_ts(::google::protobuf::uint64 value) {
  
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetDataResponseHeader.start_ts)
}

// uint64 end_ts = 2;
inline void GetDataResponseHeader::clear_end_ts() {
  end_ts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetDataResponseHeader::end_ts() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetDataResponseHeader.end_ts)
  return end_ts_;
}
inline void GetDataResponseHeader::set_end_ts(::google::protobuf::uint64 value) {
  
  end_ts_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetDataResponseHeader.end_ts)
}

// -------------------------------------------------------------------

// SendCommandToPluginResponse

// bool ok = 1;
inline void SendCommandToPluginResponse::clear_ok() {
  ok_ = false;
}
inline bool SendCommandToPluginResponse::ok() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.SendCommandToPluginResponse.ok)
  return ok_;
}
inline void SendCommandToPluginResponse::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.SendCommandToPluginResponse.ok)
}

// -------------------------------------------------------------------

// Response

// int32 box_id = 1;
inline void Response::clear_box_id() {
  box_id_ = 0;
}
inline ::google::protobuf::int32 Response::box_id() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.box_id)
  return box_id_;
}
inline void Response::set_box_id(::google::protobuf::int32 value) {
  
  box_id_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Response.box_id)
}

// uint32 seq = 2;
inline void Response::clear_seq() {
  seq_ = 0u;
}
inline ::google::protobuf::uint32 Response::seq() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.seq)
  return seq_;
}
inline void Response::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Response.seq)
}

// uint64 timestamp_ms = 3;
inline void Response::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Response::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.timestamp_ms)
  return timestamp_ms_;
}
inline void Response::set_timestamp_ms(::google::protobuf::uint64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Response.timestamp_ms)
}

// .opq.opqbox3.GetInfoResponse info_response = 4;
inline bool Response::has_info_response() const {
  return response_case() == kInfoResponse;
}
inline void Response::set_has_info_response() {
  _oneof_case_[0] = kInfoResponse;
}
inline void Response::clear_info_response() {
  if (has_info_response()) {
    delete response_.info_response_;
    clear_has_response();
  }
}
inline ::opq::opqbox3::GetInfoResponse* Response::release_info_response() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Response.info_response)
  if (has_info_response()) {
    clear_has_response();
      ::opq::opqbox3::GetInfoResponse* temp = response_.info_response_;
    response_.info_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opq::opqbox3::GetInfoResponse& Response::info_response() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.info_response)
  return has_info_response()
      ? *response_.info_response_
      : *reinterpret_cast< ::opq::opqbox3::GetInfoResponse*>(&::opq::opqbox3::_GetInfoResponse_default_instance_);
}
inline ::opq::opqbox3::GetInfoResponse* Response::mutable_info_response() {
  if (!has_info_response()) {
    clear_response();
    set_has_info_response();
    response_.info_response_ = new ::opq::opqbox3::GetInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Response.info_response)
  return response_.info_response_;
}

// .opq.opqbox3.SetMeasurementRateResponse message_rate_reponse = 5;
inline bool Response::has_message_rate_reponse() const {
  return response_case() == kMessageRateReponse;
}
inline void Response::set_has_message_rate_reponse() {
  _oneof_case_[0] = kMessageRateReponse;
}
inline void Response::clear_message_rate_reponse() {
  if (has_message_rate_reponse()) {
    delete response_.message_rate_reponse_;
    clear_has_response();
  }
}
inline ::opq::opqbox3::SetMeasurementRateResponse* Response::release_message_rate_reponse() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Response.message_rate_reponse)
  if (has_message_rate_reponse()) {
    clear_has_response();
      ::opq::opqbox3::SetMeasurementRateResponse* temp = response_.message_rate_reponse_;
    response_.message_rate_reponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opq::opqbox3::SetMeasurementRateResponse& Response::message_rate_reponse() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.message_rate_reponse)
  return has_message_rate_reponse()
      ? *response_.message_rate_reponse_
      : *reinterpret_cast< ::opq::opqbox3::SetMeasurementRateResponse*>(&::opq::opqbox3::_SetMeasurementRateResponse_default_instance_);
}
inline ::opq::opqbox3::SetMeasurementRateResponse* Response::mutable_message_rate_reponse() {
  if (!has_message_rate_reponse()) {
    clear_response();
    set_has_message_rate_reponse();
    response_.message_rate_reponse_ = new ::opq::opqbox3::SetMeasurementRateResponse;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Response.message_rate_reponse)
  return response_.message_rate_reponse_;
}

// .opq.opqbox3.GetDataResponseHeader get_data_response = 6;
inline bool Response::has_get_data_response() const {
  return response_case() == kGetDataResponse;
}
inline void Response::set_has_get_data_response() {
  _oneof_case_[0] = kGetDataResponse;
}
inline void Response::clear_get_data_response() {
  if (has_get_data_response()) {
    delete response_.get_data_response_;
    clear_has_response();
  }
}
inline ::opq::opqbox3::GetDataResponseHeader* Response::release_get_data_response() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Response.get_data_response)
  if (has_get_data_response()) {
    clear_has_response();
      ::opq::opqbox3::GetDataResponseHeader* temp = response_.get_data_response_;
    response_.get_data_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opq::opqbox3::GetDataResponseHeader& Response::get_data_response() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.get_data_response)
  return has_get_data_response()
      ? *response_.get_data_response_
      : *reinterpret_cast< ::opq::opqbox3::GetDataResponseHeader*>(&::opq::opqbox3::_GetDataResponseHeader_default_instance_);
}
inline ::opq::opqbox3::GetDataResponseHeader* Response::mutable_get_data_response() {
  if (!has_get_data_response()) {
    clear_response();
    set_has_get_data_response();
    response_.get_data_response_ = new ::opq::opqbox3::GetDataResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Response.get_data_response)
  return response_.get_data_response_;
}

// .opq.opqbox3.SendCommandToPluginResponse command_to_plugin_response = 7;
inline bool Response::has_command_to_plugin_response() const {
  return response_case() == kCommandToPluginResponse;
}
inline void Response::set_has_command_to_plugin_response() {
  _oneof_case_[0] = kCommandToPluginResponse;
}
inline void Response::clear_command_to_plugin_response() {
  if (has_command_to_plugin_response()) {
    delete response_.command_to_plugin_response_;
    clear_has_response();
  }
}
inline ::opq::opqbox3::SendCommandToPluginResponse* Response::release_command_to_plugin_response() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Response.command_to_plugin_response)
  if (has_command_to_plugin_response()) {
    clear_has_response();
      ::opq::opqbox3::SendCommandToPluginResponse* temp = response_.command_to_plugin_response_;
    response_.command_to_plugin_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::opq::opqbox3::SendCommandToPluginResponse& Response::command_to_plugin_response() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.command_to_plugin_response)
  return has_command_to_plugin_response()
      ? *response_.command_to_plugin_response_
      : *reinterpret_cast< ::opq::opqbox3::SendCommandToPluginResponse*>(&::opq::opqbox3::_SendCommandToPluginResponse_default_instance_);
}
inline ::opq::opqbox3::SendCommandToPluginResponse* Response::mutable_command_to_plugin_response() {
  if (!has_command_to_plugin_response()) {
    clear_response();
    set_has_command_to_plugin_response();
    response_.command_to_plugin_response_ = new ::opq::opqbox3::SendCommandToPluginResponse;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Response.command_to_plugin_response)
  return response_.command_to_plugin_response_;
}

inline bool Response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void Response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline Response::ResponseCase Response::response_case() const {
  return Response::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Cycle

// repeated int32 datapoints = 1;
inline int Cycle::datapoints_size() const {
  return datapoints_.size();
}
inline void Cycle::clear_datapoints() {
  datapoints_.Clear();
}
inline ::google::protobuf::int32 Cycle::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Cycle.datapoints)
  return datapoints_.Get(index);
}
inline void Cycle::set_datapoints(int index, ::google::protobuf::int32 value) {
  datapoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.Cycle.datapoints)
}
inline void Cycle::add_datapoints(::google::protobuf::int32 value) {
  datapoints_.Add(value);
  // @@protoc_insertion_point(field_add:opq.opqbox3.Cycle.datapoints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Cycle::datapoints() const {
  // @@protoc_insertion_point(field_list:opq.opqbox3.Cycle.datapoints)
  return datapoints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Cycle::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:opq.opqbox3.Cycle.datapoints)
  return &datapoints_;
}

// uint64 timestamp_ms = 2;
inline void Cycle::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Cycle::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Cycle.timestamp_ms)
  return timestamp_ms_;
}
inline void Cycle::set_timestamp_ms(::google::protobuf::uint64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Cycle.timestamp_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace opqbox3
}  // namespace opq

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_opqbox3_2eproto__INCLUDED
