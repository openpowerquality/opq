// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opqbox3.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "opqbox3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace opq {
namespace opqbox3 {
class MetricDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Metric> {
} _Metric_default_instance_;
class MeasurementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Measurement> {
} _Measurement_default_instance_;
class GetInfoCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetInfoCommand> {
} _GetInfoCommand_default_instance_;
class GetDataCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetDataCommand> {
} _GetDataCommand_default_instance_;
class SetMeasturementRateCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetMeasturementRateCommand> {
} _SetMeasturementRateCommand_default_instance_;
class SendCommandToPluginDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendCommandToPlugin> {
} _SendCommandToPlugin_default_instance_;
class CommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Command> {
  public:
  const ::opq::opqbox3::GetInfoCommand* info_command_;
  const ::opq::opqbox3::GetDataCommand* data_command_;
  const ::opq::opqbox3::SetMeasturementRateCommand* sampling_rate_command_;
  const ::opq::opqbox3::SendCommandToPlugin* send_command_to_plugin_;
} _Command_default_instance_;
class GetInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetInfoResponse> {
} _GetInfoResponse_default_instance_;
class SetMeasurementRateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetMeasurementRateResponse> {
} _SetMeasurementRateResponse_default_instance_;
class GetDataResponseHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetDataResponseHeader> {
} _GetDataResponseHeader_default_instance_;
class SendCommandToPluginResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendCommandToPluginResponse> {
} _SendCommandToPluginResponse_default_instance_;
class ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Response> {
  public:
  const ::opq::opqbox3::GetInfoResponse* info_response_;
  const ::opq::opqbox3::SetMeasurementRateResponse* message_rate_reponse_;
  const ::opq::opqbox3::GetDataResponseHeader* get_data_response_;
  const ::opq::opqbox3::SendCommandToPluginResponse* command_to_plugin_response_;
} _Response_default_instance_;
class CycleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Cycle> {
} _Cycle_default_instance_;

namespace protobuf_opqbox3_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, average_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, box_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, timestamp_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, metrics_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataCommand, start_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataCommand, end_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataCommand, wait_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMeasturementRateCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMeasturementRateCommand, measurement_window_cycles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommandToPlugin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommandToPlugin, plugin_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommandToPlugin, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, box_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, timestamp_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, identity_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Command_default_instance_), info_command_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Command_default_instance_), data_command_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Command_default_instance_), sampling_rate_command_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Command_default_instance_), send_command_to_plugin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, command_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, mac_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, wifi_network_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, calibration_constant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, pub_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, measurement_rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMeasurementRateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMeasurementRateResponse, old_rate_cycles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataResponseHeader, start_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataResponseHeader, end_ts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommandToPluginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommandToPluginResponse, ok_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, box_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, timestamp_ms_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), info_response_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), message_rate_reponse_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), get_data_response_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Response_default_instance_), command_to_plugin_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cycle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cycle, datapoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cycle, timestamp_ms_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Metric)},
  { 7, -1, sizeof(Measurement)},
  { 14, -1, sizeof(GetInfoCommand)},
  { 18, -1, sizeof(GetDataCommand)},
  { 25, -1, sizeof(SetMeasturementRateCommand)},
  { 30, -1, sizeof(SendCommandToPlugin)},
  { 36, -1, sizeof(Command)},
  { 49, -1, sizeof(GetInfoResponse)},
  { 60, -1, sizeof(SetMeasurementRateResponse)},
  { 65, -1, sizeof(GetDataResponseHeader)},
  { 71, -1, sizeof(SendCommandToPluginResponse)},
  { 76, -1, sizeof(Response)},
  { 88, -1, sizeof(Cycle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Metric_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Measurement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetInfoCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDataCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetMeasturementRateCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendCommandToPlugin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetMeasurementRateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDataResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendCommandToPluginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cycle_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "opqbox3.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
  const ::google::protobuf::Descriptor* Measurement_MetricsEntry_descriptor = protobuf_opqbox3_2eproto::file_level_metadata[1].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Measurement_MetricsEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::opq::opqbox3::Metric,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Measurement_MetricsEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _Metric_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Measurement_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _GetInfoCommand_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _GetDataCommand_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SetMeasturementRateCommand_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SendCommandToPlugin_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Command_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _GetInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SetMeasurementRateResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _GetDataResponseHeader_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SendCommandToPluginResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _Response_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _Cycle_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::rustproto::protobuf_rustproto_2eproto::InitDefaults();
  _Metric_default_instance_.DefaultConstruct();
  _Measurement_default_instance_.DefaultConstruct();
  _GetInfoCommand_default_instance_.DefaultConstruct();
  _GetDataCommand_default_instance_.DefaultConstruct();
  _SetMeasturementRateCommand_default_instance_.DefaultConstruct();
  _SendCommandToPlugin_default_instance_.DefaultConstruct();
  _Command_default_instance_.DefaultConstruct();
  _GetInfoResponse_default_instance_.DefaultConstruct();
  _SetMeasurementRateResponse_default_instance_.DefaultConstruct();
  _GetDataResponseHeader_default_instance_.DefaultConstruct();
  _SendCommandToPluginResponse_default_instance_.DefaultConstruct();
  _Response_default_instance_.DefaultConstruct();
  _Cycle_default_instance_.DefaultConstruct();
  _Command_default_instance_.info_command_ = const_cast< ::opq::opqbox3::GetInfoCommand*>(
      ::opq::opqbox3::GetInfoCommand::internal_default_instance());
  _Command_default_instance_.data_command_ = const_cast< ::opq::opqbox3::GetDataCommand*>(
      ::opq::opqbox3::GetDataCommand::internal_default_instance());
  _Command_default_instance_.sampling_rate_command_ = const_cast< ::opq::opqbox3::SetMeasturementRateCommand*>(
      ::opq::opqbox3::SetMeasturementRateCommand::internal_default_instance());
  _Command_default_instance_.send_command_to_plugin_ = const_cast< ::opq::opqbox3::SendCommandToPlugin*>(
      ::opq::opqbox3::SendCommandToPlugin::internal_default_instance());
  _Response_default_instance_.info_response_ = const_cast< ::opq::opqbox3::GetInfoResponse*>(
      ::opq::opqbox3::GetInfoResponse::internal_default_instance());
  _Response_default_instance_.message_rate_reponse_ = const_cast< ::opq::opqbox3::SetMeasurementRateResponse*>(
      ::opq::opqbox3::SetMeasurementRateResponse::internal_default_instance());
  _Response_default_instance_.get_data_response_ = const_cast< ::opq::opqbox3::GetDataResponseHeader*>(
      ::opq::opqbox3::GetDataResponseHeader::internal_default_instance());
  _Response_default_instance_.command_to_plugin_response_ = const_cast< ::opq::opqbox3::SendCommandToPluginResponse*>(
      ::opq::opqbox3::SendCommandToPluginResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\ropqbox3.proto\022\013opq.opqbox3\032\017rustproto."
      "proto\"3\n\006Metric\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001("
      "\002\022\017\n\007average\030\003 \001(\002\"\260\001\n\013Measurement\022\016\n\006bo"
      "x_id\030\001 \001(\r\022\024\n\014timestamp_ms\030\002 \001(\004\0226\n\007metr"
      "ics\030\003 \003(\0132%.opq.opqbox3.Measurement.Metr"
      "icsEntry\032C\n\014MetricsEntry\022\013\n\003key\030\001 \001(\t\022\"\n"
      "\005value\030\002 \001(\0132\023.opq.opqbox3.Metric:\0028\001\"\020\n"
      "\016GetInfoCommand\"@\n\016GetDataCommand\022\020\n\010sta"
      "rt_ms\030\001 \001(\004\022\016\n\006end_ms\030\002 \001(\004\022\014\n\004wait\030\003 \001("
      "\010\"\?\n\032SetMeasturementRateCommand\022!\n\031measu"
      "rement_window_cycles\030\001 \001(\r\";\n\023SendComman"
      "dToPlugin\022\023\n\013plugin_name\030\001 \001(\t\022\017\n\007messag"
      "e\030\002 \001(\t\"\321\002\n\007Command\022\013\n\003seq\030\001 \001(\r\022\016\n\006box_"
      "id\030\002 \001(\005\022\024\n\014timestamp_ms\030\003 \001(\004\022\020\n\010identi"
      "ty\030\004 \001(\t\0223\n\014info_command\030\005 \001(\0132\033.opq.opq"
      "box3.GetInfoCommandH\000\0223\n\014data_command\030\006 "
      "\001(\0132\033.opq.opqbox3.GetDataCommandH\000\022H\n\025sa"
      "mpling_rate_command\030\007 \001(\0132\'.opq.opqbox3."
      "SetMeasturementRateCommandH\000\022B\n\026send_com"
      "mand_to_plugin\030\010 \001(\0132 .opq.opqbox3.SendC"
      "ommandToPluginH\000B\t\n\007command\"\236\001\n\017GetInfoR"
      "esponse\022\020\n\010mac_addr\030\001 \001(\t\022\024\n\014wifi_networ"
      "k\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\016\n\006uptime\030\004 \001(\004\022\034\n\024c"
      "alibration_constant\030\005 \001(\004\022\017\n\007pub_key\030\006 \001"
      "(\t\022\030\n\020measurement_rate\030\007 \001(\r\"5\n\032SetMeasu"
      "rementRateResponse\022\027\n\017old_rate_cycles\030\001 "
      "\001(\r\"9\n\025GetDataResponseHeader\022\020\n\010start_ts"
      "\030\001 \001(\004\022\016\n\006end_ts\030\002 \001(\004\")\n\033SendCommandToP"
      "luginResponse\022\n\n\002ok\030\001 \001(\010\"\332\002\n\010Response\022\016"
      "\n\006box_id\030\001 \001(\005\022\013\n\003seq\030\002 \001(\r\022\024\n\014timestamp"
      "_ms\030\003 \001(\004\0225\n\rinfo_response\030\004 \001(\0132\034.opq.o"
      "pqbox3.GetInfoResponseH\000\022G\n\024message_rate"
      "_reponse\030\005 \001(\0132\'.opq.opqbox3.SetMeasurem"
      "entRateResponseH\000\022\?\n\021get_data_response\030\006"
      " \001(\0132\".opq.opqbox3.GetDataResponseHeader"
      "H\000\022N\n\032command_to_plugin_response\030\007 \001(\0132("
      ".opq.opqbox3.SendCommandToPluginResponse"
      "H\000B\n\n\010response\"1\n\005Cycle\022\022\n\ndatapoints\030\001 "
      "\003(\005\022\024\n\014timestamp_ms\030\002 \001(\004B\004\310\246\010\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1559);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "opqbox3.proto", &protobuf_RegisterTypes);
  ::rustproto::protobuf_rustproto_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_opqbox3_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metric::kMinFieldNumber;
const int Metric::kMaxFieldNumber;
const int Metric::kAverageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metric::Metric()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_opqbox3_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.opqbox3.Metric)
}
Metric::Metric(const Metric& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    reinterpret_cast<char*>(&average_) -
    reinterpret_cast<char*>(&min_) + sizeof(average_));
  // @@protoc_insertion_point(copy_constructor:opq.opqbox3.Metric)
}

void Metric::SharedCtor() {
  ::memset(&min_, 0, reinterpret_cast<char*>(&average_) -
    reinterpret_cast<char*>(&min_) + sizeof(average_));
  _cached_size_ = 0;
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:opq.opqbox3.Metric)
  SharedDtor();
}

void Metric::SharedDtor() {
}

void Metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metric::descriptor() {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[0].descriptor;
}

const Metric& Metric::default_instance() {
  protobuf_opqbox3_2eproto::InitDefaults();
  return *internal_default_instance();
}

Metric* Metric::New(::google::protobuf::Arena* arena) const {
  Metric* n = new Metric;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.opqbox3.Metric)
  ::memset(&min_, 0, reinterpret_cast<char*>(&average_) -
    reinterpret_cast<char*>(&min_) + sizeof(average_));
}

bool Metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.opqbox3.Metric)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float average = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.opqbox3.Metric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.opqbox3.Metric)
  return false;
#undef DO_
}

void Metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.opqbox3.Metric)
  // float min = 1;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // float max = 2;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  // float average = 3;
  if (this->average() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->average(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.opqbox3.Metric)
}

::google::protobuf::uint8* Metric::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:opq.opqbox3.Metric)
  // float min = 1;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // float max = 2;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  // float average = 3;
  if (this->average() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->average(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.opqbox3.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opq.opqbox3.Metric)
  size_t total_size = 0;

  // float min = 1;
  if (this->min() != 0) {
    total_size += 1 + 4;
  }

  // float max = 2;
  if (this->max() != 0) {
    total_size += 1 + 4;
  }

  // float average = 3;
  if (this->average() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.opqbox3.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  const Metric* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Metric>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.opqbox3.Metric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.opqbox3.Metric)
    MergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.opqbox3.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
  if (from.average() != 0) {
    set_average(from.average());
  }
}

void Metric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.opqbox3.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.opqbox3.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::Swap(Metric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metric::InternalSwap(Metric* other) {
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(average_, other->average_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metric::GetMetadata() const {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metric

// float min = 1;
void Metric::clear_min() {
  min_ = 0;
}
float Metric::min() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Metric.min)
  return min_;
}
void Metric::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Metric.min)
}

// float max = 2;
void Metric::clear_max() {
  max_ = 0;
}
float Metric::max() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Metric.max)
  return max_;
}
void Metric::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Metric.max)
}

// float average = 3;
void Metric::clear_average() {
  average_ = 0;
}
float Metric::average() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Metric.average)
  return average_;
}
void Metric::set_average(float value) {
  
  average_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Metric.average)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measurement::kBoxIdFieldNumber;
const int Measurement::kTimestampMsFieldNumber;
const int Measurement::kMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measurement::Measurement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_opqbox3_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.opqbox3.Measurement)
}
Measurement::Measurement(const Measurement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& Measurement_MetricsEntry_descriptor = protobuf_opqbox3_2eproto::file_level_metadata[1].descriptor;
  metrics_.SetAssignDescriptorCallback(
      protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce);
  metrics_.SetEntryDescriptor(
      &Measurement_MetricsEntry_descriptor);
  metrics_.MergeFrom(from.metrics_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    reinterpret_cast<char*>(&box_id_) -
    reinterpret_cast<char*>(&timestamp_ms_) + sizeof(box_id_));
  // @@protoc_insertion_point(copy_constructor:opq.opqbox3.Measurement)
}

void Measurement::SharedCtor() {
  const ::google::protobuf::Descriptor*& Measurement_MetricsEntry_descriptor = protobuf_opqbox3_2eproto::file_level_metadata[1].descriptor;
  metrics_.SetAssignDescriptorCallback(
      protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce);
  metrics_.SetEntryDescriptor(
      &Measurement_MetricsEntry_descriptor);
  ::memset(&timestamp_ms_, 0, reinterpret_cast<char*>(&box_id_) -
    reinterpret_cast<char*>(&timestamp_ms_) + sizeof(box_id_));
  _cached_size_ = 0;
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:opq.opqbox3.Measurement)
  SharedDtor();
}

void Measurement::SharedDtor() {
}

void Measurement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Measurement::descriptor() {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[2].descriptor;
}

const Measurement& Measurement::default_instance() {
  protobuf_opqbox3_2eproto::InitDefaults();
  return *internal_default_instance();
}

Measurement* Measurement::New(::google::protobuf::Arena* arena) const {
  Measurement* n = new Measurement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.opqbox3.Measurement)
  metrics_.Clear();
  ::memset(&timestamp_ms_, 0, reinterpret_cast<char*>(&box_id_) -
    reinterpret_cast<char*>(&timestamp_ms_) + sizeof(box_id_));
}

bool Measurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.opqbox3.Measurement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 box_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &box_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .opq.opqbox3.Metric> metrics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(input->IncrementRecursionDepth());
          Measurement_MetricsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::opq::opqbox3::Metric,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric > > parser(&metrics_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.opqbox3.Measurement.MetricsEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.opqbox3.Measurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.opqbox3.Measurement)
  return false;
#undef DO_
}

void Measurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.opqbox3.Measurement)
  // uint32 box_id = 1;
  if (this->box_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->box_id(), output);
  }

  // uint64 timestamp_ms = 2;
  if (this->timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp_ms(), output);
  }

  // map<string, .opq.opqbox3.Metric> metrics = 3;
  if (!this->metrics().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "opq.opqbox3.Measurement.MetricsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->metrics().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metrics().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >::const_iterator
          it = this->metrics().begin();
          it != this->metrics().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Measurement_MetricsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metrics_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Measurement_MetricsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >::const_iterator
          it = this->metrics().begin();
          it != this->metrics().end(); ++it) {
        entry.reset(metrics_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:opq.opqbox3.Measurement)
}

::google::protobuf::uint8* Measurement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:opq.opqbox3.Measurement)
  // uint32 box_id = 1;
  if (this->box_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->box_id(), target);
  }

  // uint64 timestamp_ms = 2;
  if (this->timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp_ms(), target);
  }

  // map<string, .opq.opqbox3.Metric> metrics = 3;
  if (!this->metrics().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "opq.opqbox3.Measurement.MetricsEntry.key");
      }
    };

    if (deterministic &&
        this->metrics().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metrics().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >::const_iterator
          it = this->metrics().begin();
          it != this->metrics().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Measurement_MetricsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metrics_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Measurement_MetricsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >::const_iterator
          it = this->metrics().begin();
          it != this->metrics().end(); ++it) {
        entry.reset(metrics_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.opqbox3.Measurement)
  return target;
}

size_t Measurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opq.opqbox3.Measurement)
  size_t total_size = 0;

  // map<string, .opq.opqbox3.Metric> metrics = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metrics_size());
  {
    ::google::protobuf::scoped_ptr<Measurement_MetricsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >::const_iterator
        it = this->metrics().begin();
        it != this->metrics().end(); ++it) {
      entry.reset(metrics_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint64 timestamp_ms = 2;
  if (this->timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ms());
  }

  // uint32 box_id = 1;
  if (this->box_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->box_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Measurement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.opqbox3.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  const Measurement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Measurement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.opqbox3.Measurement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.opqbox3.Measurement)
    MergeFrom(*source);
  }
}

void Measurement::MergeFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.opqbox3.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metrics_.MergeFrom(from.metrics_);
  if (from.timestamp_ms() != 0) {
    set_timestamp_ms(from.timestamp_ms());
  }
  if (from.box_id() != 0) {
    set_box_id(from.box_id());
  }
}

void Measurement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.opqbox3.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measurement::CopyFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.opqbox3.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {
  return true;
}

void Measurement::Swap(Measurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Measurement::InternalSwap(Measurement* other) {
  metrics_.Swap(&other->metrics_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(box_id_, other->box_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Measurement::GetMetadata() const {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Measurement

// uint32 box_id = 1;
void Measurement::clear_box_id() {
  box_id_ = 0u;
}
::google::protobuf::uint32 Measurement::box_id() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Measurement.box_id)
  return box_id_;
}
void Measurement::set_box_id(::google::protobuf::uint32 value) {
  
  box_id_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Measurement.box_id)
}

// uint64 timestamp_ms = 2;
void Measurement::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Measurement::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Measurement.timestamp_ms)
  return timestamp_ms_;
}
void Measurement::set_timestamp_ms(::google::protobuf::uint64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Measurement.timestamp_ms)
}

// map<string, .opq.opqbox3.Metric> metrics = 3;
int Measurement::metrics_size() const {
  return metrics_.size();
}
void Measurement::clear_metrics() {
  metrics_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >&
Measurement::metrics() const {
  // @@protoc_insertion_point(field_map:opq.opqbox3.Measurement.metrics)
  return metrics_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::opq::opqbox3::Metric >*
Measurement::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_map:opq.opqbox3.Measurement.metrics)
  return metrics_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInfoCommand::GetInfoCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_opqbox3_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.opqbox3.GetInfoCommand)
}
GetInfoCommand::GetInfoCommand(const GetInfoCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opq.opqbox3.GetInfoCommand)
}

void GetInfoCommand::SharedCtor() {
  _cached_size_ = 0;
}

GetInfoCommand::~GetInfoCommand() {
  // @@protoc_insertion_point(destructor:opq.opqbox3.GetInfoCommand)
  SharedDtor();
}

void GetInfoCommand::SharedDtor() {
}

void GetInfoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfoCommand::descriptor() {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[3].descriptor;
}

const GetInfoCommand& GetInfoCommand::default_instance() {
  protobuf_opqbox3_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetInfoCommand* GetInfoCommand::New(::google::protobuf::Arena* arena) const {
  GetInfoCommand* n = new GetInfoCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInfoCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.opqbox3.GetInfoCommand)
}

bool GetInfoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.opqbox3.GetInfoCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:opq.opqbox3.GetInfoCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.opqbox3.GetInfoCommand)
  return false;
#undef DO_
}

void GetInfoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.opqbox3.GetInfoCommand)
  // @@protoc_insertion_point(serialize_end:opq.opqbox3.GetInfoCommand)
}

::google::protobuf::uint8* GetInfoCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:opq.opqbox3.GetInfoCommand)
  // @@protoc_insertion_point(serialize_to_array_end:opq.opqbox3.GetInfoCommand)
  return target;
}

size_t GetInfoCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opq.opqbox3.GetInfoCommand)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfoCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.opqbox3.GetInfoCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInfoCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.opqbox3.GetInfoCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.opqbox3.GetInfoCommand)
    MergeFrom(*source);
  }
}

void GetInfoCommand::MergeFrom(const GetInfoCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.opqbox3.GetInfoCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void GetInfoCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.opqbox3.GetInfoCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoCommand::CopyFrom(const GetInfoCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.opqbox3.GetInfoCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoCommand::IsInitialized() const {
  return true;
}

void GetInfoCommand::Swap(GetInfoCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInfoCommand::InternalSwap(GetInfoCommand* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInfoCommand::GetMetadata() const {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInfoCommand

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDataCommand::kStartMsFieldNumber;
const int GetDataCommand::kEndMsFieldNumber;
const int GetDataCommand::kWaitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDataCommand::GetDataCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_opqbox3_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.opqbox3.GetDataCommand)
}
GetDataCommand::GetDataCommand(const GetDataCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_ms_, &from.start_ms_,
    reinterpret_cast<char*>(&wait_) -
    reinterpret_cast<char*>(&start_ms_) + sizeof(wait_));
  // @@protoc_insertion_point(copy_constructor:opq.opqbox3.GetDataCommand)
}

void GetDataCommand::SharedCtor() {
  ::memset(&start_ms_, 0, reinterpret_cast<char*>(&wait_) -
    reinterpret_cast<char*>(&start_ms_) + sizeof(wait_));
  _cached_size_ = 0;
}

GetDataCommand::~GetDataCommand() {
  // @@protoc_insertion_point(destructor:opq.opqbox3.GetDataCommand)
  SharedDtor();
}

void GetDataCommand::SharedDtor() {
}

void GetDataCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDataCommand::descriptor() {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[4].descriptor;
}

const GetDataCommand& GetDataCommand::default_instance() {
  protobuf_opqbox3_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDataCommand* GetDataCommand::New(::google::protobuf::Arena* arena) const {
  GetDataCommand* n = new GetDataCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDataCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.opqbox3.GetDataCommand)
  ::memset(&start_ms_, 0, reinterpret_cast<char*>(&wait_) -
    reinterpret_cast<char*>(&start_ms_) + sizeof(wait_));
}

bool GetDataCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.opqbox3.GetDataCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 end_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool wait = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.opqbox3.GetDataCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.opqbox3.GetDataCommand)
  return false;
#undef DO_
}

void GetDataCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.opqbox3.GetDataCommand)
  // uint64 start_ms = 1;
  if (this->start_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_ms(), output);
  }

  // uint64 end_ms = 2;
  if (this->end_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_ms(), output);
  }

  // bool wait = 3;
  if (this->wait() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wait(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.opqbox3.GetDataCommand)
}

::google::protobuf::uint8* GetDataCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:opq.opqbox3.GetDataCommand)
  // uint64 start_ms = 1;
  if (this->start_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_ms(), target);
  }

  // uint64 end_ms = 2;
  if (this->end_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_ms(), target);
  }

  // bool wait = 3;
  if (this->wait() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->wait(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.opqbox3.GetDataCommand)
  return target;
}

size_t GetDataCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opq.opqbox3.GetDataCommand)
  size_t total_size = 0;

  // uint64 start_ms = 1;
  if (this->start_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_ms());
  }

  // uint64 end_ms = 2;
  if (this->end_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_ms());
  }

  // bool wait = 3;
  if (this->wait() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDataCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.opqbox3.GetDataCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDataCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDataCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.opqbox3.GetDataCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.opqbox3.GetDataCommand)
    MergeFrom(*source);
  }
}

void GetDataCommand::MergeFrom(const GetDataCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.opqbox3.GetDataCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.start_ms() != 0) {
    set_start_ms(from.start_ms());
  }
  if (from.end_ms() != 0) {
    set_end_ms(from.end_ms());
  }
  if (from.wait() != 0) {
    set_wait(from.wait());
  }
}

void GetDataCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.opqbox3.GetDataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataCommand::CopyFrom(const GetDataCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.opqbox3.GetDataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataCommand::IsInitialized() const {
  return true;
}

void GetDataCommand::Swap(GetDataCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDataCommand::InternalSwap(GetDataCommand* other) {
  std::swap(start_ms_, other->start_ms_);
  std::swap(end_ms_, other->end_ms_);
  std::swap(wait_, other->wait_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDataCommand::GetMetadata() const {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDataCommand

// uint64 start_ms = 1;
void GetDataCommand::clear_start_ms() {
  start_ms_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetDataCommand::start_ms() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetDataCommand.start_ms)
  return start_ms_;
}
void GetDataCommand::set_start_ms(::google::protobuf::uint64 value) {
  
  start_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetDataCommand.start_ms)
}

// uint64 end_ms = 2;
void GetDataCommand::clear_end_ms() {
  end_ms_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetDataCommand::end_ms() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetDataCommand.end_ms)
  return end_ms_;
}
void GetDataCommand::set_end_ms(::google::protobuf::uint64 value) {
  
  end_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetDataCommand.end_ms)
}

// bool wait = 3;
void GetDataCommand::clear_wait() {
  wait_ = false;
}
bool GetDataCommand::wait() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetDataCommand.wait)
  return wait_;
}
void GetDataCommand::set_wait(bool value) {
  
  wait_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetDataCommand.wait)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMeasturementRateCommand::kMeasurementWindowCyclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMeasturementRateCommand::SetMeasturementRateCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_opqbox3_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.opqbox3.SetMeasturementRateCommand)
}
SetMeasturementRateCommand::SetMeasturementRateCommand(const SetMeasturementRateCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  measurement_window_cycles_ = from.measurement_window_cycles_;
  // @@protoc_insertion_point(copy_constructor:opq.opqbox3.SetMeasturementRateCommand)
}

void SetMeasturementRateCommand::SharedCtor() {
  measurement_window_cycles_ = 0u;
  _cached_size_ = 0;
}

SetMeasturementRateCommand::~SetMeasturementRateCommand() {
  // @@protoc_insertion_point(destructor:opq.opqbox3.SetMeasturementRateCommand)
  SharedDtor();
}

void SetMeasturementRateCommand::SharedDtor() {
}

void SetMeasturementRateCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetMeasturementRateCommand::descriptor() {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[5].descriptor;
}

const SetMeasturementRateCommand& SetMeasturementRateCommand::default_instance() {
  protobuf_opqbox3_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetMeasturementRateCommand* SetMeasturementRateCommand::New(::google::protobuf::Arena* arena) const {
  SetMeasturementRateCommand* n = new SetMeasturementRateCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetMeasturementRateCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.opqbox3.SetMeasturementRateCommand)
  measurement_window_cycles_ = 0u;
}

bool SetMeasturementRateCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.opqbox3.SetMeasturementRateCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 measurement_window_cycles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &measurement_window_cycles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.opqbox3.SetMeasturementRateCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.opqbox3.SetMeasturementRateCommand)
  return false;
#undef DO_
}

void SetMeasturementRateCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.opqbox3.SetMeasturementRateCommand)
  // uint32 measurement_window_cycles = 1;
  if (this->measurement_window_cycles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->measurement_window_cycles(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.opqbox3.SetMeasturementRateCommand)
}

::google::protobuf::uint8* SetMeasturementRateCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:opq.opqbox3.SetMeasturementRateCommand)
  // uint32 measurement_window_cycles = 1;
  if (this->measurement_window_cycles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->measurement_window_cycles(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.opqbox3.SetMeasturementRateCommand)
  return target;
}

size_t SetMeasturementRateCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opq.opqbox3.SetMeasturementRateCommand)
  size_t total_size = 0;

  // uint32 measurement_window_cycles = 1;
  if (this->measurement_window_cycles() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->measurement_window_cycles());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetMeasturementRateCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.opqbox3.SetMeasturementRateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMeasturementRateCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetMeasturementRateCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.opqbox3.SetMeasturementRateCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.opqbox3.SetMeasturementRateCommand)
    MergeFrom(*source);
  }
}

void SetMeasturementRateCommand::MergeFrom(const SetMeasturementRateCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.opqbox3.SetMeasturementRateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.measurement_window_cycles() != 0) {
    set_measurement_window_cycles(from.measurement_window_cycles());
  }
}

void SetMeasturementRateCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.opqbox3.SetMeasturementRateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMeasturementRateCommand::CopyFrom(const SetMeasturementRateCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.opqbox3.SetMeasturementRateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMeasturementRateCommand::IsInitialized() const {
  return true;
}

void SetMeasturementRateCommand::Swap(SetMeasturementRateCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMeasturementRateCommand::InternalSwap(SetMeasturementRateCommand* other) {
  std::swap(measurement_window_cycles_, other->measurement_window_cycles_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetMeasturementRateCommand::GetMetadata() const {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetMeasturementRateCommand

// uint32 measurement_window_cycles = 1;
void SetMeasturementRateCommand::clear_measurement_window_cycles() {
  measurement_window_cycles_ = 0u;
}
::google::protobuf::uint32 SetMeasturementRateCommand::measurement_window_cycles() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.SetMeasturementRateCommand.measurement_window_cycles)
  return measurement_window_cycles_;
}
void SetMeasturementRateCommand::set_measurement_window_cycles(::google::protobuf::uint32 value) {
  
  measurement_window_cycles_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.SetMeasturementRateCommand.measurement_window_cycles)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendCommandToPlugin::kPluginNameFieldNumber;
const int SendCommandToPlugin::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendCommandToPlugin::SendCommandToPlugin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_opqbox3_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.opqbox3.SendCommandToPlugin)
}
SendCommandToPlugin::SendCommandToPlugin(const SendCommandToPlugin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plugin_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plugin_name().size() > 0) {
    plugin_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_name_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:opq.opqbox3.SendCommandToPlugin)
}

void SendCommandToPlugin::SharedCtor() {
  plugin_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SendCommandToPlugin::~SendCommandToPlugin() {
  // @@protoc_insertion_point(destructor:opq.opqbox3.SendCommandToPlugin)
  SharedDtor();
}

void SendCommandToPlugin::SharedDtor() {
  plugin_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SendCommandToPlugin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendCommandToPlugin::descriptor() {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[6].descriptor;
}

const SendCommandToPlugin& SendCommandToPlugin::default_instance() {
  protobuf_opqbox3_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendCommandToPlugin* SendCommandToPlugin::New(::google::protobuf::Arena* arena) const {
  SendCommandToPlugin* n = new SendCommandToPlugin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendCommandToPlugin::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.opqbox3.SendCommandToPlugin)
  plugin_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SendCommandToPlugin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.opqbox3.SendCommandToPlugin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string plugin_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugin_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plugin_name().data(), this->plugin_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.opqbox3.SendCommandToPlugin.plugin_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.opqbox3.SendCommandToPlugin.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.opqbox3.SendCommandToPlugin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.opqbox3.SendCommandToPlugin)
  return false;
#undef DO_
}

void SendCommandToPlugin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.opqbox3.SendCommandToPlugin)
  // string plugin_name = 1;
  if (this->plugin_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plugin_name().data(), this->plugin_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.SendCommandToPlugin.plugin_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->plugin_name(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.SendCommandToPlugin.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.opqbox3.SendCommandToPlugin)
}

::google::protobuf::uint8* SendCommandToPlugin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:opq.opqbox3.SendCommandToPlugin)
  // string plugin_name = 1;
  if (this->plugin_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plugin_name().data(), this->plugin_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.SendCommandToPlugin.plugin_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->plugin_name(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.SendCommandToPlugin.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.opqbox3.SendCommandToPlugin)
  return target;
}

size_t SendCommandToPlugin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opq.opqbox3.SendCommandToPlugin)
  size_t total_size = 0;

  // string plugin_name = 1;
  if (this->plugin_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plugin_name());
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendCommandToPlugin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.opqbox3.SendCommandToPlugin)
  GOOGLE_DCHECK_NE(&from, this);
  const SendCommandToPlugin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendCommandToPlugin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.opqbox3.SendCommandToPlugin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.opqbox3.SendCommandToPlugin)
    MergeFrom(*source);
  }
}

void SendCommandToPlugin::MergeFrom(const SendCommandToPlugin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.opqbox3.SendCommandToPlugin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.plugin_name().size() > 0) {

    plugin_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_name_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void SendCommandToPlugin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.opqbox3.SendCommandToPlugin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCommandToPlugin::CopyFrom(const SendCommandToPlugin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.opqbox3.SendCommandToPlugin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCommandToPlugin::IsInitialized() const {
  return true;
}

void SendCommandToPlugin::Swap(SendCommandToPlugin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendCommandToPlugin::InternalSwap(SendCommandToPlugin* other) {
  plugin_name_.Swap(&other->plugin_name_);
  message_.Swap(&other->message_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendCommandToPlugin::GetMetadata() const {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendCommandToPlugin

// string plugin_name = 1;
void SendCommandToPlugin::clear_plugin_name() {
  plugin_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SendCommandToPlugin::plugin_name() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.SendCommandToPlugin.plugin_name)
  return plugin_name_.GetNoArena();
}
void SendCommandToPlugin::set_plugin_name(const ::std::string& value) {
  
  plugin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.SendCommandToPlugin.plugin_name)
}
#if LANG_CXX11
void SendCommandToPlugin::set_plugin_name(::std::string&& value) {
  
  plugin_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.SendCommandToPlugin.plugin_name)
}
#endif
void SendCommandToPlugin::set_plugin_name(const char* value) {
  
  plugin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.SendCommandToPlugin.plugin_name)
}
void SendCommandToPlugin::set_plugin_name(const char* value, size_t size) {
  
  plugin_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.SendCommandToPlugin.plugin_name)
}
::std::string* SendCommandToPlugin::mutable_plugin_name() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.SendCommandToPlugin.plugin_name)
  return plugin_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendCommandToPlugin::release_plugin_name() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.SendCommandToPlugin.plugin_name)
  
  return plugin_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendCommandToPlugin::set_allocated_plugin_name(::std::string* plugin_name) {
  if (plugin_name != NULL) {
    
  } else {
    
  }
  plugin_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugin_name);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.SendCommandToPlugin.plugin_name)
}

// string message = 2;
void SendCommandToPlugin::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SendCommandToPlugin::message() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.SendCommandToPlugin.message)
  return message_.GetNoArena();
}
void SendCommandToPlugin::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.SendCommandToPlugin.message)
}
#if LANG_CXX11
void SendCommandToPlugin::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.SendCommandToPlugin.message)
}
#endif
void SendCommandToPlugin::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.SendCommandToPlugin.message)
}
void SendCommandToPlugin::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.SendCommandToPlugin.message)
}
::std::string* SendCommandToPlugin::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.SendCommandToPlugin.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendCommandToPlugin::release_message() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.SendCommandToPlugin.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendCommandToPlugin::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.SendCommandToPlugin.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kSeqFieldNumber;
const int Command::kBoxIdFieldNumber;
const int Command::kTimestampMsFieldNumber;
const int Command::kIdentityFieldNumber;
const int Command::kInfoCommandFieldNumber;
const int Command::kDataCommandFieldNumber;
const int Command::kSamplingRateCommandFieldNumber;
const int Command::kSendCommandToPluginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_opqbox3_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.opqbox3.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.identity().size() > 0) {
    identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identity_);
  }
  ::memcpy(&seq_, &from.seq_,
    reinterpret_cast<char*>(&timestamp_ms_) -
    reinterpret_cast<char*>(&seq_) + sizeof(timestamp_ms_));
  clear_has_command();
  switch (from.command_case()) {
    case kInfoCommand: {
      mutable_info_command()->::opq::opqbox3::GetInfoCommand::MergeFrom(from.info_command());
      break;
    }
    case kDataCommand: {
      mutable_data_command()->::opq::opqbox3::GetDataCommand::MergeFrom(from.data_command());
      break;
    }
    case kSamplingRateCommand: {
      mutable_sampling_rate_command()->::opq::opqbox3::SetMeasturementRateCommand::MergeFrom(from.sampling_rate_command());
      break;
    }
    case kSendCommandToPlugin: {
      mutable_send_command_to_plugin()->::opq::opqbox3::SendCommandToPlugin::MergeFrom(from.send_command_to_plugin());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opq.opqbox3.Command)
}

void Command::SharedCtor() {
  identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seq_, 0, reinterpret_cast<char*>(&timestamp_ms_) -
    reinterpret_cast<char*>(&seq_) + sizeof(timestamp_ms_));
  clear_has_command();
  _cached_size_ = 0;
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:opq.opqbox3.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_command()) {
    clear_command();
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[7].descriptor;
}

const Command& Command::default_instance() {
  protobuf_opqbox3_2eproto::InitDefaults();
  return *internal_default_instance();
}

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:opq.opqbox3.Command)
  switch (command_case()) {
    case kInfoCommand: {
      delete command_.info_command_;
      break;
    }
    case kDataCommand: {
      delete command_.data_command_;
      break;
    }
    case kSamplingRateCommand: {
      delete command_.sampling_rate_command_;
      break;
    }
    case kSendCommandToPlugin: {
      delete command_.send_command_to_plugin_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.opqbox3.Command)
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seq_, 0, reinterpret_cast<char*>(&timestamp_ms_) -
    reinterpret_cast<char*>(&seq_) + sizeof(timestamp_ms_));
  clear_command();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.opqbox3.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 box_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string identity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identity()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identity().data(), this->identity().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.opqbox3.Command.identity"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opq.opqbox3.GetInfoCommand info_command = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opq.opqbox3.GetDataCommand data_command = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opq.opqbox3.SetMeasturementRateCommand sampling_rate_command = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sampling_rate_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opq.opqbox3.SendCommandToPlugin send_command_to_plugin = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_command_to_plugin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.opqbox3.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.opqbox3.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.opqbox3.Command)
  // uint32 seq = 1;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq(), output);
  }

  // int32 box_id = 2;
  if (this->box_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->box_id(), output);
  }

  // uint64 timestamp_ms = 3;
  if (this->timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp_ms(), output);
  }

  // string identity = 4;
  if (this->identity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.Command.identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->identity(), output);
  }

  // .opq.opqbox3.GetInfoCommand info_command = 5;
  if (has_info_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *command_.info_command_, output);
  }

  // .opq.opqbox3.GetDataCommand data_command = 6;
  if (has_data_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *command_.data_command_, output);
  }

  // .opq.opqbox3.SetMeasturementRateCommand sampling_rate_command = 7;
  if (has_sampling_rate_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *command_.sampling_rate_command_, output);
  }

  // .opq.opqbox3.SendCommandToPlugin send_command_to_plugin = 8;
  if (has_send_command_to_plugin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *command_.send_command_to_plugin_, output);
  }

  // @@protoc_insertion_point(serialize_end:opq.opqbox3.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:opq.opqbox3.Command)
  // uint32 seq = 1;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq(), target);
  }

  // int32 box_id = 2;
  if (this->box_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->box_id(), target);
  }

  // uint64 timestamp_ms = 3;
  if (this->timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp_ms(), target);
  }

  // string identity = 4;
  if (this->identity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.Command.identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->identity(), target);
  }

  // .opq.opqbox3.GetInfoCommand info_command = 5;
  if (has_info_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *command_.info_command_, false, target);
  }

  // .opq.opqbox3.GetDataCommand data_command = 6;
  if (has_data_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *command_.data_command_, false, target);
  }

  // .opq.opqbox3.SetMeasturementRateCommand sampling_rate_command = 7;
  if (has_sampling_rate_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *command_.sampling_rate_command_, false, target);
  }

  // .opq.opqbox3.SendCommandToPlugin send_command_to_plugin = 8;
  if (has_send_command_to_plugin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *command_.send_command_to_plugin_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.opqbox3.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opq.opqbox3.Command)
  size_t total_size = 0;

  // string identity = 4;
  if (this->identity().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identity());
  }

  // uint32 seq = 1;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());
  }

  // int32 box_id = 2;
  if (this->box_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->box_id());
  }

  // uint64 timestamp_ms = 3;
  if (this->timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ms());
  }

  switch (command_case()) {
    // .opq.opqbox3.GetInfoCommand info_command = 5;
    case kInfoCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.info_command_);
      break;
    }
    // .opq.opqbox3.GetDataCommand data_command = 6;
    case kDataCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.data_command_);
      break;
    }
    // .opq.opqbox3.SetMeasturementRateCommand sampling_rate_command = 7;
    case kSamplingRateCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.sampling_rate_command_);
      break;
    }
    // .opq.opqbox3.SendCommandToPlugin send_command_to_plugin = 8;
    case kSendCommandToPlugin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.send_command_to_plugin_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.opqbox3.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.opqbox3.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.opqbox3.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.opqbox3.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.identity().size() > 0) {

    identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identity_);
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.box_id() != 0) {
    set_box_id(from.box_id());
  }
  if (from.timestamp_ms() != 0) {
    set_timestamp_ms(from.timestamp_ms());
  }
  switch (from.command_case()) {
    case kInfoCommand: {
      mutable_info_command()->::opq::opqbox3::GetInfoCommand::MergeFrom(from.info_command());
      break;
    }
    case kDataCommand: {
      mutable_data_command()->::opq::opqbox3::GetDataCommand::MergeFrom(from.data_command());
      break;
    }
    case kSamplingRateCommand: {
      mutable_sampling_rate_command()->::opq::opqbox3::SetMeasturementRateCommand::MergeFrom(from.sampling_rate_command());
      break;
    }
    case kSendCommandToPlugin: {
      mutable_send_command_to_plugin()->::opq::opqbox3::SendCommandToPlugin::MergeFrom(from.send_command_to_plugin());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.opqbox3.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.opqbox3.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  identity_.Swap(&other->identity_);
  std::swap(seq_, other->seq_);
  std::swap(box_id_, other->box_id_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(command_, other->command_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// uint32 seq = 1;
void Command::clear_seq() {
  seq_ = 0u;
}
::google::protobuf::uint32 Command::seq() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.seq)
  return seq_;
}
void Command::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Command.seq)
}

// int32 box_id = 2;
void Command::clear_box_id() {
  box_id_ = 0;
}
::google::protobuf::int32 Command::box_id() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.box_id)
  return box_id_;
}
void Command::set_box_id(::google::protobuf::int32 value) {
  
  box_id_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Command.box_id)
}

// uint64 timestamp_ms = 3;
void Command::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Command::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.timestamp_ms)
  return timestamp_ms_;
}
void Command::set_timestamp_ms(::google::protobuf::uint64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Command.timestamp_ms)
}

// string identity = 4;
void Command::clear_identity() {
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Command::identity() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.identity)
  return identity_.GetNoArena();
}
void Command::set_identity(const ::std::string& value) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.Command.identity)
}
#if LANG_CXX11
void Command::set_identity(::std::string&& value) {
  
  identity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.Command.identity)
}
#endif
void Command::set_identity(const char* value) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.Command.identity)
}
void Command::set_identity(const char* value, size_t size) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.Command.identity)
}
::std::string* Command::mutable_identity() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Command.identity)
  return identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Command::release_identity() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Command.identity)
  
  return identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Command::set_allocated_identity(::std::string* identity) {
  if (identity != NULL) {
    
  } else {
    
  }
  identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.Command.identity)
}

// .opq.opqbox3.GetInfoCommand info_command = 5;
bool Command::has_info_command() const {
  return command_case() == kInfoCommand;
}
void Command::set_has_info_command() {
  _oneof_case_[0] = kInfoCommand;
}
void Command::clear_info_command() {
  if (has_info_command()) {
    delete command_.info_command_;
    clear_has_command();
  }
}
 const ::opq::opqbox3::GetInfoCommand& Command::info_command() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.info_command)
  return has_info_command()
      ? *command_.info_command_
      : ::opq::opqbox3::GetInfoCommand::default_instance();
}
::opq::opqbox3::GetInfoCommand* Command::mutable_info_command() {
  if (!has_info_command()) {
    clear_command();
    set_has_info_command();
    command_.info_command_ = new ::opq::opqbox3::GetInfoCommand;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Command.info_command)
  return command_.info_command_;
}
::opq::opqbox3::GetInfoCommand* Command::release_info_command() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Command.info_command)
  if (has_info_command()) {
    clear_has_command();
    ::opq::opqbox3::GetInfoCommand* temp = command_.info_command_;
    command_.info_command_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_info_command(::opq::opqbox3::GetInfoCommand* info_command) {
  clear_command();
  if (info_command) {
    set_has_info_command();
    command_.info_command_ = info_command;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.Command.info_command)
}

// .opq.opqbox3.GetDataCommand data_command = 6;
bool Command::has_data_command() const {
  return command_case() == kDataCommand;
}
void Command::set_has_data_command() {
  _oneof_case_[0] = kDataCommand;
}
void Command::clear_data_command() {
  if (has_data_command()) {
    delete command_.data_command_;
    clear_has_command();
  }
}
 const ::opq::opqbox3::GetDataCommand& Command::data_command() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.data_command)
  return has_data_command()
      ? *command_.data_command_
      : ::opq::opqbox3::GetDataCommand::default_instance();
}
::opq::opqbox3::GetDataCommand* Command::mutable_data_command() {
  if (!has_data_command()) {
    clear_command();
    set_has_data_command();
    command_.data_command_ = new ::opq::opqbox3::GetDataCommand;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Command.data_command)
  return command_.data_command_;
}
::opq::opqbox3::GetDataCommand* Command::release_data_command() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Command.data_command)
  if (has_data_command()) {
    clear_has_command();
    ::opq::opqbox3::GetDataCommand* temp = command_.data_command_;
    command_.data_command_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_data_command(::opq::opqbox3::GetDataCommand* data_command) {
  clear_command();
  if (data_command) {
    set_has_data_command();
    command_.data_command_ = data_command;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.Command.data_command)
}

// .opq.opqbox3.SetMeasturementRateCommand sampling_rate_command = 7;
bool Command::has_sampling_rate_command() const {
  return command_case() == kSamplingRateCommand;
}
void Command::set_has_sampling_rate_command() {
  _oneof_case_[0] = kSamplingRateCommand;
}
void Command::clear_sampling_rate_command() {
  if (has_sampling_rate_command()) {
    delete command_.sampling_rate_command_;
    clear_has_command();
  }
}
 const ::opq::opqbox3::SetMeasturementRateCommand& Command::sampling_rate_command() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.sampling_rate_command)
  return has_sampling_rate_command()
      ? *command_.sampling_rate_command_
      : ::opq::opqbox3::SetMeasturementRateCommand::default_instance();
}
::opq::opqbox3::SetMeasturementRateCommand* Command::mutable_sampling_rate_command() {
  if (!has_sampling_rate_command()) {
    clear_command();
    set_has_sampling_rate_command();
    command_.sampling_rate_command_ = new ::opq::opqbox3::SetMeasturementRateCommand;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Command.sampling_rate_command)
  return command_.sampling_rate_command_;
}
::opq::opqbox3::SetMeasturementRateCommand* Command::release_sampling_rate_command() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Command.sampling_rate_command)
  if (has_sampling_rate_command()) {
    clear_has_command();
    ::opq::opqbox3::SetMeasturementRateCommand* temp = command_.sampling_rate_command_;
    command_.sampling_rate_command_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_sampling_rate_command(::opq::opqbox3::SetMeasturementRateCommand* sampling_rate_command) {
  clear_command();
  if (sampling_rate_command) {
    set_has_sampling_rate_command();
    command_.sampling_rate_command_ = sampling_rate_command;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.Command.sampling_rate_command)
}

// .opq.opqbox3.SendCommandToPlugin send_command_to_plugin = 8;
bool Command::has_send_command_to_plugin() const {
  return command_case() == kSendCommandToPlugin;
}
void Command::set_has_send_command_to_plugin() {
  _oneof_case_[0] = kSendCommandToPlugin;
}
void Command::clear_send_command_to_plugin() {
  if (has_send_command_to_plugin()) {
    delete command_.send_command_to_plugin_;
    clear_has_command();
  }
}
 const ::opq::opqbox3::SendCommandToPlugin& Command::send_command_to_plugin() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Command.send_command_to_plugin)
  return has_send_command_to_plugin()
      ? *command_.send_command_to_plugin_
      : ::opq::opqbox3::SendCommandToPlugin::default_instance();
}
::opq::opqbox3::SendCommandToPlugin* Command::mutable_send_command_to_plugin() {
  if (!has_send_command_to_plugin()) {
    clear_command();
    set_has_send_command_to_plugin();
    command_.send_command_to_plugin_ = new ::opq::opqbox3::SendCommandToPlugin;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Command.send_command_to_plugin)
  return command_.send_command_to_plugin_;
}
::opq::opqbox3::SendCommandToPlugin* Command::release_send_command_to_plugin() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Command.send_command_to_plugin)
  if (has_send_command_to_plugin()) {
    clear_has_command();
    ::opq::opqbox3::SendCommandToPlugin* temp = command_.send_command_to_plugin_;
    command_.send_command_to_plugin_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_send_command_to_plugin(::opq::opqbox3::SendCommandToPlugin* send_command_to_plugin) {
  clear_command();
  if (send_command_to_plugin) {
    set_has_send_command_to_plugin();
    command_.send_command_to_plugin_ = send_command_to_plugin;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.Command.send_command_to_plugin)
}

bool Command::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
void Command::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
Command::CommandCase Command::command_case() const {
  return Command::CommandCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInfoResponse::kMacAddrFieldNumber;
const int GetInfoResponse::kWifiNetworkFieldNumber;
const int GetInfoResponse::kIpFieldNumber;
const int GetInfoResponse::kUptimeFieldNumber;
const int GetInfoResponse::kCalibrationConstantFieldNumber;
const int GetInfoResponse::kPubKeyFieldNumber;
const int GetInfoResponse::kMeasurementRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInfoResponse::GetInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_opqbox3_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.opqbox3.GetInfoResponse)
}
GetInfoResponse::GetInfoResponse(const GetInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mac_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac_addr().size() > 0) {
    mac_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_addr_);
  }
  wifi_network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.wifi_network().size() > 0) {
    wifi_network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wifi_network_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  pub_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pub_key().size() > 0) {
    pub_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  ::memcpy(&uptime_, &from.uptime_,
    reinterpret_cast<char*>(&measurement_rate_) -
    reinterpret_cast<char*>(&uptime_) + sizeof(measurement_rate_));
  // @@protoc_insertion_point(copy_constructor:opq.opqbox3.GetInfoResponse)
}

void GetInfoResponse::SharedCtor() {
  mac_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wifi_network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pub_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uptime_, 0, reinterpret_cast<char*>(&measurement_rate_) -
    reinterpret_cast<char*>(&uptime_) + sizeof(measurement_rate_));
  _cached_size_ = 0;
}

GetInfoResponse::~GetInfoResponse() {
  // @@protoc_insertion_point(destructor:opq.opqbox3.GetInfoResponse)
  SharedDtor();
}

void GetInfoResponse::SharedDtor() {
  mac_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wifi_network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pub_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfoResponse::descriptor() {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[8].descriptor;
}

const GetInfoResponse& GetInfoResponse::default_instance() {
  protobuf_opqbox3_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetInfoResponse* GetInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetInfoResponse* n = new GetInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.opqbox3.GetInfoResponse)
  mac_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wifi_network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uptime_, 0, reinterpret_cast<char*>(&measurement_rate_) -
    reinterpret_cast<char*>(&uptime_) + sizeof(measurement_rate_));
}

bool GetInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.opqbox3.GetInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string mac_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac_addr().data(), this->mac_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.opqbox3.GetInfoResponse.mac_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string wifi_network = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wifi_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wifi_network().data(), this->wifi_network().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.opqbox3.GetInfoResponse.wifi_network"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.opqbox3.GetInfoResponse.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uptime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 calibration_constant = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &calibration_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pub_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pub_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pub_key().data(), this->pub_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.opqbox3.GetInfoResponse.pub_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 measurement_rate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &measurement_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.opqbox3.GetInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.opqbox3.GetInfoResponse)
  return false;
#undef DO_
}

void GetInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.opqbox3.GetInfoResponse)
  // string mac_addr = 1;
  if (this->mac_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.GetInfoResponse.mac_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mac_addr(), output);
  }

  // string wifi_network = 2;
  if (this->wifi_network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wifi_network().data(), this->wifi_network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.GetInfoResponse.wifi_network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wifi_network(), output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.GetInfoResponse.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // uint64 uptime = 4;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uptime(), output);
  }

  // uint64 calibration_constant = 5;
  if (this->calibration_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->calibration_constant(), output);
  }

  // string pub_key = 6;
  if (this->pub_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pub_key().data(), this->pub_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.GetInfoResponse.pub_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pub_key(), output);
  }

  // uint32 measurement_rate = 7;
  if (this->measurement_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->measurement_rate(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.opqbox3.GetInfoResponse)
}

::google::protobuf::uint8* GetInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:opq.opqbox3.GetInfoResponse)
  // string mac_addr = 1;
  if (this->mac_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.GetInfoResponse.mac_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mac_addr(), target);
  }

  // string wifi_network = 2;
  if (this->wifi_network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wifi_network().data(), this->wifi_network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.GetInfoResponse.wifi_network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wifi_network(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.GetInfoResponse.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // uint64 uptime = 4;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uptime(), target);
  }

  // uint64 calibration_constant = 5;
  if (this->calibration_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->calibration_constant(), target);
  }

  // string pub_key = 6;
  if (this->pub_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pub_key().data(), this->pub_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.opqbox3.GetInfoResponse.pub_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pub_key(), target);
  }

  // uint32 measurement_rate = 7;
  if (this->measurement_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->measurement_rate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.opqbox3.GetInfoResponse)
  return target;
}

size_t GetInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opq.opqbox3.GetInfoResponse)
  size_t total_size = 0;

  // string mac_addr = 1;
  if (this->mac_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac_addr());
  }

  // string wifi_network = 2;
  if (this->wifi_network().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wifi_network());
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string pub_key = 6;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pub_key());
  }

  // uint64 uptime = 4;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uptime());
  }

  // uint64 calibration_constant = 5;
  if (this->calibration_constant() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->calibration_constant());
  }

  // uint32 measurement_rate = 7;
  if (this->measurement_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->measurement_rate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.opqbox3.GetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.opqbox3.GetInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.opqbox3.GetInfoResponse)
    MergeFrom(*source);
  }
}

void GetInfoResponse::MergeFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.opqbox3.GetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.mac_addr().size() > 0) {

    mac_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_addr_);
  }
  if (from.wifi_network().size() > 0) {

    wifi_network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wifi_network_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.calibration_constant() != 0) {
    set_calibration_constant(from.calibration_constant());
  }
  if (from.measurement_rate() != 0) {
    set_measurement_rate(from.measurement_rate());
  }
}

void GetInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.opqbox3.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoResponse::CopyFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.opqbox3.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoResponse::IsInitialized() const {
  return true;
}

void GetInfoResponse::Swap(GetInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInfoResponse::InternalSwap(GetInfoResponse* other) {
  mac_addr_.Swap(&other->mac_addr_);
  wifi_network_.Swap(&other->wifi_network_);
  ip_.Swap(&other->ip_);
  pub_key_.Swap(&other->pub_key_);
  std::swap(uptime_, other->uptime_);
  std::swap(calibration_constant_, other->calibration_constant_);
  std::swap(measurement_rate_, other->measurement_rate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInfoResponse::GetMetadata() const {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInfoResponse

// string mac_addr = 1;
void GetInfoResponse::clear_mac_addr() {
  mac_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetInfoResponse::mac_addr() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.mac_addr)
  return mac_addr_.GetNoArena();
}
void GetInfoResponse::set_mac_addr(const ::std::string& value) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.mac_addr)
}
#if LANG_CXX11
void GetInfoResponse::set_mac_addr(::std::string&& value) {
  
  mac_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.GetInfoResponse.mac_addr)
}
#endif
void GetInfoResponse::set_mac_addr(const char* value) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.GetInfoResponse.mac_addr)
}
void GetInfoResponse::set_mac_addr(const char* value, size_t size) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.GetInfoResponse.mac_addr)
}
::std::string* GetInfoResponse::mutable_mac_addr() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.GetInfoResponse.mac_addr)
  return mac_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInfoResponse::release_mac_addr() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.GetInfoResponse.mac_addr)
  
  return mac_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInfoResponse::set_allocated_mac_addr(::std::string* mac_addr) {
  if (mac_addr != NULL) {
    
  } else {
    
  }
  mac_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_addr);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.GetInfoResponse.mac_addr)
}

// string wifi_network = 2;
void GetInfoResponse::clear_wifi_network() {
  wifi_network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetInfoResponse::wifi_network() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.wifi_network)
  return wifi_network_.GetNoArena();
}
void GetInfoResponse::set_wifi_network(const ::std::string& value) {
  
  wifi_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.wifi_network)
}
#if LANG_CXX11
void GetInfoResponse::set_wifi_network(::std::string&& value) {
  
  wifi_network_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.GetInfoResponse.wifi_network)
}
#endif
void GetInfoResponse::set_wifi_network(const char* value) {
  
  wifi_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.GetInfoResponse.wifi_network)
}
void GetInfoResponse::set_wifi_network(const char* value, size_t size) {
  
  wifi_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.GetInfoResponse.wifi_network)
}
::std::string* GetInfoResponse::mutable_wifi_network() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.GetInfoResponse.wifi_network)
  return wifi_network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInfoResponse::release_wifi_network() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.GetInfoResponse.wifi_network)
  
  return wifi_network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInfoResponse::set_allocated_wifi_network(::std::string* wifi_network) {
  if (wifi_network != NULL) {
    
  } else {
    
  }
  wifi_network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifi_network);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.GetInfoResponse.wifi_network)
}

// string ip = 3;
void GetInfoResponse::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetInfoResponse::ip() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.ip)
  return ip_.GetNoArena();
}
void GetInfoResponse::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.ip)
}
#if LANG_CXX11
void GetInfoResponse::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.GetInfoResponse.ip)
}
#endif
void GetInfoResponse::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.GetInfoResponse.ip)
}
void GetInfoResponse::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.GetInfoResponse.ip)
}
::std::string* GetInfoResponse::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.GetInfoResponse.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInfoResponse::release_ip() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.GetInfoResponse.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInfoResponse::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.GetInfoResponse.ip)
}

// uint64 uptime = 4;
void GetInfoResponse::clear_uptime() {
  uptime_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetInfoResponse::uptime() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.uptime)
  return uptime_;
}
void GetInfoResponse::set_uptime(::google::protobuf::uint64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.uptime)
}

// uint64 calibration_constant = 5;
void GetInfoResponse::clear_calibration_constant() {
  calibration_constant_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetInfoResponse::calibration_constant() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.calibration_constant)
  return calibration_constant_;
}
void GetInfoResponse::set_calibration_constant(::google::protobuf::uint64 value) {
  
  calibration_constant_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.calibration_constant)
}

// string pub_key = 6;
void GetInfoResponse::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetInfoResponse::pub_key() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.pub_key)
  return pub_key_.GetNoArena();
}
void GetInfoResponse::set_pub_key(const ::std::string& value) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.pub_key)
}
#if LANG_CXX11
void GetInfoResponse::set_pub_key(::std::string&& value) {
  
  pub_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opq.opqbox3.GetInfoResponse.pub_key)
}
#endif
void GetInfoResponse::set_pub_key(const char* value) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.opqbox3.GetInfoResponse.pub_key)
}
void GetInfoResponse::set_pub_key(const char* value, size_t size) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.opqbox3.GetInfoResponse.pub_key)
}
::std::string* GetInfoResponse::mutable_pub_key() {
  
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.GetInfoResponse.pub_key)
  return pub_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInfoResponse::release_pub_key() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.GetInfoResponse.pub_key)
  
  return pub_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInfoResponse::set_allocated_pub_key(::std::string* pub_key) {
  if (pub_key != NULL) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.GetInfoResponse.pub_key)
}

// uint32 measurement_rate = 7;
void GetInfoResponse::clear_measurement_rate() {
  measurement_rate_ = 0u;
}
::google::protobuf::uint32 GetInfoResponse::measurement_rate() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetInfoResponse.measurement_rate)
  return measurement_rate_;
}
void GetInfoResponse::set_measurement_rate(::google::protobuf::uint32 value) {
  
  measurement_rate_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetInfoResponse.measurement_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMeasurementRateResponse::kOldRateCyclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMeasurementRateResponse::SetMeasurementRateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_opqbox3_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.opqbox3.SetMeasurementRateResponse)
}
SetMeasurementRateResponse::SetMeasurementRateResponse(const SetMeasurementRateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  old_rate_cycles_ = from.old_rate_cycles_;
  // @@protoc_insertion_point(copy_constructor:opq.opqbox3.SetMeasurementRateResponse)
}

void SetMeasurementRateResponse::SharedCtor() {
  old_rate_cycles_ = 0u;
  _cached_size_ = 0;
}

SetMeasurementRateResponse::~SetMeasurementRateResponse() {
  // @@protoc_insertion_point(destructor:opq.opqbox3.SetMeasurementRateResponse)
  SharedDtor();
}

void SetMeasurementRateResponse::SharedDtor() {
}

void SetMeasurementRateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetMeasurementRateResponse::descriptor() {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[9].descriptor;
}

const SetMeasurementRateResponse& SetMeasurementRateResponse::default_instance() {
  protobuf_opqbox3_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetMeasurementRateResponse* SetMeasurementRateResponse::New(::google::protobuf::Arena* arena) const {
  SetMeasurementRateResponse* n = new SetMeasurementRateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetMeasurementRateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.opqbox3.SetMeasurementRateResponse)
  old_rate_cycles_ = 0u;
}

bool SetMeasurementRateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.opqbox3.SetMeasurementRateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 old_rate_cycles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_rate_cycles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.opqbox3.SetMeasurementRateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.opqbox3.SetMeasurementRateResponse)
  return false;
#undef DO_
}

void SetMeasurementRateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.opqbox3.SetMeasurementRateResponse)
  // uint32 old_rate_cycles = 1;
  if (this->old_rate_cycles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->old_rate_cycles(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.opqbox3.SetMeasurementRateResponse)
}

::google::protobuf::uint8* SetMeasurementRateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:opq.opqbox3.SetMeasurementRateResponse)
  // uint32 old_rate_cycles = 1;
  if (this->old_rate_cycles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->old_rate_cycles(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.opqbox3.SetMeasurementRateResponse)
  return target;
}

size_t SetMeasurementRateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opq.opqbox3.SetMeasurementRateResponse)
  size_t total_size = 0;

  // uint32 old_rate_cycles = 1;
  if (this->old_rate_cycles() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->old_rate_cycles());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetMeasurementRateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.opqbox3.SetMeasurementRateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMeasurementRateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetMeasurementRateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.opqbox3.SetMeasurementRateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.opqbox3.SetMeasurementRateResponse)
    MergeFrom(*source);
  }
}

void SetMeasurementRateResponse::MergeFrom(const SetMeasurementRateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.opqbox3.SetMeasurementRateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.old_rate_cycles() != 0) {
    set_old_rate_cycles(from.old_rate_cycles());
  }
}

void SetMeasurementRateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.opqbox3.SetMeasurementRateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMeasurementRateResponse::CopyFrom(const SetMeasurementRateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.opqbox3.SetMeasurementRateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMeasurementRateResponse::IsInitialized() const {
  return true;
}

void SetMeasurementRateResponse::Swap(SetMeasurementRateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMeasurementRateResponse::InternalSwap(SetMeasurementRateResponse* other) {
  std::swap(old_rate_cycles_, other->old_rate_cycles_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetMeasurementRateResponse::GetMetadata() const {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetMeasurementRateResponse

// uint32 old_rate_cycles = 1;
void SetMeasurementRateResponse::clear_old_rate_cycles() {
  old_rate_cycles_ = 0u;
}
::google::protobuf::uint32 SetMeasurementRateResponse::old_rate_cycles() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.SetMeasurementRateResponse.old_rate_cycles)
  return old_rate_cycles_;
}
void SetMeasurementRateResponse::set_old_rate_cycles(::google::protobuf::uint32 value) {
  
  old_rate_cycles_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.SetMeasurementRateResponse.old_rate_cycles)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDataResponseHeader::kStartTsFieldNumber;
const int GetDataResponseHeader::kEndTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDataResponseHeader::GetDataResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_opqbox3_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.opqbox3.GetDataResponseHeader)
}
GetDataResponseHeader::GetDataResponseHeader(const GetDataResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_ts_, &from.start_ts_,
    reinterpret_cast<char*>(&end_ts_) -
    reinterpret_cast<char*>(&start_ts_) + sizeof(end_ts_));
  // @@protoc_insertion_point(copy_constructor:opq.opqbox3.GetDataResponseHeader)
}

void GetDataResponseHeader::SharedCtor() {
  ::memset(&start_ts_, 0, reinterpret_cast<char*>(&end_ts_) -
    reinterpret_cast<char*>(&start_ts_) + sizeof(end_ts_));
  _cached_size_ = 0;
}

GetDataResponseHeader::~GetDataResponseHeader() {
  // @@protoc_insertion_point(destructor:opq.opqbox3.GetDataResponseHeader)
  SharedDtor();
}

void GetDataResponseHeader::SharedDtor() {
}

void GetDataResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDataResponseHeader::descriptor() {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[10].descriptor;
}

const GetDataResponseHeader& GetDataResponseHeader::default_instance() {
  protobuf_opqbox3_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDataResponseHeader* GetDataResponseHeader::New(::google::protobuf::Arena* arena) const {
  GetDataResponseHeader* n = new GetDataResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDataResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.opqbox3.GetDataResponseHeader)
  ::memset(&start_ts_, 0, reinterpret_cast<char*>(&end_ts_) -
    reinterpret_cast<char*>(&start_ts_) + sizeof(end_ts_));
}

bool GetDataResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.opqbox3.GetDataResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_ts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 end_ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.opqbox3.GetDataResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.opqbox3.GetDataResponseHeader)
  return false;
#undef DO_
}

void GetDataResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.opqbox3.GetDataResponseHeader)
  // uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_ts(), output);
  }

  // uint64 end_ts = 2;
  if (this->end_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_ts(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.opqbox3.GetDataResponseHeader)
}

::google::protobuf::uint8* GetDataResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:opq.opqbox3.GetDataResponseHeader)
  // uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_ts(), target);
  }

  // uint64 end_ts = 2;
  if (this->end_ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_ts(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.opqbox3.GetDataResponseHeader)
  return target;
}

size_t GetDataResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opq.opqbox3.GetDataResponseHeader)
  size_t total_size = 0;

  // uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_ts());
  }

  // uint64 end_ts = 2;
  if (this->end_ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDataResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.opqbox3.GetDataResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDataResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDataResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.opqbox3.GetDataResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.opqbox3.GetDataResponseHeader)
    MergeFrom(*source);
  }
}

void GetDataResponseHeader::MergeFrom(const GetDataResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.opqbox3.GetDataResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.start_ts() != 0) {
    set_start_ts(from.start_ts());
  }
  if (from.end_ts() != 0) {
    set_end_ts(from.end_ts());
  }
}

void GetDataResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.opqbox3.GetDataResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataResponseHeader::CopyFrom(const GetDataResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.opqbox3.GetDataResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataResponseHeader::IsInitialized() const {
  return true;
}

void GetDataResponseHeader::Swap(GetDataResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDataResponseHeader::InternalSwap(GetDataResponseHeader* other) {
  std::swap(start_ts_, other->start_ts_);
  std::swap(end_ts_, other->end_ts_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDataResponseHeader::GetMetadata() const {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDataResponseHeader

// uint64 start_ts = 1;
void GetDataResponseHeader::clear_start_ts() {
  start_ts_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetDataResponseHeader::start_ts() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetDataResponseHeader.start_ts)
  return start_ts_;
}
void GetDataResponseHeader::set_start_ts(::google::protobuf::uint64 value) {
  
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetDataResponseHeader.start_ts)
}

// uint64 end_ts = 2;
void GetDataResponseHeader::clear_end_ts() {
  end_ts_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetDataResponseHeader::end_ts() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.GetDataResponseHeader.end_ts)
  return end_ts_;
}
void GetDataResponseHeader::set_end_ts(::google::protobuf::uint64 value) {
  
  end_ts_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.GetDataResponseHeader.end_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendCommandToPluginResponse::kOkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendCommandToPluginResponse::SendCommandToPluginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_opqbox3_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.opqbox3.SendCommandToPluginResponse)
}
SendCommandToPluginResponse::SendCommandToPluginResponse(const SendCommandToPluginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:opq.opqbox3.SendCommandToPluginResponse)
}

void SendCommandToPluginResponse::SharedCtor() {
  ok_ = false;
  _cached_size_ = 0;
}

SendCommandToPluginResponse::~SendCommandToPluginResponse() {
  // @@protoc_insertion_point(destructor:opq.opqbox3.SendCommandToPluginResponse)
  SharedDtor();
}

void SendCommandToPluginResponse::SharedDtor() {
}

void SendCommandToPluginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendCommandToPluginResponse::descriptor() {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[11].descriptor;
}

const SendCommandToPluginResponse& SendCommandToPluginResponse::default_instance() {
  protobuf_opqbox3_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendCommandToPluginResponse* SendCommandToPluginResponse::New(::google::protobuf::Arena* arena) const {
  SendCommandToPluginResponse* n = new SendCommandToPluginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendCommandToPluginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.opqbox3.SendCommandToPluginResponse)
  ok_ = false;
}

bool SendCommandToPluginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.opqbox3.SendCommandToPluginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool ok = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.opqbox3.SendCommandToPluginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.opqbox3.SendCommandToPluginResponse)
  return false;
#undef DO_
}

void SendCommandToPluginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.opqbox3.SendCommandToPluginResponse)
  // bool ok = 1;
  if (this->ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ok(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.opqbox3.SendCommandToPluginResponse)
}

::google::protobuf::uint8* SendCommandToPluginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:opq.opqbox3.SendCommandToPluginResponse)
  // bool ok = 1;
  if (this->ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ok(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.opqbox3.SendCommandToPluginResponse)
  return target;
}

size_t SendCommandToPluginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opq.opqbox3.SendCommandToPluginResponse)
  size_t total_size = 0;

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendCommandToPluginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.opqbox3.SendCommandToPluginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendCommandToPluginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendCommandToPluginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.opqbox3.SendCommandToPluginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.opqbox3.SendCommandToPluginResponse)
    MergeFrom(*source);
  }
}

void SendCommandToPluginResponse::MergeFrom(const SendCommandToPluginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.opqbox3.SendCommandToPluginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ok() != 0) {
    set_ok(from.ok());
  }
}

void SendCommandToPluginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.opqbox3.SendCommandToPluginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCommandToPluginResponse::CopyFrom(const SendCommandToPluginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.opqbox3.SendCommandToPluginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCommandToPluginResponse::IsInitialized() const {
  return true;
}

void SendCommandToPluginResponse::Swap(SendCommandToPluginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendCommandToPluginResponse::InternalSwap(SendCommandToPluginResponse* other) {
  std::swap(ok_, other->ok_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendCommandToPluginResponse::GetMetadata() const {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendCommandToPluginResponse

// bool ok = 1;
void SendCommandToPluginResponse::clear_ok() {
  ok_ = false;
}
bool SendCommandToPluginResponse::ok() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.SendCommandToPluginResponse.ok)
  return ok_;
}
void SendCommandToPluginResponse::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.SendCommandToPluginResponse.ok)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kBoxIdFieldNumber;
const int Response::kSeqFieldNumber;
const int Response::kTimestampMsFieldNumber;
const int Response::kInfoResponseFieldNumber;
const int Response::kMessageRateReponseFieldNumber;
const int Response::kGetDataResponseFieldNumber;
const int Response::kCommandToPluginResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_opqbox3_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.opqbox3.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&box_id_, &from.box_id_,
    reinterpret_cast<char*>(&timestamp_ms_) -
    reinterpret_cast<char*>(&box_id_) + sizeof(timestamp_ms_));
  clear_has_response();
  switch (from.response_case()) {
    case kInfoResponse: {
      mutable_info_response()->::opq::opqbox3::GetInfoResponse::MergeFrom(from.info_response());
      break;
    }
    case kMessageRateReponse: {
      mutable_message_rate_reponse()->::opq::opqbox3::SetMeasurementRateResponse::MergeFrom(from.message_rate_reponse());
      break;
    }
    case kGetDataResponse: {
      mutable_get_data_response()->::opq::opqbox3::GetDataResponseHeader::MergeFrom(from.get_data_response());
      break;
    }
    case kCommandToPluginResponse: {
      mutable_command_to_plugin_response()->::opq::opqbox3::SendCommandToPluginResponse::MergeFrom(from.command_to_plugin_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opq.opqbox3.Response)
}

void Response::SharedCtor() {
  ::memset(&box_id_, 0, reinterpret_cast<char*>(&timestamp_ms_) -
    reinterpret_cast<char*>(&box_id_) + sizeof(timestamp_ms_));
  clear_has_response();
  _cached_size_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:opq.opqbox3.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (has_response()) {
    clear_response();
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[12].descriptor;
}

const Response& Response::default_instance() {
  protobuf_opqbox3_2eproto::InitDefaults();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:opq.opqbox3.Response)
  switch (response_case()) {
    case kInfoResponse: {
      delete response_.info_response_;
      break;
    }
    case kMessageRateReponse: {
      delete response_.message_rate_reponse_;
      break;
    }
    case kGetDataResponse: {
      delete response_.get_data_response_;
      break;
    }
    case kCommandToPluginResponse: {
      delete response_.command_to_plugin_response_;
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.opqbox3.Response)
  ::memset(&box_id_, 0, reinterpret_cast<char*>(&timestamp_ms_) -
    reinterpret_cast<char*>(&box_id_) + sizeof(timestamp_ms_));
  clear_response();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.opqbox3.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 box_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opq.opqbox3.GetInfoResponse info_response = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opq.opqbox3.SetMeasurementRateResponse message_rate_reponse = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message_rate_reponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opq.opqbox3.GetDataResponseHeader get_data_response = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_data_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .opq.opqbox3.SendCommandToPluginResponse command_to_plugin_response = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_to_plugin_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.opqbox3.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.opqbox3.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.opqbox3.Response)
  // int32 box_id = 1;
  if (this->box_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->box_id(), output);
  }

  // uint32 seq = 2;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seq(), output);
  }

  // uint64 timestamp_ms = 3;
  if (this->timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp_ms(), output);
  }

  // .opq.opqbox3.GetInfoResponse info_response = 4;
  if (has_info_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *response_.info_response_, output);
  }

  // .opq.opqbox3.SetMeasurementRateResponse message_rate_reponse = 5;
  if (has_message_rate_reponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *response_.message_rate_reponse_, output);
  }

  // .opq.opqbox3.GetDataResponseHeader get_data_response = 6;
  if (has_get_data_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *response_.get_data_response_, output);
  }

  // .opq.opqbox3.SendCommandToPluginResponse command_to_plugin_response = 7;
  if (has_command_to_plugin_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *response_.command_to_plugin_response_, output);
  }

  // @@protoc_insertion_point(serialize_end:opq.opqbox3.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:opq.opqbox3.Response)
  // int32 box_id = 1;
  if (this->box_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->box_id(), target);
  }

  // uint32 seq = 2;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq(), target);
  }

  // uint64 timestamp_ms = 3;
  if (this->timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp_ms(), target);
  }

  // .opq.opqbox3.GetInfoResponse info_response = 4;
  if (has_info_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *response_.info_response_, false, target);
  }

  // .opq.opqbox3.SetMeasurementRateResponse message_rate_reponse = 5;
  if (has_message_rate_reponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *response_.message_rate_reponse_, false, target);
  }

  // .opq.opqbox3.GetDataResponseHeader get_data_response = 6;
  if (has_get_data_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *response_.get_data_response_, false, target);
  }

  // .opq.opqbox3.SendCommandToPluginResponse command_to_plugin_response = 7;
  if (has_command_to_plugin_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *response_.command_to_plugin_response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.opqbox3.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opq.opqbox3.Response)
  size_t total_size = 0;

  // int32 box_id = 1;
  if (this->box_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->box_id());
  }

  // uint32 seq = 2;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());
  }

  // uint64 timestamp_ms = 3;
  if (this->timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ms());
  }

  switch (response_case()) {
    // .opq.opqbox3.GetInfoResponse info_response = 4;
    case kInfoResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.info_response_);
      break;
    }
    // .opq.opqbox3.SetMeasurementRateResponse message_rate_reponse = 5;
    case kMessageRateReponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.message_rate_reponse_);
      break;
    }
    // .opq.opqbox3.GetDataResponseHeader get_data_response = 6;
    case kGetDataResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.get_data_response_);
      break;
    }
    // .opq.opqbox3.SendCommandToPluginResponse command_to_plugin_response = 7;
    case kCommandToPluginResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.command_to_plugin_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.opqbox3.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.opqbox3.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.opqbox3.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.opqbox3.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.box_id() != 0) {
    set_box_id(from.box_id());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.timestamp_ms() != 0) {
    set_timestamp_ms(from.timestamp_ms());
  }
  switch (from.response_case()) {
    case kInfoResponse: {
      mutable_info_response()->::opq::opqbox3::GetInfoResponse::MergeFrom(from.info_response());
      break;
    }
    case kMessageRateReponse: {
      mutable_message_rate_reponse()->::opq::opqbox3::SetMeasurementRateResponse::MergeFrom(from.message_rate_reponse());
      break;
    }
    case kGetDataResponse: {
      mutable_get_data_response()->::opq::opqbox3::GetDataResponseHeader::MergeFrom(from.get_data_response());
      break;
    }
    case kCommandToPluginResponse: {
      mutable_command_to_plugin_response()->::opq::opqbox3::SendCommandToPluginResponse::MergeFrom(from.command_to_plugin_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.opqbox3.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.opqbox3.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(box_id_, other->box_id_);
  std::swap(seq_, other->seq_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(response_, other->response_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// int32 box_id = 1;
void Response::clear_box_id() {
  box_id_ = 0;
}
::google::protobuf::int32 Response::box_id() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.box_id)
  return box_id_;
}
void Response::set_box_id(::google::protobuf::int32 value) {
  
  box_id_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Response.box_id)
}

// uint32 seq = 2;
void Response::clear_seq() {
  seq_ = 0u;
}
::google::protobuf::uint32 Response::seq() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.seq)
  return seq_;
}
void Response::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Response.seq)
}

// uint64 timestamp_ms = 3;
void Response::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Response::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.timestamp_ms)
  return timestamp_ms_;
}
void Response::set_timestamp_ms(::google::protobuf::uint64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Response.timestamp_ms)
}

// .opq.opqbox3.GetInfoResponse info_response = 4;
bool Response::has_info_response() const {
  return response_case() == kInfoResponse;
}
void Response::set_has_info_response() {
  _oneof_case_[0] = kInfoResponse;
}
void Response::clear_info_response() {
  if (has_info_response()) {
    delete response_.info_response_;
    clear_has_response();
  }
}
 const ::opq::opqbox3::GetInfoResponse& Response::info_response() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.info_response)
  return has_info_response()
      ? *response_.info_response_
      : ::opq::opqbox3::GetInfoResponse::default_instance();
}
::opq::opqbox3::GetInfoResponse* Response::mutable_info_response() {
  if (!has_info_response()) {
    clear_response();
    set_has_info_response();
    response_.info_response_ = new ::opq::opqbox3::GetInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Response.info_response)
  return response_.info_response_;
}
::opq::opqbox3::GetInfoResponse* Response::release_info_response() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Response.info_response)
  if (has_info_response()) {
    clear_has_response();
    ::opq::opqbox3::GetInfoResponse* temp = response_.info_response_;
    response_.info_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_info_response(::opq::opqbox3::GetInfoResponse* info_response) {
  clear_response();
  if (info_response) {
    set_has_info_response();
    response_.info_response_ = info_response;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.Response.info_response)
}

// .opq.opqbox3.SetMeasurementRateResponse message_rate_reponse = 5;
bool Response::has_message_rate_reponse() const {
  return response_case() == kMessageRateReponse;
}
void Response::set_has_message_rate_reponse() {
  _oneof_case_[0] = kMessageRateReponse;
}
void Response::clear_message_rate_reponse() {
  if (has_message_rate_reponse()) {
    delete response_.message_rate_reponse_;
    clear_has_response();
  }
}
 const ::opq::opqbox3::SetMeasurementRateResponse& Response::message_rate_reponse() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.message_rate_reponse)
  return has_message_rate_reponse()
      ? *response_.message_rate_reponse_
      : ::opq::opqbox3::SetMeasurementRateResponse::default_instance();
}
::opq::opqbox3::SetMeasurementRateResponse* Response::mutable_message_rate_reponse() {
  if (!has_message_rate_reponse()) {
    clear_response();
    set_has_message_rate_reponse();
    response_.message_rate_reponse_ = new ::opq::opqbox3::SetMeasurementRateResponse;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Response.message_rate_reponse)
  return response_.message_rate_reponse_;
}
::opq::opqbox3::SetMeasurementRateResponse* Response::release_message_rate_reponse() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Response.message_rate_reponse)
  if (has_message_rate_reponse()) {
    clear_has_response();
    ::opq::opqbox3::SetMeasurementRateResponse* temp = response_.message_rate_reponse_;
    response_.message_rate_reponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_message_rate_reponse(::opq::opqbox3::SetMeasurementRateResponse* message_rate_reponse) {
  clear_response();
  if (message_rate_reponse) {
    set_has_message_rate_reponse();
    response_.message_rate_reponse_ = message_rate_reponse;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.Response.message_rate_reponse)
}

// .opq.opqbox3.GetDataResponseHeader get_data_response = 6;
bool Response::has_get_data_response() const {
  return response_case() == kGetDataResponse;
}
void Response::set_has_get_data_response() {
  _oneof_case_[0] = kGetDataResponse;
}
void Response::clear_get_data_response() {
  if (has_get_data_response()) {
    delete response_.get_data_response_;
    clear_has_response();
  }
}
 const ::opq::opqbox3::GetDataResponseHeader& Response::get_data_response() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.get_data_response)
  return has_get_data_response()
      ? *response_.get_data_response_
      : ::opq::opqbox3::GetDataResponseHeader::default_instance();
}
::opq::opqbox3::GetDataResponseHeader* Response::mutable_get_data_response() {
  if (!has_get_data_response()) {
    clear_response();
    set_has_get_data_response();
    response_.get_data_response_ = new ::opq::opqbox3::GetDataResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Response.get_data_response)
  return response_.get_data_response_;
}
::opq::opqbox3::GetDataResponseHeader* Response::release_get_data_response() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Response.get_data_response)
  if (has_get_data_response()) {
    clear_has_response();
    ::opq::opqbox3::GetDataResponseHeader* temp = response_.get_data_response_;
    response_.get_data_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_get_data_response(::opq::opqbox3::GetDataResponseHeader* get_data_response) {
  clear_response();
  if (get_data_response) {
    set_has_get_data_response();
    response_.get_data_response_ = get_data_response;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.Response.get_data_response)
}

// .opq.opqbox3.SendCommandToPluginResponse command_to_plugin_response = 7;
bool Response::has_command_to_plugin_response() const {
  return response_case() == kCommandToPluginResponse;
}
void Response::set_has_command_to_plugin_response() {
  _oneof_case_[0] = kCommandToPluginResponse;
}
void Response::clear_command_to_plugin_response() {
  if (has_command_to_plugin_response()) {
    delete response_.command_to_plugin_response_;
    clear_has_response();
  }
}
 const ::opq::opqbox3::SendCommandToPluginResponse& Response::command_to_plugin_response() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Response.command_to_plugin_response)
  return has_command_to_plugin_response()
      ? *response_.command_to_plugin_response_
      : ::opq::opqbox3::SendCommandToPluginResponse::default_instance();
}
::opq::opqbox3::SendCommandToPluginResponse* Response::mutable_command_to_plugin_response() {
  if (!has_command_to_plugin_response()) {
    clear_response();
    set_has_command_to_plugin_response();
    response_.command_to_plugin_response_ = new ::opq::opqbox3::SendCommandToPluginResponse;
  }
  // @@protoc_insertion_point(field_mutable:opq.opqbox3.Response.command_to_plugin_response)
  return response_.command_to_plugin_response_;
}
::opq::opqbox3::SendCommandToPluginResponse* Response::release_command_to_plugin_response() {
  // @@protoc_insertion_point(field_release:opq.opqbox3.Response.command_to_plugin_response)
  if (has_command_to_plugin_response()) {
    clear_has_response();
    ::opq::opqbox3::SendCommandToPluginResponse* temp = response_.command_to_plugin_response_;
    response_.command_to_plugin_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_command_to_plugin_response(::opq::opqbox3::SendCommandToPluginResponse* command_to_plugin_response) {
  clear_response();
  if (command_to_plugin_response) {
    set_has_command_to_plugin_response();
    response_.command_to_plugin_response_ = command_to_plugin_response;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.opqbox3.Response.command_to_plugin_response)
}

bool Response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
void Response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
Response::ResponseCase Response::response_case() const {
  return Response::ResponseCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cycle::kDatapointsFieldNumber;
const int Cycle::kTimestampMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cycle::Cycle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_opqbox3_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.opqbox3.Cycle)
}
Cycle::Cycle(const Cycle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      datapoints_(from.datapoints_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ms_ = from.timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:opq.opqbox3.Cycle)
}

void Cycle::SharedCtor() {
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Cycle::~Cycle() {
  // @@protoc_insertion_point(destructor:opq.opqbox3.Cycle)
  SharedDtor();
}

void Cycle::SharedDtor() {
}

void Cycle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cycle::descriptor() {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[13].descriptor;
}

const Cycle& Cycle::default_instance() {
  protobuf_opqbox3_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cycle* Cycle::New(::google::protobuf::Arena* arena) const {
  Cycle* n = new Cycle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cycle::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.opqbox3.Cycle)
  datapoints_.Clear();
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
}

bool Cycle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.opqbox3.Cycle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 datapoints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_datapoints())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_datapoints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.opqbox3.Cycle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.opqbox3.Cycle)
  return false;
#undef DO_
}

void Cycle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.opqbox3.Cycle)
  // repeated int32 datapoints = 1;
  if (this->datapoints_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_datapoints_cached_byte_size_);
  }
  for (int i = 0, n = this->datapoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->datapoints(i), output);
  }

  // uint64 timestamp_ms = 2;
  if (this->timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp_ms(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.opqbox3.Cycle)
}

::google::protobuf::uint8* Cycle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:opq.opqbox3.Cycle)
  // repeated int32 datapoints = 1;
  if (this->datapoints_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _datapoints_cached_byte_size_, target);
  }
  for (int i = 0, n = this->datapoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->datapoints(i), target);
  }

  // uint64 timestamp_ms = 2;
  if (this->timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp_ms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.opqbox3.Cycle)
  return target;
}

size_t Cycle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opq.opqbox3.Cycle)
  size_t total_size = 0;

  // repeated int32 datapoints = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->datapoints_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _datapoints_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 timestamp_ms = 2;
  if (this->timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cycle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.opqbox3.Cycle)
  GOOGLE_DCHECK_NE(&from, this);
  const Cycle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cycle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.opqbox3.Cycle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.opqbox3.Cycle)
    MergeFrom(*source);
  }
}

void Cycle::MergeFrom(const Cycle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.opqbox3.Cycle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datapoints_.MergeFrom(from.datapoints_);
  if (from.timestamp_ms() != 0) {
    set_timestamp_ms(from.timestamp_ms());
  }
}

void Cycle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.opqbox3.Cycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cycle::CopyFrom(const Cycle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.opqbox3.Cycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cycle::IsInitialized() const {
  return true;
}

void Cycle::Swap(Cycle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cycle::InternalSwap(Cycle* other) {
  datapoints_.UnsafeArenaSwap(&other->datapoints_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cycle::GetMetadata() const {
  protobuf_opqbox3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_opqbox3_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cycle

// repeated int32 datapoints = 1;
int Cycle::datapoints_size() const {
  return datapoints_.size();
}
void Cycle::clear_datapoints() {
  datapoints_.Clear();
}
::google::protobuf::int32 Cycle::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Cycle.datapoints)
  return datapoints_.Get(index);
}
void Cycle::set_datapoints(int index, ::google::protobuf::int32 value) {
  datapoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:opq.opqbox3.Cycle.datapoints)
}
void Cycle::add_datapoints(::google::protobuf::int32 value) {
  datapoints_.Add(value);
  // @@protoc_insertion_point(field_add:opq.opqbox3.Cycle.datapoints)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Cycle::datapoints() const {
  // @@protoc_insertion_point(field_list:opq.opqbox3.Cycle.datapoints)
  return datapoints_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Cycle::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:opq.opqbox3.Cycle.datapoints)
  return &datapoints_;
}

// uint64 timestamp_ms = 2;
void Cycle::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Cycle::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:opq.opqbox3.Cycle.timestamp_ms)
  return timestamp_ms_;
}
void Cycle::set_timestamp_ms(::google::protobuf::uint64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.opqbox3.Cycle.timestamp_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace opqbox3
}  // namespace opq

// @@protoc_insertion_point(global_scope)
