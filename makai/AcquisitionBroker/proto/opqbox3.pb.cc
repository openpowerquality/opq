// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opqbox3.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "opqbox3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace opq {
namespace proto3 {

namespace {

const ::google::protobuf::Descriptor* Measurement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Measurement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Measurement_MetricsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetInfoCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInfoCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDataCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDataCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetMeasturementRateCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetMeasturementRateCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
struct CommandOneofInstance {
  const ::opq::proto3::GetInfoCommand* info_command_;
  const ::opq::proto3::GetDataCommand* data_command_;
  const ::opq::proto3::SetMeasturementRateCommand* sampling_rate_command_;
}* Command_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* GetInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetMeasurementRateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetMeasurementRateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDateResponseHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDateResponseHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
struct ResponseOneofInstance {
  const ::opq::proto3::GetInfoResponse* info_response_;
  const ::opq::proto3::SetMeasurementRateResponse* message_rate_reponse_;
  const ::opq::proto3::GetDateResponseHeader* get_data_response_;
}* Response_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_opqbox3_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_opqbox3_2eproto() {
  protobuf_AddDesc_opqbox3_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "opqbox3.proto");
  GOOGLE_CHECK(file != NULL);
  Measurement_descriptor_ = file->message_type(0);
  static const int Measurement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, timestamp_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, metrics_),
  };
  Measurement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Measurement_descriptor_,
      Measurement::default_instance_,
      Measurement_offsets_,
      -1,
      -1,
      -1,
      sizeof(Measurement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, _is_default_instance_));
  Measurement_MetricsEntry_descriptor_ = Measurement_descriptor_->nested_type(0);
  GetInfoCommand_descriptor_ = file->message_type(1);
  static const int GetInfoCommand_offsets_[1] = {
  };
  GetInfoCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetInfoCommand_descriptor_,
      GetInfoCommand::default_instance_,
      GetInfoCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetInfoCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoCommand, _is_default_instance_));
  GetDataCommand_descriptor_ = file->message_type(2);
  static const int GetDataCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataCommand, start_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataCommand, end_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataCommand, wait_),
  };
  GetDataCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetDataCommand_descriptor_,
      GetDataCommand::default_instance_,
      GetDataCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetDataCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataCommand, _is_default_instance_));
  SetMeasturementRateCommand_descriptor_ = file->message_type(3);
  static const int SetMeasturementRateCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMeasturementRateCommand, measurement_window_cycles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMeasturementRateCommand, duration_ms_),
  };
  SetMeasturementRateCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetMeasturementRateCommand_descriptor_,
      SetMeasturementRateCommand::default_instance_,
      SetMeasturementRateCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetMeasturementRateCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMeasturementRateCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMeasturementRateCommand, _is_default_instance_));
  Command_descriptor_ = file->message_type(4);
  static const int Command_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, timestamp_ms_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Command_default_oneof_instance_, info_command_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Command_default_oneof_instance_, data_command_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Command_default_oneof_instance_, sampling_rate_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, command_),
  };
  Command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      -1,
      -1,
      -1,
      Command_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _oneof_case_[0]),
      sizeof(Command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _is_default_instance_));
  GetInfoResponse_descriptor_ = file->message_type(5);
  static const int GetInfoResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, mac_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, wifi_network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, calibration_constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, pub_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, measurement_rate_),
  };
  GetInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetInfoResponse_descriptor_,
      GetInfoResponse::default_instance_,
      GetInfoResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, _is_default_instance_));
  SetMeasurementRateResponse_descriptor_ = file->message_type(6);
  static const int SetMeasurementRateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMeasurementRateResponse, old_rate_cycles_),
  };
  SetMeasurementRateResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetMeasurementRateResponse_descriptor_,
      SetMeasurementRateResponse::default_instance_,
      SetMeasurementRateResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetMeasurementRateResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMeasurementRateResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMeasurementRateResponse, _is_default_instance_));
  GetDateResponseHeader_descriptor_ = file->message_type(7);
  static const int GetDateResponseHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDateResponseHeader, start_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDateResponseHeader, end_ts_),
  };
  GetDateResponseHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetDateResponseHeader_descriptor_,
      GetDateResponseHeader::default_instance_,
      GetDateResponseHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetDateResponseHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDateResponseHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDateResponseHeader, _is_default_instance_));
  Response_descriptor_ = file->message_type(8);
  static const int Response_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, timestamp_ms_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, info_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, message_rate_reponse_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, get_data_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, response_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      Response_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _oneof_case_[0]),
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_opqbox3_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Measurement_descriptor_, &Measurement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Measurement_MetricsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            float,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
            0>::CreateDefaultInstance(
                Measurement_MetricsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetInfoCommand_descriptor_, &GetInfoCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetDataCommand_descriptor_, &GetDataCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetMeasturementRateCommand_descriptor_, &SetMeasturementRateCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetInfoResponse_descriptor_, &GetInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetMeasurementRateResponse_descriptor_, &SetMeasurementRateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetDateResponseHeader_descriptor_, &GetDateResponseHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_opqbox3_2eproto() {
  delete Measurement::default_instance_;
  delete Measurement_reflection_;
  delete GetInfoCommand::default_instance_;
  delete GetInfoCommand_reflection_;
  delete GetDataCommand::default_instance_;
  delete GetDataCommand_reflection_;
  delete SetMeasturementRateCommand::default_instance_;
  delete SetMeasturementRateCommand_reflection_;
  delete Command::default_instance_;
  delete Command_default_oneof_instance_;
  delete Command_reflection_;
  delete GetInfoResponse::default_instance_;
  delete GetInfoResponse_reflection_;
  delete SetMeasurementRateResponse::default_instance_;
  delete SetMeasurementRateResponse_reflection_;
  delete GetDateResponseHeader::default_instance_;
  delete GetDateResponseHeader_reflection_;
  delete Response::default_instance_;
  delete Response_default_oneof_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_opqbox3_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_opqbox3_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ropqbox3.proto\022\nopq.proto3\"\232\001\n\013Measurem"
    "ent\022\016\n\006box_id\030\001 \001(\r\022\024\n\014timestamp_ms\030\002 \001("
    "\004\0225\n\007metrics\030\003 \003(\0132$.opq.proto3.Measurem"
    "ent.MetricsEntry\032.\n\014MetricsEntry\022\013\n\003key\030"
    "\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\"\020\n\016GetInfoComma"
    "nd\"@\n\016GetDataCommand\022\020\n\010start_ms\030\001 \001(\004\022\016"
    "\n\006end_ms\030\002 \001(\004\022\014\n\004wait\030\003 \001(\010\"T\n\032SetMeast"
    "urementRateCommand\022!\n\031measurement_window"
    "_cycles\030\001 \001(\r\022\023\n\013duration_ms\030\002 \001(\r\"\375\001\n\007C"
    "ommand\022\016\n\006box_id\030\001 \001(\r\022\020\n\010identity\030\002 \001(\t"
    "\022\024\n\014timestamp_ms\030\003 \001(\004\0222\n\014info_command\030\004"
    " \001(\0132\032.opq.proto3.GetInfoCommandH\000\0222\n\014da"
    "ta_command\030\005 \001(\0132\032.opq.proto3.GetDataCom"
    "mandH\000\022G\n\025sampling_rate_command\030\006 \001(\0132&."
    "opq.proto3.SetMeasturementRateCommandH\000B"
    "\t\n\007command\"\236\001\n\017GetInfoResponse\022\020\n\010mac_ad"
    "dr\030\001 \001(\t\022\024\n\014wifi_network\030\002 \001(\t\022\n\n\002ip\030\003 \001"
    "(\t\022\016\n\006uptime\030\004 \001(\004\022\034\n\024calibration_consta"
    "nt\030\005 \001(\004\022\017\n\007pub_key\030\006 \001(\t\022\030\n\020measurement"
    "_rate\030\007 \001(\r\"5\n\032SetMeasurementRateRespons"
    "e\022\027\n\017old_rate_cycles\030\001 \001(\r\"9\n\025GetDateRes"
    "ponseHeader\022\020\n\010start_ts\030\001 \001(\004\022\016\n\006end_ts\030"
    "\002 \001(\004\"\207\002\n\010Response\022\016\n\006box_id\030\001 \001(\005\022\013\n\003se"
    "q\030\002 \001(\r\022\024\n\014timestamp_ms\030\003 \001(\004\0224\n\rinfo_re"
    "sponse\030\004 \001(\0132\033.opq.proto3.GetInfoRespons"
    "eH\000\022F\n\024message_rate_reponse\030\005 \001(\0132&.opq."
    "proto3.SetMeasurementRateResponseH\000\022>\n\021g"
    "et_data_response\030\006 \001(\0132!.opq.proto3.GetD"
    "ateResponseHeaderH\000B\n\n\010responseb\006proto3", 1159);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "opqbox3.proto", &protobuf_RegisterTypes);
  Measurement::default_instance_ = new Measurement();
  GetInfoCommand::default_instance_ = new GetInfoCommand();
  GetDataCommand::default_instance_ = new GetDataCommand();
  SetMeasturementRateCommand::default_instance_ = new SetMeasturementRateCommand();
  Command::default_instance_ = new Command();
  Command_default_oneof_instance_ = new CommandOneofInstance();
  GetInfoResponse::default_instance_ = new GetInfoResponse();
  SetMeasurementRateResponse::default_instance_ = new SetMeasurementRateResponse();
  GetDateResponseHeader::default_instance_ = new GetDateResponseHeader();
  Response::default_instance_ = new Response();
  Response_default_oneof_instance_ = new ResponseOneofInstance();
  Measurement::default_instance_->InitAsDefaultInstance();
  GetInfoCommand::default_instance_->InitAsDefaultInstance();
  GetDataCommand::default_instance_->InitAsDefaultInstance();
  SetMeasturementRateCommand::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  GetInfoResponse::default_instance_->InitAsDefaultInstance();
  SetMeasurementRateResponse::default_instance_->InitAsDefaultInstance();
  GetDateResponseHeader::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_opqbox3_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_opqbox3_2eproto {
  StaticDescriptorInitializer_opqbox3_2eproto() {
    protobuf_AddDesc_opqbox3_2eproto();
  }
} static_descriptor_initializer_opqbox3_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measurement::kBoxIdFieldNumber;
const int Measurement::kTimestampMsFieldNumber;
const int Measurement::kMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measurement::Measurement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto3.Measurement)
}

void Measurement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Measurement::Measurement(const Measurement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto3.Measurement)
}

void Measurement::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  box_id_ = 0u;
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
  metrics_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  metrics_.SetEntryDescriptor(
      &::opq::proto3::Measurement_MetricsEntry_descriptor_);
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:opq.proto3.Measurement)
  SharedDtor();
}

void Measurement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Measurement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Measurement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Measurement_descriptor_;
}

const Measurement& Measurement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opqbox3_2eproto();
  return *default_instance_;
}

Measurement* Measurement::default_instance_ = NULL;

Measurement* Measurement::New(::google::protobuf::Arena* arena) const {
  Measurement* n = new Measurement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto3.Measurement)
  box_id_ = 0u;
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
  metrics_.Clear();
}

bool Measurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto3.Measurement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 box_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &box_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp_ms;
        break;
      }

      // optional uint64 timestamp_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_metrics;
        break;
      }

      // map<string, float> metrics = 3;
      case 3: {
        if (tag == 26) {
         parse_metrics:
          DO_(input->IncrementRecursionDepth());
         parse_loop_metrics:
          Measurement_MetricsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&metrics_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.proto3.Measurement.MetricsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_metrics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto3.Measurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto3.Measurement)
  return false;
#undef DO_
}

void Measurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto3.Measurement)
  // optional uint32 box_id = 1;
  if (this->box_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->box_id(), output);
  }

  // optional uint64 timestamp_ms = 2;
  if (this->timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp_ms(), output);
  }

  // map<string, float> metrics = 3;
  if (!this->metrics().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "opq.proto3.Measurement.MetricsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->metrics().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metrics().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->metrics().begin();
          it != this->metrics().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Measurement_MetricsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metrics_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Measurement_MetricsEntry> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->metrics().begin();
          it != this->metrics().end(); ++it) {
        entry.reset(metrics_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:opq.proto3.Measurement)
}

::google::protobuf::uint8* Measurement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto3.Measurement)
  // optional uint32 box_id = 1;
  if (this->box_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->box_id(), target);
  }

  // optional uint64 timestamp_ms = 2;
  if (this->timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp_ms(), target);
  }

  // map<string, float> metrics = 3;
  if (!this->metrics().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "opq.proto3.Measurement.MetricsEntry.key");
      }
    };

    if (deterministic &&
        this->metrics().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metrics().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->metrics().begin();
          it != this->metrics().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Measurement_MetricsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metrics_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Measurement_MetricsEntry> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->metrics().begin();
          it != this->metrics().end(); ++it) {
        entry.reset(metrics_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.proto3.Measurement)
  return target;
}

int Measurement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto3.Measurement)
  int total_size = 0;

  // optional uint32 box_id = 1;
  if (this->box_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->box_id());
  }

  // optional uint64 timestamp_ms = 2;
  if (this->timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ms());
  }

  // map<string, float> metrics = 3;
  total_size += 1 * this->metrics_size();
  {
    ::google::protobuf::scoped_ptr<Measurement_MetricsEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->metrics().begin();
        it != this->metrics().end(); ++it) {
      entry.reset(metrics_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Measurement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto3.Measurement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Measurement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Measurement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto3.Measurement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto3.Measurement)
    MergeFrom(*source);
  }
}

void Measurement::MergeFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto3.Measurement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  metrics_.MergeFrom(from.metrics_);
  if (from.box_id() != 0) {
    set_box_id(from.box_id());
  }
  if (from.timestamp_ms() != 0) {
    set_timestamp_ms(from.timestamp_ms());
  }
}

void Measurement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto3.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measurement::CopyFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto3.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {

  return true;
}

void Measurement::Swap(Measurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Measurement::InternalSwap(Measurement* other) {
  std::swap(box_id_, other->box_id_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  metrics_.Swap(&other->metrics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Measurement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Measurement_descriptor_;
  metadata.reflection = Measurement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Measurement

// optional uint32 box_id = 1;
void Measurement::clear_box_id() {
  box_id_ = 0u;
}
 ::google::protobuf::uint32 Measurement::box_id() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Measurement.box_id)
  return box_id_;
}
 void Measurement::set_box_id(::google::protobuf::uint32 value) {
  
  box_id_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.Measurement.box_id)
}

// optional uint64 timestamp_ms = 2;
void Measurement::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Measurement::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Measurement.timestamp_ms)
  return timestamp_ms_;
}
 void Measurement::set_timestamp_ms(::google::protobuf::uint64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.Measurement.timestamp_ms)
}

// map<string, float> metrics = 3;
int Measurement::metrics_size() const {
  return metrics_.size();
}
void Measurement::clear_metrics() {
  metrics_.Clear();
}
 const ::google::protobuf::Map< ::std::string, float >&
Measurement::metrics() const {
  // @@protoc_insertion_point(field_map:opq.proto3.Measurement.metrics)
  return metrics_.GetMap();
}
 ::google::protobuf::Map< ::std::string, float >*
Measurement::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_map:opq.proto3.Measurement.metrics)
  return metrics_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInfoCommand::GetInfoCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto3.GetInfoCommand)
}

void GetInfoCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetInfoCommand::GetInfoCommand(const GetInfoCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto3.GetInfoCommand)
}

void GetInfoCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetInfoCommand::~GetInfoCommand() {
  // @@protoc_insertion_point(destructor:opq.proto3.GetInfoCommand)
  SharedDtor();
}

void GetInfoCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInfoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfoCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInfoCommand_descriptor_;
}

const GetInfoCommand& GetInfoCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opqbox3_2eproto();
  return *default_instance_;
}

GetInfoCommand* GetInfoCommand::default_instance_ = NULL;

GetInfoCommand* GetInfoCommand::New(::google::protobuf::Arena* arena) const {
  GetInfoCommand* n = new GetInfoCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInfoCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto3.GetInfoCommand)
}

bool GetInfoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto3.GetInfoCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto3.GetInfoCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto3.GetInfoCommand)
  return false;
#undef DO_
}

void GetInfoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto3.GetInfoCommand)
  // @@protoc_insertion_point(serialize_end:opq.proto3.GetInfoCommand)
}

::google::protobuf::uint8* GetInfoCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto3.GetInfoCommand)
  // @@protoc_insertion_point(serialize_to_array_end:opq.proto3.GetInfoCommand)
  return target;
}

int GetInfoCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto3.GetInfoCommand)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfoCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto3.GetInfoCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetInfoCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInfoCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto3.GetInfoCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto3.GetInfoCommand)
    MergeFrom(*source);
  }
}

void GetInfoCommand::MergeFrom(const GetInfoCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto3.GetInfoCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void GetInfoCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto3.GetInfoCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoCommand::CopyFrom(const GetInfoCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto3.GetInfoCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoCommand::IsInitialized() const {

  return true;
}

void GetInfoCommand::Swap(GetInfoCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInfoCommand::InternalSwap(GetInfoCommand* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInfoCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInfoCommand_descriptor_;
  metadata.reflection = GetInfoCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInfoCommand

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDataCommand::kStartMsFieldNumber;
const int GetDataCommand::kEndMsFieldNumber;
const int GetDataCommand::kWaitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDataCommand::GetDataCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto3.GetDataCommand)
}

void GetDataCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetDataCommand::GetDataCommand(const GetDataCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto3.GetDataCommand)
}

void GetDataCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  start_ms_ = GOOGLE_ULONGLONG(0);
  end_ms_ = GOOGLE_ULONGLONG(0);
  wait_ = false;
}

GetDataCommand::~GetDataCommand() {
  // @@protoc_insertion_point(destructor:opq.proto3.GetDataCommand)
  SharedDtor();
}

void GetDataCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDataCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDataCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDataCommand_descriptor_;
}

const GetDataCommand& GetDataCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opqbox3_2eproto();
  return *default_instance_;
}

GetDataCommand* GetDataCommand::default_instance_ = NULL;

GetDataCommand* GetDataCommand::New(::google::protobuf::Arena* arena) const {
  GetDataCommand* n = new GetDataCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDataCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto3.GetDataCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetDataCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetDataCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_ms_, wait_);

#undef ZR_HELPER_
#undef ZR_

}

bool GetDataCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto3.GetDataCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_ms;
        break;
      }

      // optional uint64 end_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_end_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wait;
        break;
      }

      // optional bool wait = 3;
      case 3: {
        if (tag == 24) {
         parse_wait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wait_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto3.GetDataCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto3.GetDataCommand)
  return false;
#undef DO_
}

void GetDataCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto3.GetDataCommand)
  // optional uint64 start_ms = 1;
  if (this->start_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_ms(), output);
  }

  // optional uint64 end_ms = 2;
  if (this->end_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_ms(), output);
  }

  // optional bool wait = 3;
  if (this->wait() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wait(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.proto3.GetDataCommand)
}

::google::protobuf::uint8* GetDataCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto3.GetDataCommand)
  // optional uint64 start_ms = 1;
  if (this->start_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_ms(), target);
  }

  // optional uint64 end_ms = 2;
  if (this->end_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_ms(), target);
  }

  // optional bool wait = 3;
  if (this->wait() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->wait(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.proto3.GetDataCommand)
  return target;
}

int GetDataCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto3.GetDataCommand)
  int total_size = 0;

  // optional uint64 start_ms = 1;
  if (this->start_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_ms());
  }

  // optional uint64 end_ms = 2;
  if (this->end_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_ms());
  }

  // optional bool wait = 3;
  if (this->wait() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDataCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto3.GetDataCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetDataCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDataCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto3.GetDataCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto3.GetDataCommand)
    MergeFrom(*source);
  }
}

void GetDataCommand::MergeFrom(const GetDataCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto3.GetDataCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.start_ms() != 0) {
    set_start_ms(from.start_ms());
  }
  if (from.end_ms() != 0) {
    set_end_ms(from.end_ms());
  }
  if (from.wait() != 0) {
    set_wait(from.wait());
  }
}

void GetDataCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto3.GetDataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataCommand::CopyFrom(const GetDataCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto3.GetDataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataCommand::IsInitialized() const {

  return true;
}

void GetDataCommand::Swap(GetDataCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDataCommand::InternalSwap(GetDataCommand* other) {
  std::swap(start_ms_, other->start_ms_);
  std::swap(end_ms_, other->end_ms_);
  std::swap(wait_, other->wait_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDataCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDataCommand_descriptor_;
  metadata.reflection = GetDataCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDataCommand

// optional uint64 start_ms = 1;
void GetDataCommand::clear_start_ms() {
  start_ms_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GetDataCommand::start_ms() const {
  // @@protoc_insertion_point(field_get:opq.proto3.GetDataCommand.start_ms)
  return start_ms_;
}
 void GetDataCommand::set_start_ms(::google::protobuf::uint64 value) {
  
  start_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.GetDataCommand.start_ms)
}

// optional uint64 end_ms = 2;
void GetDataCommand::clear_end_ms() {
  end_ms_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GetDataCommand::end_ms() const {
  // @@protoc_insertion_point(field_get:opq.proto3.GetDataCommand.end_ms)
  return end_ms_;
}
 void GetDataCommand::set_end_ms(::google::protobuf::uint64 value) {
  
  end_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.GetDataCommand.end_ms)
}

// optional bool wait = 3;
void GetDataCommand::clear_wait() {
  wait_ = false;
}
 bool GetDataCommand::wait() const {
  // @@protoc_insertion_point(field_get:opq.proto3.GetDataCommand.wait)
  return wait_;
}
 void GetDataCommand::set_wait(bool value) {
  
  wait_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.GetDataCommand.wait)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMeasturementRateCommand::kMeasurementWindowCyclesFieldNumber;
const int SetMeasturementRateCommand::kDurationMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMeasturementRateCommand::SetMeasturementRateCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto3.SetMeasturementRateCommand)
}

void SetMeasturementRateCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetMeasturementRateCommand::SetMeasturementRateCommand(const SetMeasturementRateCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto3.SetMeasturementRateCommand)
}

void SetMeasturementRateCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  measurement_window_cycles_ = 0u;
  duration_ms_ = 0u;
}

SetMeasturementRateCommand::~SetMeasturementRateCommand() {
  // @@protoc_insertion_point(destructor:opq.proto3.SetMeasturementRateCommand)
  SharedDtor();
}

void SetMeasturementRateCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetMeasturementRateCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetMeasturementRateCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetMeasturementRateCommand_descriptor_;
}

const SetMeasturementRateCommand& SetMeasturementRateCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opqbox3_2eproto();
  return *default_instance_;
}

SetMeasturementRateCommand* SetMeasturementRateCommand::default_instance_ = NULL;

SetMeasturementRateCommand* SetMeasturementRateCommand::New(::google::protobuf::Arena* arena) const {
  SetMeasturementRateCommand* n = new SetMeasturementRateCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetMeasturementRateCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto3.SetMeasturementRateCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SetMeasturementRateCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SetMeasturementRateCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(measurement_window_cycles_, duration_ms_);

#undef ZR_HELPER_
#undef ZR_

}

bool SetMeasturementRateCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto3.SetMeasturementRateCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 measurement_window_cycles = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &measurement_window_cycles_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration_ms;
        break;
      }

      // optional uint32 duration_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_duration_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto3.SetMeasturementRateCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto3.SetMeasturementRateCommand)
  return false;
#undef DO_
}

void SetMeasturementRateCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto3.SetMeasturementRateCommand)
  // optional uint32 measurement_window_cycles = 1;
  if (this->measurement_window_cycles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->measurement_window_cycles(), output);
  }

  // optional uint32 duration_ms = 2;
  if (this->duration_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration_ms(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.proto3.SetMeasturementRateCommand)
}

::google::protobuf::uint8* SetMeasturementRateCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto3.SetMeasturementRateCommand)
  // optional uint32 measurement_window_cycles = 1;
  if (this->measurement_window_cycles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->measurement_window_cycles(), target);
  }

  // optional uint32 duration_ms = 2;
  if (this->duration_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration_ms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.proto3.SetMeasturementRateCommand)
  return target;
}

int SetMeasturementRateCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto3.SetMeasturementRateCommand)
  int total_size = 0;

  // optional uint32 measurement_window_cycles = 1;
  if (this->measurement_window_cycles() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->measurement_window_cycles());
  }

  // optional uint32 duration_ms = 2;
  if (this->duration_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration_ms());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetMeasturementRateCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto3.SetMeasturementRateCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetMeasturementRateCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetMeasturementRateCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto3.SetMeasturementRateCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto3.SetMeasturementRateCommand)
    MergeFrom(*source);
  }
}

void SetMeasturementRateCommand::MergeFrom(const SetMeasturementRateCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto3.SetMeasturementRateCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.measurement_window_cycles() != 0) {
    set_measurement_window_cycles(from.measurement_window_cycles());
  }
  if (from.duration_ms() != 0) {
    set_duration_ms(from.duration_ms());
  }
}

void SetMeasturementRateCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto3.SetMeasturementRateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMeasturementRateCommand::CopyFrom(const SetMeasturementRateCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto3.SetMeasturementRateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMeasturementRateCommand::IsInitialized() const {

  return true;
}

void SetMeasturementRateCommand::Swap(SetMeasturementRateCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMeasturementRateCommand::InternalSwap(SetMeasturementRateCommand* other) {
  std::swap(measurement_window_cycles_, other->measurement_window_cycles_);
  std::swap(duration_ms_, other->duration_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetMeasturementRateCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetMeasturementRateCommand_descriptor_;
  metadata.reflection = SetMeasturementRateCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetMeasturementRateCommand

// optional uint32 measurement_window_cycles = 1;
void SetMeasturementRateCommand::clear_measurement_window_cycles() {
  measurement_window_cycles_ = 0u;
}
 ::google::protobuf::uint32 SetMeasturementRateCommand::measurement_window_cycles() const {
  // @@protoc_insertion_point(field_get:opq.proto3.SetMeasturementRateCommand.measurement_window_cycles)
  return measurement_window_cycles_;
}
 void SetMeasturementRateCommand::set_measurement_window_cycles(::google::protobuf::uint32 value) {
  
  measurement_window_cycles_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.SetMeasturementRateCommand.measurement_window_cycles)
}

// optional uint32 duration_ms = 2;
void SetMeasturementRateCommand::clear_duration_ms() {
  duration_ms_ = 0u;
}
 ::google::protobuf::uint32 SetMeasturementRateCommand::duration_ms() const {
  // @@protoc_insertion_point(field_get:opq.proto3.SetMeasturementRateCommand.duration_ms)
  return duration_ms_;
}
 void SetMeasturementRateCommand::set_duration_ms(::google::protobuf::uint32 value) {
  
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.SetMeasturementRateCommand.duration_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kBoxIdFieldNumber;
const int Command::kIdentityFieldNumber;
const int Command::kTimestampMsFieldNumber;
const int Command::kInfoCommandFieldNumber;
const int Command::kDataCommandFieldNumber;
const int Command::kSamplingRateCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto3.Command)
}

void Command::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Command_default_oneof_instance_->info_command_ = const_cast< ::opq::proto3::GetInfoCommand*>(&::opq::proto3::GetInfoCommand::default_instance());
  Command_default_oneof_instance_->data_command_ = const_cast< ::opq::proto3::GetDataCommand*>(&::opq::proto3::GetDataCommand::default_instance());
  Command_default_oneof_instance_->sampling_rate_command_ = const_cast< ::opq::proto3::SetMeasturementRateCommand*>(&::opq::proto3::SetMeasturementRateCommand::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto3.Command)
}

void Command::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  box_id_ = 0u;
  identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
  clear_has_command();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:opq.proto3.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_command()) {
    clear_command();
  }
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opqbox3_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:opq.proto3.Command)
  switch(command_case()) {
    case kInfoCommand: {
      delete command_.info_command_;
      break;
    }
    case kDataCommand: {
      delete command_.data_command_;
      break;
    }
    case kSamplingRateCommand: {
      delete command_.sampling_rate_command_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto3.Command)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Command, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Command*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_ms_, box_id_);
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  clear_command();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto3.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 box_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &box_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_identity;
        break;
      }

      // optional string identity = 2;
      case 2: {
        if (tag == 18) {
         parse_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identity()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identity().data(), this->identity().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.proto3.Command.identity"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp_ms;
        break;
      }

      // optional uint64 timestamp_ms = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info_command;
        break;
      }

      // optional .opq.proto3.GetInfoCommand info_command = 4;
      case 4: {
        if (tag == 34) {
         parse_info_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data_command;
        break;
      }

      // optional .opq.proto3.GetDataCommand data_command = 5;
      case 5: {
        if (tag == 42) {
         parse_data_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sampling_rate_command;
        break;
      }

      // optional .opq.proto3.SetMeasturementRateCommand sampling_rate_command = 6;
      case 6: {
        if (tag == 50) {
         parse_sampling_rate_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sampling_rate_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto3.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto3.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto3.Command)
  // optional uint32 box_id = 1;
  if (this->box_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->box_id(), output);
  }

  // optional string identity = 2;
  if (this->identity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.proto3.Command.identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->identity(), output);
  }

  // optional uint64 timestamp_ms = 3;
  if (this->timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp_ms(), output);
  }

  // optional .opq.proto3.GetInfoCommand info_command = 4;
  if (has_info_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *command_.info_command_, output);
  }

  // optional .opq.proto3.GetDataCommand data_command = 5;
  if (has_data_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *command_.data_command_, output);
  }

  // optional .opq.proto3.SetMeasturementRateCommand sampling_rate_command = 6;
  if (has_sampling_rate_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *command_.sampling_rate_command_, output);
  }

  // @@protoc_insertion_point(serialize_end:opq.proto3.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto3.Command)
  // optional uint32 box_id = 1;
  if (this->box_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->box_id(), target);
  }

  // optional string identity = 2;
  if (this->identity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.proto3.Command.identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->identity(), target);
  }

  // optional uint64 timestamp_ms = 3;
  if (this->timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp_ms(), target);
  }

  // optional .opq.proto3.GetInfoCommand info_command = 4;
  if (has_info_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *command_.info_command_, false, target);
  }

  // optional .opq.proto3.GetDataCommand data_command = 5;
  if (has_data_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *command_.data_command_, false, target);
  }

  // optional .opq.proto3.SetMeasturementRateCommand sampling_rate_command = 6;
  if (has_sampling_rate_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *command_.sampling_rate_command_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.proto3.Command)
  return target;
}

int Command::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto3.Command)
  int total_size = 0;

  // optional uint32 box_id = 1;
  if (this->box_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->box_id());
  }

  // optional string identity = 2;
  if (this->identity().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identity());
  }

  // optional uint64 timestamp_ms = 3;
  if (this->timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ms());
  }

  switch (command_case()) {
    // optional .opq.proto3.GetInfoCommand info_command = 4;
    case kInfoCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.info_command_);
      break;
    }
    // optional .opq.proto3.GetDataCommand data_command = 5;
    case kDataCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.data_command_);
      break;
    }
    // optional .opq.proto3.SetMeasturementRateCommand sampling_rate_command = 6;
    case kSamplingRateCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.sampling_rate_command_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto3.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Command* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto3.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto3.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto3.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.command_case()) {
    case kInfoCommand: {
      mutable_info_command()->::opq::proto3::GetInfoCommand::MergeFrom(from.info_command());
      break;
    }
    case kDataCommand: {
      mutable_data_command()->::opq::proto3::GetDataCommand::MergeFrom(from.data_command());
      break;
    }
    case kSamplingRateCommand: {
      mutable_sampling_rate_command()->::opq::proto3::SetMeasturementRateCommand::MergeFrom(from.sampling_rate_command());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (from.box_id() != 0) {
    set_box_id(from.box_id());
  }
  if (from.identity().size() > 0) {

    identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identity_);
  }
  if (from.timestamp_ms() != 0) {
    set_timestamp_ms(from.timestamp_ms());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto3.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto3.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {

  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  std::swap(box_id_, other->box_id_);
  identity_.Swap(&other->identity_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(command_, other->command_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// optional uint32 box_id = 1;
void Command::clear_box_id() {
  box_id_ = 0u;
}
 ::google::protobuf::uint32 Command::box_id() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Command.box_id)
  return box_id_;
}
 void Command::set_box_id(::google::protobuf::uint32 value) {
  
  box_id_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.Command.box_id)
}

// optional string identity = 2;
void Command::clear_identity() {
  identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Command::identity() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Command.identity)
  return identity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Command::set_identity(const ::std::string& value) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.proto3.Command.identity)
}
 void Command::set_identity(const char* value) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.proto3.Command.identity)
}
 void Command::set_identity(const char* value, size_t size) {
  
  identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.proto3.Command.identity)
}
 ::std::string* Command::mutable_identity() {
  
  // @@protoc_insertion_point(field_mutable:opq.proto3.Command.identity)
  return identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Command::release_identity() {
  // @@protoc_insertion_point(field_release:opq.proto3.Command.identity)
  
  return identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Command::set_allocated_identity(::std::string* identity) {
  if (identity != NULL) {
    
  } else {
    
  }
  identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity);
  // @@protoc_insertion_point(field_set_allocated:opq.proto3.Command.identity)
}

// optional uint64 timestamp_ms = 3;
void Command::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Command::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Command.timestamp_ms)
  return timestamp_ms_;
}
 void Command::set_timestamp_ms(::google::protobuf::uint64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.Command.timestamp_ms)
}

// optional .opq.proto3.GetInfoCommand info_command = 4;
bool Command::has_info_command() const {
  return command_case() == kInfoCommand;
}
void Command::set_has_info_command() {
  _oneof_case_[0] = kInfoCommand;
}
void Command::clear_info_command() {
  if (has_info_command()) {
    delete command_.info_command_;
    clear_has_command();
  }
}
 const ::opq::proto3::GetInfoCommand& Command::info_command() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Command.info_command)
  return has_info_command()
      ? *command_.info_command_
      : ::opq::proto3::GetInfoCommand::default_instance();
}
::opq::proto3::GetInfoCommand* Command::mutable_info_command() {
  if (!has_info_command()) {
    clear_command();
    set_has_info_command();
    command_.info_command_ = new ::opq::proto3::GetInfoCommand;
  }
  // @@protoc_insertion_point(field_mutable:opq.proto3.Command.info_command)
  return command_.info_command_;
}
::opq::proto3::GetInfoCommand* Command::release_info_command() {
  // @@protoc_insertion_point(field_release:opq.proto3.Command.info_command)
  if (has_info_command()) {
    clear_has_command();
    ::opq::proto3::GetInfoCommand* temp = command_.info_command_;
    command_.info_command_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_info_command(::opq::proto3::GetInfoCommand* info_command) {
  clear_command();
  if (info_command) {
    set_has_info_command();
    command_.info_command_ = info_command;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.proto3.Command.info_command)
}

// optional .opq.proto3.GetDataCommand data_command = 5;
bool Command::has_data_command() const {
  return command_case() == kDataCommand;
}
void Command::set_has_data_command() {
  _oneof_case_[0] = kDataCommand;
}
void Command::clear_data_command() {
  if (has_data_command()) {
    delete command_.data_command_;
    clear_has_command();
  }
}
 const ::opq::proto3::GetDataCommand& Command::data_command() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Command.data_command)
  return has_data_command()
      ? *command_.data_command_
      : ::opq::proto3::GetDataCommand::default_instance();
}
::opq::proto3::GetDataCommand* Command::mutable_data_command() {
  if (!has_data_command()) {
    clear_command();
    set_has_data_command();
    command_.data_command_ = new ::opq::proto3::GetDataCommand;
  }
  // @@protoc_insertion_point(field_mutable:opq.proto3.Command.data_command)
  return command_.data_command_;
}
::opq::proto3::GetDataCommand* Command::release_data_command() {
  // @@protoc_insertion_point(field_release:opq.proto3.Command.data_command)
  if (has_data_command()) {
    clear_has_command();
    ::opq::proto3::GetDataCommand* temp = command_.data_command_;
    command_.data_command_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_data_command(::opq::proto3::GetDataCommand* data_command) {
  clear_command();
  if (data_command) {
    set_has_data_command();
    command_.data_command_ = data_command;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.proto3.Command.data_command)
}

// optional .opq.proto3.SetMeasturementRateCommand sampling_rate_command = 6;
bool Command::has_sampling_rate_command() const {
  return command_case() == kSamplingRateCommand;
}
void Command::set_has_sampling_rate_command() {
  _oneof_case_[0] = kSamplingRateCommand;
}
void Command::clear_sampling_rate_command() {
  if (has_sampling_rate_command()) {
    delete command_.sampling_rate_command_;
    clear_has_command();
  }
}
 const ::opq::proto3::SetMeasturementRateCommand& Command::sampling_rate_command() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Command.sampling_rate_command)
  return has_sampling_rate_command()
      ? *command_.sampling_rate_command_
      : ::opq::proto3::SetMeasturementRateCommand::default_instance();
}
::opq::proto3::SetMeasturementRateCommand* Command::mutable_sampling_rate_command() {
  if (!has_sampling_rate_command()) {
    clear_command();
    set_has_sampling_rate_command();
    command_.sampling_rate_command_ = new ::opq::proto3::SetMeasturementRateCommand;
  }
  // @@protoc_insertion_point(field_mutable:opq.proto3.Command.sampling_rate_command)
  return command_.sampling_rate_command_;
}
::opq::proto3::SetMeasturementRateCommand* Command::release_sampling_rate_command() {
  // @@protoc_insertion_point(field_release:opq.proto3.Command.sampling_rate_command)
  if (has_sampling_rate_command()) {
    clear_has_command();
    ::opq::proto3::SetMeasturementRateCommand* temp = command_.sampling_rate_command_;
    command_.sampling_rate_command_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_sampling_rate_command(::opq::proto3::SetMeasturementRateCommand* sampling_rate_command) {
  clear_command();
  if (sampling_rate_command) {
    set_has_sampling_rate_command();
    command_.sampling_rate_command_ = sampling_rate_command;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.proto3.Command.sampling_rate_command)
}

bool Command::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
void Command::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
Command::CommandCase Command::command_case() const {
  return Command::CommandCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInfoResponse::kMacAddrFieldNumber;
const int GetInfoResponse::kWifiNetworkFieldNumber;
const int GetInfoResponse::kIpFieldNumber;
const int GetInfoResponse::kUptimeFieldNumber;
const int GetInfoResponse::kCalibrationConstantFieldNumber;
const int GetInfoResponse::kPubKeyFieldNumber;
const int GetInfoResponse::kMeasurementRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInfoResponse::GetInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto3.GetInfoResponse)
}

void GetInfoResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetInfoResponse::GetInfoResponse(const GetInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto3.GetInfoResponse)
}

void GetInfoResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mac_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wifi_network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uptime_ = GOOGLE_ULONGLONG(0);
  calibration_constant_ = GOOGLE_ULONGLONG(0);
  pub_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  measurement_rate_ = 0u;
}

GetInfoResponse::~GetInfoResponse() {
  // @@protoc_insertion_point(destructor:opq.proto3.GetInfoResponse)
  SharedDtor();
}

void GetInfoResponse::SharedDtor() {
  mac_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wifi_network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pub_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInfoResponse_descriptor_;
}

const GetInfoResponse& GetInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opqbox3_2eproto();
  return *default_instance_;
}

GetInfoResponse* GetInfoResponse::default_instance_ = NULL;

GetInfoResponse* GetInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetInfoResponse* n = new GetInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto3.GetInfoResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetInfoResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetInfoResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uptime_, calibration_constant_);
  mac_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wifi_network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  measurement_rate_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool GetInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto3.GetInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mac_addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac_addr().data(), this->mac_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.proto3.GetInfoResponse.mac_addr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wifi_network;
        break;
      }

      // optional string wifi_network = 2;
      case 2: {
        if (tag == 18) {
         parse_wifi_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wifi_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wifi_network().data(), this->wifi_network().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.proto3.GetInfoResponse.wifi_network"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.proto3.GetInfoResponse.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uptime;
        break;
      }

      // optional uint64 uptime = 4;
      case 4: {
        if (tag == 32) {
         parse_uptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uptime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_calibration_constant;
        break;
      }

      // optional uint64 calibration_constant = 5;
      case 5: {
        if (tag == 40) {
         parse_calibration_constant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &calibration_constant_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pub_key;
        break;
      }

      // optional string pub_key = 6;
      case 6: {
        if (tag == 50) {
         parse_pub_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pub_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pub_key().data(), this->pub_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "opq.proto3.GetInfoResponse.pub_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_measurement_rate;
        break;
      }

      // optional uint32 measurement_rate = 7;
      case 7: {
        if (tag == 56) {
         parse_measurement_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &measurement_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto3.GetInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto3.GetInfoResponse)
  return false;
#undef DO_
}

void GetInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto3.GetInfoResponse)
  // optional string mac_addr = 1;
  if (this->mac_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.proto3.GetInfoResponse.mac_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mac_addr(), output);
  }

  // optional string wifi_network = 2;
  if (this->wifi_network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wifi_network().data(), this->wifi_network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.proto3.GetInfoResponse.wifi_network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wifi_network(), output);
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.proto3.GetInfoResponse.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional uint64 uptime = 4;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uptime(), output);
  }

  // optional uint64 calibration_constant = 5;
  if (this->calibration_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->calibration_constant(), output);
  }

  // optional string pub_key = 6;
  if (this->pub_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pub_key().data(), this->pub_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.proto3.GetInfoResponse.pub_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pub_key(), output);
  }

  // optional uint32 measurement_rate = 7;
  if (this->measurement_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->measurement_rate(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.proto3.GetInfoResponse)
}

::google::protobuf::uint8* GetInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto3.GetInfoResponse)
  // optional string mac_addr = 1;
  if (this->mac_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.proto3.GetInfoResponse.mac_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mac_addr(), target);
  }

  // optional string wifi_network = 2;
  if (this->wifi_network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wifi_network().data(), this->wifi_network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.proto3.GetInfoResponse.wifi_network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wifi_network(), target);
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.proto3.GetInfoResponse.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional uint64 uptime = 4;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uptime(), target);
  }

  // optional uint64 calibration_constant = 5;
  if (this->calibration_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->calibration_constant(), target);
  }

  // optional string pub_key = 6;
  if (this->pub_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pub_key().data(), this->pub_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "opq.proto3.GetInfoResponse.pub_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pub_key(), target);
  }

  // optional uint32 measurement_rate = 7;
  if (this->measurement_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->measurement_rate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.proto3.GetInfoResponse)
  return target;
}

int GetInfoResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto3.GetInfoResponse)
  int total_size = 0;

  // optional string mac_addr = 1;
  if (this->mac_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac_addr());
  }

  // optional string wifi_network = 2;
  if (this->wifi_network().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wifi_network());
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional uint64 uptime = 4;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uptime());
  }

  // optional uint64 calibration_constant = 5;
  if (this->calibration_constant() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->calibration_constant());
  }

  // optional string pub_key = 6;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pub_key());
  }

  // optional uint32 measurement_rate = 7;
  if (this->measurement_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->measurement_rate());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto3.GetInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto3.GetInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto3.GetInfoResponse)
    MergeFrom(*source);
  }
}

void GetInfoResponse::MergeFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto3.GetInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mac_addr().size() > 0) {

    mac_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_addr_);
  }
  if (from.wifi_network().size() > 0) {

    wifi_network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wifi_network_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.calibration_constant() != 0) {
    set_calibration_constant(from.calibration_constant());
  }
  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from.measurement_rate() != 0) {
    set_measurement_rate(from.measurement_rate());
  }
}

void GetInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto3.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoResponse::CopyFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto3.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoResponse::IsInitialized() const {

  return true;
}

void GetInfoResponse::Swap(GetInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInfoResponse::InternalSwap(GetInfoResponse* other) {
  mac_addr_.Swap(&other->mac_addr_);
  wifi_network_.Swap(&other->wifi_network_);
  ip_.Swap(&other->ip_);
  std::swap(uptime_, other->uptime_);
  std::swap(calibration_constant_, other->calibration_constant_);
  pub_key_.Swap(&other->pub_key_);
  std::swap(measurement_rate_, other->measurement_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInfoResponse_descriptor_;
  metadata.reflection = GetInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInfoResponse

// optional string mac_addr = 1;
void GetInfoResponse::clear_mac_addr() {
  mac_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetInfoResponse::mac_addr() const {
  // @@protoc_insertion_point(field_get:opq.proto3.GetInfoResponse.mac_addr)
  return mac_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetInfoResponse::set_mac_addr(const ::std::string& value) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.proto3.GetInfoResponse.mac_addr)
}
 void GetInfoResponse::set_mac_addr(const char* value) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.proto3.GetInfoResponse.mac_addr)
}
 void GetInfoResponse::set_mac_addr(const char* value, size_t size) {
  
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.proto3.GetInfoResponse.mac_addr)
}
 ::std::string* GetInfoResponse::mutable_mac_addr() {
  
  // @@protoc_insertion_point(field_mutable:opq.proto3.GetInfoResponse.mac_addr)
  return mac_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetInfoResponse::release_mac_addr() {
  // @@protoc_insertion_point(field_release:opq.proto3.GetInfoResponse.mac_addr)
  
  return mac_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetInfoResponse::set_allocated_mac_addr(::std::string* mac_addr) {
  if (mac_addr != NULL) {
    
  } else {
    
  }
  mac_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_addr);
  // @@protoc_insertion_point(field_set_allocated:opq.proto3.GetInfoResponse.mac_addr)
}

// optional string wifi_network = 2;
void GetInfoResponse::clear_wifi_network() {
  wifi_network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetInfoResponse::wifi_network() const {
  // @@protoc_insertion_point(field_get:opq.proto3.GetInfoResponse.wifi_network)
  return wifi_network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetInfoResponse::set_wifi_network(const ::std::string& value) {
  
  wifi_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.proto3.GetInfoResponse.wifi_network)
}
 void GetInfoResponse::set_wifi_network(const char* value) {
  
  wifi_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.proto3.GetInfoResponse.wifi_network)
}
 void GetInfoResponse::set_wifi_network(const char* value, size_t size) {
  
  wifi_network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.proto3.GetInfoResponse.wifi_network)
}
 ::std::string* GetInfoResponse::mutable_wifi_network() {
  
  // @@protoc_insertion_point(field_mutable:opq.proto3.GetInfoResponse.wifi_network)
  return wifi_network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetInfoResponse::release_wifi_network() {
  // @@protoc_insertion_point(field_release:opq.proto3.GetInfoResponse.wifi_network)
  
  return wifi_network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetInfoResponse::set_allocated_wifi_network(::std::string* wifi_network) {
  if (wifi_network != NULL) {
    
  } else {
    
  }
  wifi_network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifi_network);
  // @@protoc_insertion_point(field_set_allocated:opq.proto3.GetInfoResponse.wifi_network)
}

// optional string ip = 3;
void GetInfoResponse::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetInfoResponse::ip() const {
  // @@protoc_insertion_point(field_get:opq.proto3.GetInfoResponse.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetInfoResponse::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.proto3.GetInfoResponse.ip)
}
 void GetInfoResponse::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.proto3.GetInfoResponse.ip)
}
 void GetInfoResponse::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.proto3.GetInfoResponse.ip)
}
 ::std::string* GetInfoResponse::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:opq.proto3.GetInfoResponse.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetInfoResponse::release_ip() {
  // @@protoc_insertion_point(field_release:opq.proto3.GetInfoResponse.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetInfoResponse::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:opq.proto3.GetInfoResponse.ip)
}

// optional uint64 uptime = 4;
void GetInfoResponse::clear_uptime() {
  uptime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GetInfoResponse::uptime() const {
  // @@protoc_insertion_point(field_get:opq.proto3.GetInfoResponse.uptime)
  return uptime_;
}
 void GetInfoResponse::set_uptime(::google::protobuf::uint64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.GetInfoResponse.uptime)
}

// optional uint64 calibration_constant = 5;
void GetInfoResponse::clear_calibration_constant() {
  calibration_constant_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GetInfoResponse::calibration_constant() const {
  // @@protoc_insertion_point(field_get:opq.proto3.GetInfoResponse.calibration_constant)
  return calibration_constant_;
}
 void GetInfoResponse::set_calibration_constant(::google::protobuf::uint64 value) {
  
  calibration_constant_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.GetInfoResponse.calibration_constant)
}

// optional string pub_key = 6;
void GetInfoResponse::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetInfoResponse::pub_key() const {
  // @@protoc_insertion_point(field_get:opq.proto3.GetInfoResponse.pub_key)
  return pub_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetInfoResponse::set_pub_key(const ::std::string& value) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opq.proto3.GetInfoResponse.pub_key)
}
 void GetInfoResponse::set_pub_key(const char* value) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opq.proto3.GetInfoResponse.pub_key)
}
 void GetInfoResponse::set_pub_key(const char* value, size_t size) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opq.proto3.GetInfoResponse.pub_key)
}
 ::std::string* GetInfoResponse::mutable_pub_key() {
  
  // @@protoc_insertion_point(field_mutable:opq.proto3.GetInfoResponse.pub_key)
  return pub_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetInfoResponse::release_pub_key() {
  // @@protoc_insertion_point(field_release:opq.proto3.GetInfoResponse.pub_key)
  
  return pub_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetInfoResponse::set_allocated_pub_key(::std::string* pub_key) {
  if (pub_key != NULL) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:opq.proto3.GetInfoResponse.pub_key)
}

// optional uint32 measurement_rate = 7;
void GetInfoResponse::clear_measurement_rate() {
  measurement_rate_ = 0u;
}
 ::google::protobuf::uint32 GetInfoResponse::measurement_rate() const {
  // @@protoc_insertion_point(field_get:opq.proto3.GetInfoResponse.measurement_rate)
  return measurement_rate_;
}
 void GetInfoResponse::set_measurement_rate(::google::protobuf::uint32 value) {
  
  measurement_rate_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.GetInfoResponse.measurement_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMeasurementRateResponse::kOldRateCyclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMeasurementRateResponse::SetMeasurementRateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto3.SetMeasurementRateResponse)
}

void SetMeasurementRateResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetMeasurementRateResponse::SetMeasurementRateResponse(const SetMeasurementRateResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto3.SetMeasurementRateResponse)
}

void SetMeasurementRateResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  old_rate_cycles_ = 0u;
}

SetMeasurementRateResponse::~SetMeasurementRateResponse() {
  // @@protoc_insertion_point(destructor:opq.proto3.SetMeasurementRateResponse)
  SharedDtor();
}

void SetMeasurementRateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetMeasurementRateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetMeasurementRateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetMeasurementRateResponse_descriptor_;
}

const SetMeasurementRateResponse& SetMeasurementRateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opqbox3_2eproto();
  return *default_instance_;
}

SetMeasurementRateResponse* SetMeasurementRateResponse::default_instance_ = NULL;

SetMeasurementRateResponse* SetMeasurementRateResponse::New(::google::protobuf::Arena* arena) const {
  SetMeasurementRateResponse* n = new SetMeasurementRateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetMeasurementRateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto3.SetMeasurementRateResponse)
  old_rate_cycles_ = 0u;
}

bool SetMeasurementRateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto3.SetMeasurementRateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 old_rate_cycles = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_rate_cycles_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto3.SetMeasurementRateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto3.SetMeasurementRateResponse)
  return false;
#undef DO_
}

void SetMeasurementRateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto3.SetMeasurementRateResponse)
  // optional uint32 old_rate_cycles = 1;
  if (this->old_rate_cycles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->old_rate_cycles(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.proto3.SetMeasurementRateResponse)
}

::google::protobuf::uint8* SetMeasurementRateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto3.SetMeasurementRateResponse)
  // optional uint32 old_rate_cycles = 1;
  if (this->old_rate_cycles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->old_rate_cycles(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.proto3.SetMeasurementRateResponse)
  return target;
}

int SetMeasurementRateResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto3.SetMeasurementRateResponse)
  int total_size = 0;

  // optional uint32 old_rate_cycles = 1;
  if (this->old_rate_cycles() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->old_rate_cycles());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetMeasurementRateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto3.SetMeasurementRateResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetMeasurementRateResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetMeasurementRateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto3.SetMeasurementRateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto3.SetMeasurementRateResponse)
    MergeFrom(*source);
  }
}

void SetMeasurementRateResponse::MergeFrom(const SetMeasurementRateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto3.SetMeasurementRateResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.old_rate_cycles() != 0) {
    set_old_rate_cycles(from.old_rate_cycles());
  }
}

void SetMeasurementRateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto3.SetMeasurementRateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMeasurementRateResponse::CopyFrom(const SetMeasurementRateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto3.SetMeasurementRateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMeasurementRateResponse::IsInitialized() const {

  return true;
}

void SetMeasurementRateResponse::Swap(SetMeasurementRateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMeasurementRateResponse::InternalSwap(SetMeasurementRateResponse* other) {
  std::swap(old_rate_cycles_, other->old_rate_cycles_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetMeasurementRateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetMeasurementRateResponse_descriptor_;
  metadata.reflection = SetMeasurementRateResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetMeasurementRateResponse

// optional uint32 old_rate_cycles = 1;
void SetMeasurementRateResponse::clear_old_rate_cycles() {
  old_rate_cycles_ = 0u;
}
 ::google::protobuf::uint32 SetMeasurementRateResponse::old_rate_cycles() const {
  // @@protoc_insertion_point(field_get:opq.proto3.SetMeasurementRateResponse.old_rate_cycles)
  return old_rate_cycles_;
}
 void SetMeasurementRateResponse::set_old_rate_cycles(::google::protobuf::uint32 value) {
  
  old_rate_cycles_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.SetMeasurementRateResponse.old_rate_cycles)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDateResponseHeader::kStartTsFieldNumber;
const int GetDateResponseHeader::kEndTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDateResponseHeader::GetDateResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto3.GetDateResponseHeader)
}

void GetDateResponseHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetDateResponseHeader::GetDateResponseHeader(const GetDateResponseHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto3.GetDateResponseHeader)
}

void GetDateResponseHeader::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  start_ts_ = GOOGLE_ULONGLONG(0);
  end_ts_ = GOOGLE_ULONGLONG(0);
}

GetDateResponseHeader::~GetDateResponseHeader() {
  // @@protoc_insertion_point(destructor:opq.proto3.GetDateResponseHeader)
  SharedDtor();
}

void GetDateResponseHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDateResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDateResponseHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDateResponseHeader_descriptor_;
}

const GetDateResponseHeader& GetDateResponseHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opqbox3_2eproto();
  return *default_instance_;
}

GetDateResponseHeader* GetDateResponseHeader::default_instance_ = NULL;

GetDateResponseHeader* GetDateResponseHeader::New(::google::protobuf::Arena* arena) const {
  GetDateResponseHeader* n = new GetDateResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDateResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto3.GetDateResponseHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetDateResponseHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetDateResponseHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_ts_, end_ts_);

#undef ZR_HELPER_
#undef ZR_

}

bool GetDateResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto3.GetDateResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_ts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_ts;
        break;
      }

      // optional uint64 end_ts = 2;
      case 2: {
        if (tag == 16) {
         parse_end_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_ts_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto3.GetDateResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto3.GetDateResponseHeader)
  return false;
#undef DO_
}

void GetDateResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto3.GetDateResponseHeader)
  // optional uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_ts(), output);
  }

  // optional uint64 end_ts = 2;
  if (this->end_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_ts(), output);
  }

  // @@protoc_insertion_point(serialize_end:opq.proto3.GetDateResponseHeader)
}

::google::protobuf::uint8* GetDateResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto3.GetDateResponseHeader)
  // optional uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_ts(), target);
  }

  // optional uint64 end_ts = 2;
  if (this->end_ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_ts(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.proto3.GetDateResponseHeader)
  return target;
}

int GetDateResponseHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto3.GetDateResponseHeader)
  int total_size = 0;

  // optional uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_ts());
  }

  // optional uint64 end_ts = 2;
  if (this->end_ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_ts());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDateResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto3.GetDateResponseHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetDateResponseHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDateResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto3.GetDateResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto3.GetDateResponseHeader)
    MergeFrom(*source);
  }
}

void GetDateResponseHeader::MergeFrom(const GetDateResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto3.GetDateResponseHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.start_ts() != 0) {
    set_start_ts(from.start_ts());
  }
  if (from.end_ts() != 0) {
    set_end_ts(from.end_ts());
  }
}

void GetDateResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto3.GetDateResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDateResponseHeader::CopyFrom(const GetDateResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto3.GetDateResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDateResponseHeader::IsInitialized() const {

  return true;
}

void GetDateResponseHeader::Swap(GetDateResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDateResponseHeader::InternalSwap(GetDateResponseHeader* other) {
  std::swap(start_ts_, other->start_ts_);
  std::swap(end_ts_, other->end_ts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDateResponseHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDateResponseHeader_descriptor_;
  metadata.reflection = GetDateResponseHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDateResponseHeader

// optional uint64 start_ts = 1;
void GetDateResponseHeader::clear_start_ts() {
  start_ts_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GetDateResponseHeader::start_ts() const {
  // @@protoc_insertion_point(field_get:opq.proto3.GetDateResponseHeader.start_ts)
  return start_ts_;
}
 void GetDateResponseHeader::set_start_ts(::google::protobuf::uint64 value) {
  
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.GetDateResponseHeader.start_ts)
}

// optional uint64 end_ts = 2;
void GetDateResponseHeader::clear_end_ts() {
  end_ts_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GetDateResponseHeader::end_ts() const {
  // @@protoc_insertion_point(field_get:opq.proto3.GetDateResponseHeader.end_ts)
  return end_ts_;
}
 void GetDateResponseHeader::set_end_ts(::google::protobuf::uint64 value) {
  
  end_ts_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.GetDateResponseHeader.end_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kBoxIdFieldNumber;
const int Response::kSeqFieldNumber;
const int Response::kTimestampMsFieldNumber;
const int Response::kInfoResponseFieldNumber;
const int Response::kMessageRateReponseFieldNumber;
const int Response::kGetDataResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:opq.proto3.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Response_default_oneof_instance_->info_response_ = const_cast< ::opq::proto3::GetInfoResponse*>(&::opq::proto3::GetInfoResponse::default_instance());
  Response_default_oneof_instance_->message_rate_reponse_ = const_cast< ::opq::proto3::SetMeasurementRateResponse*>(&::opq::proto3::SetMeasurementRateResponse::default_instance());
  Response_default_oneof_instance_->get_data_response_ = const_cast< ::opq::proto3::GetDateResponseHeader*>(&::opq::proto3::GetDateResponseHeader::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:opq.proto3.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  box_id_ = 0;
  seq_ = 0u;
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
  clear_has_response();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:opq.proto3.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (has_response()) {
    clear_response();
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_opqbox3_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:opq.proto3.Response)
  switch(response_case()) {
    case kInfoResponse: {
      delete response_.info_response_;
      break;
    }
    case kMessageRateReponse: {
      delete response_.message_rate_reponse_;
      break;
    }
    case kGetDataResponse: {
      delete response_.get_data_response_;
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:opq.proto3.Response)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Response, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Response*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(box_id_, timestamp_ms_);

#undef ZR_HELPER_
#undef ZR_

  clear_response();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:opq.proto3.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 box_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 2;
      case 2: {
        if (tag == 16) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp_ms;
        break;
      }

      // optional uint64 timestamp_ms = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info_response;
        break;
      }

      // optional .opq.proto3.GetInfoResponse info_response = 4;
      case 4: {
        if (tag == 34) {
         parse_info_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_message_rate_reponse;
        break;
      }

      // optional .opq.proto3.SetMeasurementRateResponse message_rate_reponse = 5;
      case 5: {
        if (tag == 42) {
         parse_message_rate_reponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message_rate_reponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_get_data_response;
        break;
      }

      // optional .opq.proto3.GetDateResponseHeader get_data_response = 6;
      case 6: {
        if (tag == 50) {
         parse_get_data_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_data_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:opq.proto3.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:opq.proto3.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:opq.proto3.Response)
  // optional int32 box_id = 1;
  if (this->box_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->box_id(), output);
  }

  // optional uint32 seq = 2;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seq(), output);
  }

  // optional uint64 timestamp_ms = 3;
  if (this->timestamp_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp_ms(), output);
  }

  // optional .opq.proto3.GetInfoResponse info_response = 4;
  if (has_info_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *response_.info_response_, output);
  }

  // optional .opq.proto3.SetMeasurementRateResponse message_rate_reponse = 5;
  if (has_message_rate_reponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *response_.message_rate_reponse_, output);
  }

  // optional .opq.proto3.GetDateResponseHeader get_data_response = 6;
  if (has_get_data_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *response_.get_data_response_, output);
  }

  // @@protoc_insertion_point(serialize_end:opq.proto3.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:opq.proto3.Response)
  // optional int32 box_id = 1;
  if (this->box_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->box_id(), target);
  }

  // optional uint32 seq = 2;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq(), target);
  }

  // optional uint64 timestamp_ms = 3;
  if (this->timestamp_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp_ms(), target);
  }

  // optional .opq.proto3.GetInfoResponse info_response = 4;
  if (has_info_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *response_.info_response_, false, target);
  }

  // optional .opq.proto3.SetMeasurementRateResponse message_rate_reponse = 5;
  if (has_message_rate_reponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *response_.message_rate_reponse_, false, target);
  }

  // optional .opq.proto3.GetDateResponseHeader get_data_response = 6;
  if (has_get_data_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *response_.get_data_response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:opq.proto3.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:opq.proto3.Response)
  int total_size = 0;

  // optional int32 box_id = 1;
  if (this->box_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->box_id());
  }

  // optional uint32 seq = 2;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());
  }

  // optional uint64 timestamp_ms = 3;
  if (this->timestamp_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ms());
  }

  switch (response_case()) {
    // optional .opq.proto3.GetInfoResponse info_response = 4;
    case kInfoResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.info_response_);
      break;
    }
    // optional .opq.proto3.SetMeasurementRateResponse message_rate_reponse = 5;
    case kMessageRateReponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.message_rate_reponse_);
      break;
    }
    // optional .opq.proto3.GetDateResponseHeader get_data_response = 6;
    case kGetDataResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.get_data_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opq.proto3.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opq.proto3.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opq.proto3.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opq.proto3.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.response_case()) {
    case kInfoResponse: {
      mutable_info_response()->::opq::proto3::GetInfoResponse::MergeFrom(from.info_response());
      break;
    }
    case kMessageRateReponse: {
      mutable_message_rate_reponse()->::opq::proto3::SetMeasurementRateResponse::MergeFrom(from.message_rate_reponse());
      break;
    }
    case kGetDataResponse: {
      mutable_get_data_response()->::opq::proto3::GetDateResponseHeader::MergeFrom(from.get_data_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (from.box_id() != 0) {
    set_box_id(from.box_id());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.timestamp_ms() != 0) {
    set_timestamp_ms(from.timestamp_ms());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opq.proto3.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opq.proto3.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(box_id_, other->box_id_);
  std::swap(seq_, other->seq_);
  std::swap(timestamp_ms_, other->timestamp_ms_);
  std::swap(response_, other->response_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional int32 box_id = 1;
void Response::clear_box_id() {
  box_id_ = 0;
}
 ::google::protobuf::int32 Response::box_id() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Response.box_id)
  return box_id_;
}
 void Response::set_box_id(::google::protobuf::int32 value) {
  
  box_id_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.Response.box_id)
}

// optional uint32 seq = 2;
void Response::clear_seq() {
  seq_ = 0u;
}
 ::google::protobuf::uint32 Response::seq() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Response.seq)
  return seq_;
}
 void Response::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.Response.seq)
}

// optional uint64 timestamp_ms = 3;
void Response::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Response::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Response.timestamp_ms)
  return timestamp_ms_;
}
 void Response::set_timestamp_ms(::google::protobuf::uint64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:opq.proto3.Response.timestamp_ms)
}

// optional .opq.proto3.GetInfoResponse info_response = 4;
bool Response::has_info_response() const {
  return response_case() == kInfoResponse;
}
void Response::set_has_info_response() {
  _oneof_case_[0] = kInfoResponse;
}
void Response::clear_info_response() {
  if (has_info_response()) {
    delete response_.info_response_;
    clear_has_response();
  }
}
 const ::opq::proto3::GetInfoResponse& Response::info_response() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Response.info_response)
  return has_info_response()
      ? *response_.info_response_
      : ::opq::proto3::GetInfoResponse::default_instance();
}
::opq::proto3::GetInfoResponse* Response::mutable_info_response() {
  if (!has_info_response()) {
    clear_response();
    set_has_info_response();
    response_.info_response_ = new ::opq::proto3::GetInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:opq.proto3.Response.info_response)
  return response_.info_response_;
}
::opq::proto3::GetInfoResponse* Response::release_info_response() {
  // @@protoc_insertion_point(field_release:opq.proto3.Response.info_response)
  if (has_info_response()) {
    clear_has_response();
    ::opq::proto3::GetInfoResponse* temp = response_.info_response_;
    response_.info_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_info_response(::opq::proto3::GetInfoResponse* info_response) {
  clear_response();
  if (info_response) {
    set_has_info_response();
    response_.info_response_ = info_response;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.proto3.Response.info_response)
}

// optional .opq.proto3.SetMeasurementRateResponse message_rate_reponse = 5;
bool Response::has_message_rate_reponse() const {
  return response_case() == kMessageRateReponse;
}
void Response::set_has_message_rate_reponse() {
  _oneof_case_[0] = kMessageRateReponse;
}
void Response::clear_message_rate_reponse() {
  if (has_message_rate_reponse()) {
    delete response_.message_rate_reponse_;
    clear_has_response();
  }
}
 const ::opq::proto3::SetMeasurementRateResponse& Response::message_rate_reponse() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Response.message_rate_reponse)
  return has_message_rate_reponse()
      ? *response_.message_rate_reponse_
      : ::opq::proto3::SetMeasurementRateResponse::default_instance();
}
::opq::proto3::SetMeasurementRateResponse* Response::mutable_message_rate_reponse() {
  if (!has_message_rate_reponse()) {
    clear_response();
    set_has_message_rate_reponse();
    response_.message_rate_reponse_ = new ::opq::proto3::SetMeasurementRateResponse;
  }
  // @@protoc_insertion_point(field_mutable:opq.proto3.Response.message_rate_reponse)
  return response_.message_rate_reponse_;
}
::opq::proto3::SetMeasurementRateResponse* Response::release_message_rate_reponse() {
  // @@protoc_insertion_point(field_release:opq.proto3.Response.message_rate_reponse)
  if (has_message_rate_reponse()) {
    clear_has_response();
    ::opq::proto3::SetMeasurementRateResponse* temp = response_.message_rate_reponse_;
    response_.message_rate_reponse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_message_rate_reponse(::opq::proto3::SetMeasurementRateResponse* message_rate_reponse) {
  clear_response();
  if (message_rate_reponse) {
    set_has_message_rate_reponse();
    response_.message_rate_reponse_ = message_rate_reponse;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.proto3.Response.message_rate_reponse)
}

// optional .opq.proto3.GetDateResponseHeader get_data_response = 6;
bool Response::has_get_data_response() const {
  return response_case() == kGetDataResponse;
}
void Response::set_has_get_data_response() {
  _oneof_case_[0] = kGetDataResponse;
}
void Response::clear_get_data_response() {
  if (has_get_data_response()) {
    delete response_.get_data_response_;
    clear_has_response();
  }
}
 const ::opq::proto3::GetDateResponseHeader& Response::get_data_response() const {
  // @@protoc_insertion_point(field_get:opq.proto3.Response.get_data_response)
  return has_get_data_response()
      ? *response_.get_data_response_
      : ::opq::proto3::GetDateResponseHeader::default_instance();
}
::opq::proto3::GetDateResponseHeader* Response::mutable_get_data_response() {
  if (!has_get_data_response()) {
    clear_response();
    set_has_get_data_response();
    response_.get_data_response_ = new ::opq::proto3::GetDateResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:opq.proto3.Response.get_data_response)
  return response_.get_data_response_;
}
::opq::proto3::GetDateResponseHeader* Response::release_get_data_response() {
  // @@protoc_insertion_point(field_release:opq.proto3.Response.get_data_response)
  if (has_get_data_response()) {
    clear_has_response();
    ::opq::proto3::GetDateResponseHeader* temp = response_.get_data_response_;
    response_.get_data_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_get_data_response(::opq::proto3::GetDateResponseHeader* get_data_response) {
  clear_response();
  if (get_data_response) {
    set_has_get_data_response();
    response_.get_data_response_ = get_data_response;
  }
  // @@protoc_insertion_point(field_set_allocated:opq.proto3.Response.get_data_response)
}

bool Response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
void Response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
Response::ResponseCase Response::response_case() const {
  return Response::ResponseCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto3
}  // namespace opq

// @@protoc_insertion_point(global_scope)
