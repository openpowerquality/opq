#include <iostream>
#include <boost/program_options.hpp>
#include <boost/filesystem.hpp>
#include <boost/range/iterator_range.hpp>
#include <zmq.h>

using namespace boost::program_options;
using namespace boost::filesystem;

using namespace std;

void list_identities(string path) {
    if (is_directory(path + "/private_keys")) {
        cout << "Public Identities:\n";
        for (auto &entry:boost::make_iterator_range(directory_iterator(path + "/private_keys"), {}))
            std::cout << entry.path().leaf() << "\n";
    } else {
        cout << path + " No Public Identities.\n";
    }
    if (is_directory(path + "/public_keys")) {
        cout << "No Private Identities.\n";
        for (auto &entry:boost::make_iterator_range(directory_iterator(path + "/public_keys"), {}))
            std::cout << entry.path().leaf() << "\n";
    } else {
        cout << path + " No Private Identities.\n";
    }
}

void create_new_identity(int id, string cert_path) {
    path p(cert_path + "/private_keys");
    string filename = "/opqbox" + std::to_string(id) + "_secret";
    if (!is_directory(p)) {
        cerr << "could not open directory " << p << " making certificate in " <<
             path(".") << endl;
        p = path(".");
    }
    if (exists(p / filename)) {
        throw
                error("Identity " + to_string(id) + " already exists");
    }
    boost::filesystem::ofstream file(p / filename);
    if (!file.is_open()) {
        throw
                error("could not create file " + (p / filename).string());
    }
    char public_key[41];
    char secret_key[41];
    if (zmq_curve_keypair(public_key, secret_key)) {
        if (zmq_errno() == ENOTSUP)
            throw
                    error("To use curve_keygen, please install libsodium and then "
                                  "rebuild libzmq.");
    }
    file << "# This file was autogenerated by opq_curve_gen. Please do not edit." << endl;
    file << "metadata" << endl;
    file << "curve" << endl;
    file << "    id = " << id << endl;
    file << "    public-key = \"" << public_key << "\"" << endl;
    file << "    secret-key = " << "\"" << secret_key << "\"" << endl;
    file.close();

    cout << "# This file was autogenerated by opq_curve_gen. Please do not edit." << endl;
    cout << "metadata" << endl;
    cout << "curve" << endl;
    cout << "    id = " << id << endl;
    cout << "    public-key = \"" << public_key << "\"" << endl;
}

int main(int argc, char **argv) {
    try {
        options_description desc{"Options"};
        desc.add_options()
                ("help,h", "Help message")
                ("list,l", "List identities")
                ("new,n", value<int>(), "New Identity")
                ("path,p", value<string>()->default_value("/etc/opq/curve"),
                 "Certificate path typically /etc/opq/curve");
        variables_map vm;
        store(parse_command_line(argc, argv, desc), vm);
        notify(vm);
        if (vm.count("help")) std::cout << desc << '\n';
        else if (vm.count("list")) {
            string p = vm["path"].as<string>();
            list_identities(p);
        }
        else if (vm.count("new")) {
            string p = vm["path"].as<string>();
            create_new_identity(vm["new"].as<int>(), p);
        }
        else
            std::cout << desc << '\n';
    }
    catch (const error &ex) {
        std::cerr << ex.what() << '\n';
    }

}
